"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80670],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return u}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},l=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(t),u=a,m=l["".concat(s,".").concat(u)]||l[u]||h[u]||i;return t?n.createElement(m,o(o({ref:r},d),{},{components:t})):n.createElement(m,o({ref:r},d))}));function u(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=l;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}l.displayName="MDXCreateElement"},83694:function(e,r,t){t.r(r),t.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return h}});var n=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],c={id:"batch-renderer-group-how",title:"How BatchRendererGroup works",slug:"/batch-renderer-group/batch-renderer-group-how"},s="How BatchRendererGroup works",p={unversionedId:"graphics/graphics-performance-profiling/batch-renderer-group/batch-renderer-group-how",id:"graphics/graphics-performance-profiling/batch-renderer-group/batch-renderer-group-how",title:"How BatchRendererGroup works",description:"To render to the screen, BatchRendererGroup (BRG) generates draw commands which are a BRG-specific concept that contains everything Unity needs to efficiently create optimized, instanced draw calls.",source:"@site/docs/graphics/graphics-performance-profiling/batch-renderer-group/batch-renderer-group-how.md",sourceDirName:"graphics/graphics-performance-profiling/batch-renderer-group",slug:"/batch-renderer-group/batch-renderer-group-how",permalink:"/docs/batch-renderer-group/batch-renderer-group-how",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/graphics-performance-profiling/batch-renderer-group/batch-renderer-group-how.md",tags:[],version:"current",frontMatter:{id:"batch-renderer-group-how",title:"How BatchRendererGroup works",slug:"/batch-renderer-group/batch-renderer-group-how"},sidebar:"tutorialSidebar",previous:{title:"Getting started with BatchRendererGroup",permalink:"/docs/batch-renderer-group/batch-renderer-group-getting-started"},next:{title:"DOTS Instancing shaders",permalink:"/docs/batch-renderer-group/dots-instancing-shaders"}},d={},h=[{value:"Technical limitations",id:"technical-limitations",level:2}],l={toc:h};function u(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-batchrenderergroup-works"},"How BatchRendererGroup works"),(0,i.kt)("p",null,"To render to the screen, BatchRendererGroup (BRG) generates ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.BatchDrawCommand.html"},"draw commands")," which are a BRG-specific concept that contains everything Unity needs to efficiently create optimized, ",(0,i.kt)("a",{parentName:"p",href:"/docs/gpuinstancing"},"instanced")," draw calls."),(0,i.kt)("p",null,"To determine when to render the instances in a draw command, BRG uses ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.BatchFilterSettings.html"},"filter settings"),". Filter settings control when to render instances themselves, but also when to render certain facets of each instance such as its shadows and motion vectors"),(0,i.kt)("p",null,"Since the same filter settings often apply to a large number of draw commands, BRG uses ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.BatchDrawRange.html"},"draw ranges")," to apply filter settings to a range of draw commands. A draw range combines a contiguous number of draw commands with an instance of filter settings that apply to them. Draw ranges are especially useful if the filter settings determine that Unity shouldn\u2019t render the draw commands, because it allows Unity to efficiently skip rendering for every draw command in the range."),(0,i.kt)("p",null,"There is no restriction on which instances are in which draw calls. It\u2019s possible to render the same instance, an object with the same instance index and batchID, many times with different meshes and materials. One example where this can be useful is drawing different sub-meshes with different materials, but using the same instance indices to share properties like transform matrices between the draws."),(0,i.kt)("p",null,"For information on how to create a renderer with BRG, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/batch-renderer-group-creating-a-renderer"},"Creating a renderer with BatchRendererGroup"),"."),(0,i.kt)("h2",{id:"technical-limitations"},"Technical limitations"),(0,i.kt)("p",null,"In most cases, Unity renders a draw command as a single, platform-level, instanced draw call for each compatible ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.ScriptableRenderContext.DrawRenderers.html"},"DrawRenderers")," call in the Scriptable Render Pipeline. A limitation where Unity can\u2019t do this occurs when the graphics API has a lower size limit for draw calls than the draw command\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"visibleCount"),". In this case, Unity splits the draw command into multiple instanced draw calls."))}u.isMDXComponent=!0}}]);