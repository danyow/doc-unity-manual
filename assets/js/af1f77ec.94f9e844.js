"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35867],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),h=r,y=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return t?i.createElement(y,a(a({ref:n},c),{},{components:t})):i.createElement(y,a({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},52316:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var i=t(87462),r=t(63366),o=(t(67294),t(3905)),a=["components"],l={id:"script-Serialization-Custom",title:"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316",slug:"/script-serialization/script-serialization-custom"},s="\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316",d={unversionedId:"scripting-section/unity-architecture/script-serialization/script-Serialization-Custom",id:"scripting-section/unity-architecture/script-serialization/script-Serialization-Custom",title:"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316",description:"\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u72b6\u6001\u8f6c\u6362\u4e3a Unity \u53ef\u5b58\u50a8\u5e76\u5728\u4ee5\u540e\u53ef\u91cd\u6784\u7684\u683c\u5f0f\u7684\u81ea\u52a8\u8fc7\u7a0b\u3002\uff08\u8bf7\u53c2\u9605\u6709\u5173\u811a\u672c\u5e8f\u5217\u5316\u7684\u6587\u6863\u4ee5\u4e86\u89e3\u5173\u4e8e Unity \u5e8f\u5217\u5316\u7684\u66f4\u591a\u4fe1\u606f\u3002\uff09",source:"@site/docs/scripting-section/unity-architecture/script-serialization/script-serialization-custom.md",sourceDirName:"scripting-section/unity-architecture/script-serialization",slug:"/script-serialization/script-serialization-custom",permalink:"/docs/script-serialization/script-serialization-custom",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting-section/unity-architecture/script-serialization/script-serialization-custom.md",tags:[],version:"current",frontMatter:{id:"script-Serialization-Custom",title:"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316",slug:"/script-serialization/script-serialization-custom"},sidebar:"tutorialSidebar",previous:{title:"\u5185\u7f6e\u5e8f\u5217\u5316",permalink:"/docs/script-serialization/script-serialization-built-in-use"},next:{title:"\u811a\u672c\u5e8f\u5217\u5316\u9519\u8bef",permalink:"/docs/script-serialization/script-serialization-errors"}},c={},u=[],p={toc:u};function h(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316"},"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316"),(0,o.kt)("p",null,"\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u72b6\u6001\u8f6c\u6362\u4e3a Unity \u53ef\u5b58\u50a8\u5e76\u5728\u4ee5\u540e\u53ef\u91cd\u6784\u7684\u683c\u5f0f\u7684\u81ea\u52a8\u8fc7\u7a0b\u3002\uff08\u8bf7\u53c2\u9605\u6709\u5173",(0,o.kt)("a",{parentName:"p",href:"/docs/script-serialization"},"\u811a\u672c\u5e8f\u5217\u5316"),"\u7684\u6587\u6863\u4ee5\u4e86\u89e3\u5173\u4e8e Unity \u5e8f\u5217\u5316\u7684\u66f4\u591a\u4fe1\u606f\u3002\uff09"),(0,o.kt)("p",null,"\u6709\u65f6\u53ef\u80fd\u5e0c\u671b\u5e8f\u5217\u5316 Unity \u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0d\u652f\u6301\u7684\u5185\u5bb9\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u529e\u6cd5\u662f\u4f7f\u7528\u5e8f\u5217\u5316\u56de\u8c03\u3002\uff08\u8bf7\u53c2\u9605 Unity \u7684\u811a\u672c API \u53c2\u8003\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/ISerializationCallbackReceiver.html"},"ISerializationCallbackReceiver"),"\uff0c\u4e86\u89e3\u5173\u4e8e\u4f7f\u7528\u5e8f\u5217\u5316\u56de\u8c03\u8fdb\u884c\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7684\u66f4\u591a\u4fe1\u606f\u3002\uff09"),(0,o.kt)("p",null,"\u5e8f\u5217\u5316\u56de\u8c03\u53ef\u8ba9\u60a8\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4ece\u5b57\u6bb5\u4e2d\u8bfb\u53d6\u6570\u636e\u4e4b\u524d\u4ee5\u53ca\u5728\u5b8c\u6210\u5bf9\u5b57\u6bb5\u7684\u5199\u5165\u4e4b\u540e\u6536\u5230\u901a\u77e5\u3002\u4f7f\u7528\u5e8f\u5217\u5316\u56de\u8c03\u53ef\u5728\u8fd0\u884c\u65f6\u4e3a\u96be\u4ee5\u5e8f\u5217\u5316\u7684\u6570\u636e\u8d4b\u4e88\u4e0d\u540c\u4e8e\u5b9e\u9645\u5e8f\u5217\u5316\u65f6\u7684\u8868\u793a\u5f62\u5f0f\u3002"),(0,o.kt)("p",null,"\u4e3a\u5b9e\u73b0\u6b64\u76ee\u7684\uff0c\u8bf7\u5728 Unity \u8981\u5e8f\u5217\u5316\u6570\u636e\u4e4b\u524d\u5c06\u6570\u636e\u8f6c\u6362\u4e3a Unity \u7406\u89e3\u7684\u8868\u793a\u5f62\u5f0f\u3002\u7136\u540e\uff0c\u5728 Unity \u5c06\u6570\u636e\u5199\u5165\u5b57\u6bb5\u4e4b\u540e\uff0c\u53ef\u5c06\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\u8f6c\u6362\u56de\u5728\u8fd0\u884c\u65f6\u9700\u8981\u7684\u6570\u636e\u5f62\u5f0f\u3002"),(0,o.kt)("p",null,"\u4f8b\u5982\uff1a\u60a8\u9700\u8981\u4e00\u4e2a\u6811\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u8ba9 Unity \u76f4\u63a5\u5e8f\u5217\u5316\u8be5\u6570\u636e\u7ed3\u6784\uff0c\u201c\u4e0d\u652f\u6301 null\u201d\u9650\u5236\u5c06\u5bfc\u81f4\u6570\u636e\u6d41\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u4ece\u800c\u5728\u8bb8\u591a\u7cfb\u7edf\u4e2d\u5f15\u8d77\u6027\u80fd\u4e0b\u964d\u3002\u4e0b\u9762\u7684\u793a\u4f8b 1 \u4e2d\u663e\u793a\u4e86\u8fd9\u4e00\u60c5\u51b5\u3002"),(0,o.kt)("p",null," ",(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1")," \uff1aUnity \u7684\u76f4\u63a5\u5e8f\u5217\u5316\uff0c\u5bfc\u81f4\u6027\u80fd\u95ee\u9898"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System;\n\npublic class VerySlowBehaviourDoNotDoThis : MonoBehaviour {\n    [Serializable]\n    public class Node {\n        public string interestingValue = "value";\n        //The field below is what makes the serialization data become huge because\n        //it introduces a \'class cycle\'.\n        public List&lt;Node&gt; children = new List&lt;Node&gt;();\n    }\n    //this gets serialized\n    public Node root = new Node();\n    void OnGUI() {\n        Display (root);\n    }\n    void Display(Node node) {\n        GUILayout.Label ("Value: ");\n        node.interestingValue = GUILayout.TextField(node.interestingValue, GUILayout.Width(200));\n        GUILayout.BeginHorizontal ();\n        GUILayout.Space (20);\n        GUILayout.BeginVertical ();\n        foreach (var child in node.children) {\n            Display (child);\n        }\n        if (GUILayout.Button ("Add child")) {\n            node.children.Add (new Node ());\n        }\n        GUILayout.EndVertical ();\n        GUILayout.EndHorizontal ();\n    }\n}\n')),(0,o.kt)("p",null,"\u76f8\u53cd\uff0c\u60a8\u544a\u8bc9 Unity \u4e0d\u8981\u76f4\u63a5\u5e8f\u5217\u5316\u6811\uff0c\u5e76\u521b\u5efa\u5355\u72ec\u7684\u5b57\u6bb5\u6765\u4ee5\u5e8f\u5217\u5316\u7684\u683c\u5f0f\uff08\u9002\u7528\u4e8e Unity \u5e8f\u5217\u5316\u7a0b\u5e8f\uff09\u5b58\u50a8\u6811\u3002\u4e0b\u9762\u7684\u793a\u4f8b 2 \u4e2d\u663e\u793a\u4e86\u8fd9\u4e00\u60c5\u51b5\u3002"),(0,o.kt)("p",null," ",(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2")," \uff1a\u907f\u514d Unity \u76f4\u63a5\u5e8f\u5217\u5316\uff0c\u5e76\u907f\u514d\u6027\u80fd\u95ee\u9898"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\nusing System.Collections.Generic;\nusing System;\n\npublic class BehaviourWithTree : MonoBehaviour, ISerializationCallbackReceiver {\n    // Node class that is used at runtime.\n    // This is internal to the BehaviourWithTree class and is not serialized.\n    public class Node {\n        public string interestingValue = "value";\n        public List&lt;Node&gt; children = new List&lt;Node&gt;();\n    }\n    // Node class that we will use for serialization.\n    [Serializable]\n    public struct SerializableNode {\n        public string interestingValue;\n        public int childCount;\n        public int indexOfFirstChild;\n    }\n    // The root node used for runtime tree representation. Not serialized.\n    Node root = new Node();\n    // This is the field we give Unity to serialize.\n    public List&lt;SerializableNode&gt; serializedNodes;\n    public void OnBeforeSerialize() {\n        // Unity is about to read the serializedNodes field\'s contents.\n        // The correct data must now be written into that field "just in time".\n        if (serializedNodes == null) serializedNodes = new List&lt;SerializableNode&gt;();\n        if (root == null) root = new Node ();\n        serializedNodes.Clear();\n        AddNodeToSerializedNodes(root);\n        // Now Unity is free to serialize this field, and we should get back the expected \n        // data when it is deserialized later.\n    }\n    void AddNodeToSerializedNodes(Node n) {\n        var serializedNode = new SerializableNode () {\n            interestingValue = n.interestingValue,\n            childCount = n.children.Count,\n            indexOfFirstChild = serializedNodes.Count+1\n        }\n        ;\n        serializedNodes.Add (serializedNode);\n        foreach (var child in n.children) {\n            AddNodeToSerializedNodes (child);\n        }\n    }\n    public void OnAfterDeserialize() {\n        //Unity has just written new data into the serializedNodes field.\n        //let\'s populate our actual runtime data with those new values.\n        if (serializedNodes.Count &gt; 0) {\n            ReadNodeFromSerializedNodes (0, out root);\n        } else\n        root = new Node ();\n    }\n    int ReadNodeFromSerializedNodes(int index, out Node node) {\n        var serializedNode = serializedNodes [index];\n        // Transfer the deserialized data into the internal Node class\n        Node newNode = new Node() {\n            interestingValue = serializedNode.interestingValue,\n            children = new List&lt;Node&gt; ()\n        }\n        ;\n        // The tree needs to be read in depth-first, since that\'s how we wrote it out.\n        for (int i = 0; i != serializedNode.childCount; i++) {\n            Node childNode;\n            index = ReadNodeFromSerializedNodes (++index, out childNode);\n            newNode.children.Add (childNode);\n        }\n        node = newNode;\n        return index;\n    }\n    // This OnGUI draws out the node tree in the Game View, with buttons to add new nodes as children.\n    void OnGUI() {\n        if (root != null) {\n            Display (root);\n        }\n    }\n    void Display(Node node) {\n        GUILayout.Label ("Value: ");\n        // Allow modification of the node\'s "interesting value".\n        node.interestingValue = GUILayout.TextField(node.interestingValue, GUILayout.Width(200));\n        GUILayout.BeginHorizontal ();\n        GUILayout.Space (20);\n        GUILayout.BeginVertical ();\n        foreach (var child in node.children) {\n            Display (child);\n        }\n        if (GUILayout.Button ("Add child")) {\n            node.children.Add (new Node ());\n        }\n        GUILayout.EndVertical ();\n        GUILayout.EndHorizontal ();\n    }\n}\n\n')),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("p",null,"\u2022 2017\u201305\u201315 \u9875\u9762\u5df2\u53d1\u5e03",(0,o.kt)("br",null)))}h.isMDXComponent=!0}}]);