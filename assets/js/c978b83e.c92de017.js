"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[41863],{3905:function(e,a,r){r.d(a,{Zo:function(){return h},kt:function(){return p}});var t=r(67294);function s(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach((function(a){s(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,t,s=function(e,a){if(null==e)return{};var r,t,s={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(s[r]=e[r]);return s}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var d=t.createContext({}),l=function(e){var a=t.useContext(d),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},h=function(e){var a=l(e.components);return t.createElement(d.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var r=e.components,s=e.mdxType,n=e.originalType,d=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=l(r),p=s,y=u["".concat(d,".").concat(p)]||u[p]||c[p]||n;return r?t.createElement(y,i(i({ref:a},h),{},{components:r})):t.createElement(y,i({ref:a},h))}));function p(e,a){var r=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var n=r.length,i=new Array(n);i[0]=u;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<n;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},49183:function(e,a,r){r.r(a),r.d(a,{assets:function(){return h},contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var t=r(87462),s=r(63366),n=(r(67294),r(3905)),i=["components"],o={id:"shader-keywords",title:"Shader keywords",slug:"/shader-variants-and-keywords/shader-keywords"},d="Shader keywords",l={unversionedId:"graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-keywords",id:"graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-keywords",title:"Shader keywords",description:"Shader keywords allow you to use conditional behavior in your shader code. You can create shaders that share some common code, but have different functionality when a given  keyword  is enabled or disabled.",source:"@site/docs/graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-keywords.md",sourceDirName:"graphics/shaders/shaders-overview/shader-variants-and-keywords",slug:"/shader-variants-and-keywords/shader-keywords",permalink:"/docs/shader-variants-and-keywords/shader-keywords",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-keywords.md",tags:[],version:"current",frontMatter:{id:"shader-keywords",title:"Shader keywords",slug:"/shader-variants-and-keywords/shader-keywords"},sidebar:"tutorialSidebar",previous:{title:"Using shader keywords with C# scripts",permalink:"/docs/shader-variants-and-keywords/shader-keywords-scripts"},next:{title:"\u7740\u8272\u5668\u53d8\u4f53\u96c6\u5408",permalink:"/docs/shader-variants-and-keywords/shader-variant-collections"}},h={},c=[{value:"Using shader keywords",id:"using-shader-keywords",level:2},{value:"Declaring shader keywords",id:"declaring-shader-keywords",level:3},{value:"Definition type: \u201cmulti compile\u201d, \u201cshader feature\u201d, or \u201cdynamic branch\u201d",id:"definition-type-multi-compile-shader-feature-or-dynamic-branch",level:4},{value:"Local or global scope",id:"local-or-global-scope",level:4},{value:"Stage-specific keywords",id:"stage-specific-keywords",level:4},{value:"Making behavior conditional with shader keywords",id:"making-behavior-conditional-with-shader-keywords",level:3},{value:"\u542f\u7528\u548c\u7981\u7528\u7740\u8272\u5668\u5173\u952e\u5b57",id:"\u542f\u7528\u548c\u7981\u7528\u7740\u8272\u5668\u5173\u952e\u5b57",level:3},{value:"Unity\u2019s predefined shader keywords",id:"unitys-predefined-shader-keywords",level:2},{value:"Shader keyword limits",id:"shader-keyword-limits",level:2}],u={toc:c};function p(e){var a=e.components,r=(0,s.Z)(e,i);return(0,n.kt)("wrapper",(0,t.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"shader-keywords"},"Shader keywords"),(0,n.kt)("p",null,"Shader keywords allow you to use ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-conditionals"},"conditional behavior")," in your shader code. You can create shaders that share some common code, but have different functionality when a given  ",(0,n.kt)("strong",{parentName:"p"},"keyword"),"  is enabled or disabled."),(0,n.kt)("p",null,"You can use shader keywords with ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-branching#dynamic-branching"},"dynamic branching"),", or with ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-variants"},"Shader variants"),". Before you use shader keywords, it is important to understand how these techniques work, and which one is right for your project."),(0,n.kt)("p",null,"\u672c\u9875\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#using-shader-keywords"},"Using shader keywords"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#declaring-shader-keywords"},"Declaring shader keywords")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#making-behavior-conditional-with-shader-keywords"},"Making behavior conditional with shader keywords")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#%E5%90%AF%E7%94%A8%E5%92%8C%E7%A6%81%E7%94%A8%E7%9D%80%E8%89%B2%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97"},"Enabling and disabling shader keywords")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#unity%E2%80%99s-predefined-shader-keywords"},"Unity\u2019s predefined shader keywords")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#shader-keyword-limits"},"Shader keyword limits"))),(0,n.kt)("h2",{id:"using-shader-keywords"},"Using shader keywords"),(0,n.kt)("h3",{id:"declaring-shader-keywords"},"Declaring shader keywords"),(0,n.kt)("p",null,"You declare shader keywords in sets. A set contains mutually exclusive keywords."),(0,n.kt)("p",null,"For example, the following set contains three keywords:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"COLOR","_","RED")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"COLOR","_","GREEN")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"COLOR","_","BLUE"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Note:"),"  In Shader Graph, the terminology is different: a set of keywords is called a  ",(0,n.kt)("strong",{parentName:"p"},"Keyword")," , and the keywords in a set are called  ",(0,n.kt)("strong",{parentName:"p"},"states")," . Internally, the functionality is the same: Unity compiles them in the same way, you work with them the same way with C# scripts, and so on."))),(0,n.kt)("p",null,"The way that you declare shader keywords affects a number of things:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#definition-type-%E2%80%9Cmulti-compile%E2%80%9D-%E2%80%9Cshader-feature%E2%80%9D-or-%E2%80%9Cdynamic-branch%E2%80%9D"},"type")," affects whether and how Unity uses the keywords to generate shader variants, or whether it uses them for dynamic branching."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#local-or-global-scope"},"scope")," affects whether the keywords are local or global. This determines their behavior at runtime."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#stage-specific-keywords"},"stage")," affects which shader stage the keywords affect (where applicable).")),(0,n.kt)("h4",{id:"definition-type-multi-compile-shader-feature-or-dynamic-branch"},"Definition type: \u201cmulti compile\u201d, \u201cshader feature\u201d, or \u201cdynamic branch\u201d"),(0,n.kt)("p",null,"When you declare a set of keywords, you choose whether to use them with ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-variants"},"shader variants")," or with ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-branching"},"dynamic branching"),". If you choose shader variants, you must also choose how Unity defines the keywords internally; this affects the number of variants that Unity compiles."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u201cdynamic branch\u201d: Use this to create a set of keywords for use with dynamic branching. Internally, Unity uses these keywords to create uniform variables."),(0,n.kt)("li",{parentName:"ul"},"\u201cmulti compile\u201d or \u201cshader feature\u201d: Use this to create a set of keywords for use with shader variants. Internally, Unity uses these keyword to create ",(0,n.kt)("inlineCode",{parentName:"li"},"#define")," preprocessor directives.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"\u201cmulti compile\u201d declares a set of keywords for use with shader variants.",(0,n.kt)("br",null),(0,n.kt)("br",null),"Unity compiles shader variants for all keywords in the set."),(0,n.kt)("li",{parentName:"ul"},"\u201cshader feature\u201d declares a set of keywords for use with shader variants, and also instructs the compiler to compile variants where none of these keywords are enabled.",(0,n.kt)("br",null),(0,n.kt)("br",null),"Unity examines the state of your project at build time, and only compiles variants for keywords that are in use. A keyword is in use if a material that is included in the build has that keyword enabled.")))),(0,n.kt)("p",null,"Whether to choose \u201cmulti compile\u201d or \u201cshader feature\u201d depends on how you use the keywords. If you use the keywords to configure materials in your project and do not change their value from C# scripts at runtime, then you should use \u201cshader feature\u201d to reduce the number of shader keywords and variants in your project. If you enable and disable keywords at runtime using C# scripts, then you should use \u201cmulti compile\u201d to prevent variants being stripped in error. For more information on shader stripping, see ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-variant-stripping"},"Shader variant stripping"),"."),(0,n.kt)("p",null," ",(0,n.kt)("strong",{parentName:"p"},"Note:"),"  If you add a shader to the list of ",(0,n.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-graphics-settings#always-included-shaders"}," ",(0,n.kt)("strong",{parentName:"a"},"Always Included Shaders")," ")," in the Graphics settings window, Unity includes all keywords from all sets in the build, even if they were declared with \u201cshader feature\u201d."),(0,n.kt)("p",null,"To set this value, see the following documentation:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In hand-coded shaders, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-preprocessor-directives/sl-multiple-program-variants"},"Declaring and using shader keywords in HLSL")),(0,n.kt)("li",{parentName:"ul"},"In Shader Graph, see ",(0,n.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.shadergraph@latest?subfolder=/manual/Keywords.html"},"Keywords"),".  ",(0,n.kt)("strong",{parentName:"li"},"Note:"),"  The \u201cdynamic branch\u201d option is not available in Shader Graph. You can only use shader keywords with shader variants in Shader Graph.")),(0,n.kt)("h4",{id:"local-or-global-scope"},"Local or global scope"),(0,n.kt)("p",null,"When you declare a set of keywords, you choose whether the keywords in the set have local or global  ",(0,n.kt)("strong",{parentName:"p"},"scope")," . This determines whether you can override the state of this keyword at runtime using a global shader keyword."),(0,n.kt)("p",null,"By default, you declare keywords with global scope. This means that you can override the state of this keyword at runtime using a global shader keyword. If you declare keywords with local scope, this means that you cannot override the state of this keyword at runtime using a global shader keyword. For more information and a code example, see ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-keywords-scripts"},"Using shader keywords with C# scripts"),"."),(0,n.kt)("p",null," ",(0,n.kt)("strong",{parentName:"p"},"Note:"),"  If a keyword with the same name exists in a shader source file and its dependencies, the scope of the keyword in the source file overrides the scope in the dependencies. Dependencies comprise all Shaders that are included via the ",(0,n.kt)("a",{parentName:"p",href:"/docs/sl-shader/sl-fallback"},"Fallback command"),", and Passes that are included via the ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-shaderlab-commands/sl-use-pass"},"UsePass command"),"."),(0,n.kt)("p",null,"To set this value, see the following documentation:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In hand-coded shaders, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-preprocessor-directives/sl-multiple-program-variants"},"Declaring and using shader keywords in HLSL")),(0,n.kt)("li",{parentName:"ul"},"In Shader Graph, see ",(0,n.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.shadergraph@latest?subfolder=/manual/Keywords.html"},"Keywords"))),(0,n.kt)("h4",{id:"stage-specific-keywords"},"Stage-specific keywords"),(0,n.kt)("p",null,"By default, Unity generates keyword variants for each stage of your shader. For example, if your shader contains a vertex stage and a fragment stage, Unity generates variants for every keyword combination for both the vertex and the fragment shader programs. If a set of keywords is only used in one of those stages, this results in identical variants for the other stage. Unity automatically identifies and ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-variants#deduplication-of-shader-variants"},"deduplicates")," identical variants so that they do not increase build size, but they still result in wasted compilation time, increased shader loading times, and increased runtime memory usage."),(0,n.kt)("p",null,"To avoid this problem, when you declare a set of keywords in a hand-coded shader, you can instruct Unity to compile them only for a given shader stage. You are then responsible for ensuring that the keywords are only used in the specified shader stages."),(0,n.kt)("p",null," ",(0,n.kt)("strong",{parentName:"p"},"Note:"),"  The following graphics APIs do not fully support stage-specific keywords. In OpenGL and Vulkan, at compile time, Unity automatically converts all stage-specific keyword directives to regular keyword directives. In Metal, any keyword targeting vertex stages also affects tessellation stages, and vice versa."),(0,n.kt)("p",null,"To set this value:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In hand-coded shaders, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-preprocessor-directives/sl-multiple-program-variants"},"Declaring and using shader keywords in HLSL")),(0,n.kt)("li",{parentName:"ul"},"In Shader Graph, you cannot set this value. By default, all keywords affect all stages.")),(0,n.kt)("h3",{id:"making-behavior-conditional-with-shader-keywords"},"Making behavior conditional with shader keywords"),(0,n.kt)("p",null,"You can use shader keywords to make parts of your shader conditional, so that certain behaviors only execute when a given keyword is in a given state."),(0,n.kt)("p",null,"\u4e3a\u6b64\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In hand-coded shaders, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-preprocessor-directives/sl-multiple-program-variants"},"Defining and using shader keywords"),"."),(0,n.kt)("li",{parentName:"ul"},"In Shader Graph, see ",(0,n.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.shadergraph@latest?subfolder=/manual/Keyword-Node.html"},"Shader Graph: Keyword Node"),".")),(0,n.kt)("h3",{id:"\u542f\u7528\u548c\u7981\u7528\u7740\u8272\u5668\u5173\u952e\u5b57"},"\u542f\u7528\u548c\u7981\u7528\u7740\u8272\u5668\u5173\u952e\u5b57"),(0,n.kt)("p",null,"You can enable or disable shader keywords. When you enable or disable a shader keyword, the shader displays the appropriate conditional behavior. Depending on whether the keyword work with shader variants or dynamic branching, this means that either Unity renders the appropriate shader variant, or the GPU executes the appropriate branch."),(0,n.kt)("p",null,"There are two ways to enable and disable shader keywords:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use scripts, either at runtime or in the Unity Editor. For more information, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-keywords-scripts"},"Using shader keywords with C# scripts"),"."),(0,n.kt)("li",{parentName:"ul"},"Use the Material Inspector in the Unity Editor. For more information, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-keywords-material-inspector"},"Using shader keywords with the Material Inspector"),".")),(0,n.kt)("h2",{id:"unitys-predefined-shader-keywords"},"Unity\u2019s predefined shader keywords"),(0,n.kt)("p",null,"Unity uses predefined sets of shader keywords to generate shader variants that enable common functionality."),(0,n.kt)("p",null,"Unity adds the following sets of shader variant keywords at compile time:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"By default, Unity adds this set of keywords to all graphics shader programs: STEREO","_","INSTANCING","_","ON, STEREO","_","MULTIVIEW","_","ON, STEREO","_","CUBEMAP","_","RENDER","_","ON, UNITY","_","SINGLE","_","PASS","_","STEREO. You can strip these keywords using an Editor script. For more information, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-variant-stripping"},"Shader variant stripping"),"."),(0,n.kt)("li",{parentName:"ul"},"By default, Unity adds this set of keywords to the Standard Shader: LIGHTMAP","_","ON, DIRLIGHTMAP","_","COMBINED, DYNAMICLIGHTMAP","_","ON, LIGHTMAP","_","SHADOW","_","MIXING, SHADOWS","_","SHADOWMASK. You can strip these keywords using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/comp-manager-group/class-graphics-settings"},"Graphics settings")," window."),(0,n.kt)("li",{parentName:"ul"},"In the Built-in Render Pipeline, if your project uses ",(0,n.kt)("a",{parentName:"li",href:"/docs/built-in-render-pipeline/graphics-tiers#tier-settings"},"tier settings")," that differ from each other, Unity adds this set of keywords to all graphics shaders: UNITY","_","HARDWARE","_","TIER1, UNITY","_","HARDWARE","_","TIER2, UNITY","_","HARDWARE","_","TIER3. For more information, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/built-in-render-pipeline/graphics-tiers#%E5%9B%BE%E5%BD%A2%E5%B1%82%E5%92%8C%E7%9D%80%E8%89%B2%E5%99%A8%E5%8F%98%E4%BD%93"},"Graphics tiers: Graphics tiers and shader variants"),".")),(0,n.kt)("h2",{id:"shader-keyword-limits"},"Shader keyword limits"),(0,n.kt)("p",null,"Unity can use up to 4,294,967,294 global shader keywords. Individual shaders and compute shaders can use up to 65,534 local shader keywords. These totals include keywords used for variants, and keywords used for dynamic branching."),(0,n.kt)("p",null,"Every keyword declared in the shader source file and its dependencies count towards this limit. Dependencies include ",(0,n.kt)("a",{parentName:"p",href:"/docs/sl-pass"},"Passes")," that the shader includes with ",(0,n.kt)("a",{parentName:"p",href:"/docs/shader-shaderlab-commands/sl-use-pass"},"UsePass"),", and ",(0,n.kt)("a",{parentName:"p",href:"/docs/sl-shader/sl-fallback"},"fallbacks"),"."),(0,n.kt)("p",null,"If Unity encounters a shader keyword with the same name multiple times, it only counts towards the limit once."),(0,n.kt)("p",null,"If a shader uses more than 128 keywords in total, it incurs a small runtime performance penalty; therefore, it is best to keep the number of keywords low. Unity always reserves 4 keywords per shader."))}p.isMDXComponent=!0}}]);