"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94064],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return h}});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=i.createContext({}),c=function(e){var t=i.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return i.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(r),h=n,m=u["".concat(d,".").concat(h)]||u[h]||p[h]||a;return r?i.createElement(m,s(s({ref:t},l),{},{components:r})):i.createElement(m,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<a;c++)s[c]=r[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},98430:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var i=r(87462),n=r(63366),a=(r(67294),r(3905)),s=["components"],o={id:"shader-include-directives",title:"include and include_with_pragmas directives in HLSL",slug:"/shader-preprocessor-directives/shader-include-directives"},d="include and include_with_pragmas directives in HLSL",c={unversionedId:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/shader-include-directives",id:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/shader-include-directives",title:"include and include_with_pragmas directives in HLSL",description:"In HLSL, #include directives are a type of preprocessor directive. They instruct the compiler to include the contents of one HLSL file inside another. The file that they include is called an  include file .",source:"@site/docs/graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/shader-include-directives.md",sourceDirName:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives",slug:"/shader-preprocessor-directives/shader-include-directives",permalink:"/doc-unity-manual/docs/shader-preprocessor-directives/shader-include-directives",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/shader-include-directives.md",tags:[],version:"current",frontMatter:{id:"shader-include-directives",title:"include and include_with_pragmas directives in HLSL",slug:"/shader-preprocessor-directives/shader-include-directives"},sidebar:"tutorialSidebar",previous:{title:"Preprocessor directives in HLSL",permalink:"/doc-unity-manual/docs/shader-preprocessor-directives"},next:{title:"Declaring and using shader keywords in HLSL",permalink:"/doc-unity-manual/docs/shader-preprocessor-directives/sl-multiple-program-variants"}},l={},p=[{value:"Using the include_with_pragmas directive",id:"using-the-include_with_pragmas-directive",level:2}],u={toc:p};function h(e){var t=e.components,r=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"include-and-include_with_pragmas-directives-in-hlsl"},"include and include","_","with","_","pragmas directives in HLSL"),(0,a.kt)("p",null,"In HLSL, ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," directives are a type of ",(0,a.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/shader-preprocessor-directives"},"preprocessor directive"),". They instruct the compiler to include the contents of one HLSL file inside another. The file that they include is called an  ",(0,a.kt)("strong",{parentName:"p"},"include file")," ."),(0,a.kt)("p",null,"In Unity, regular ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," directives work the same as in standard HLSL. For more information on regular ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," directives, see the HLSL documentation: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-pre-include"},"include Directive"),"."),(0,a.kt)("p",null,"Unity also provides an additional, Unity-specific ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directive. The ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directive works the same as a regular ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," directive, but it also allows you to use ",(0,a.kt)("inlineCode",{parentName:"p"},"#pragma")," directives in the include file. This means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directive allows you to share ",(0,a.kt)("inlineCode",{parentName:"p"},"#pragma")," directives between multiple files."),(0,a.kt)("h2",{id:"using-the-include_with_pragmas-directive"},"Using the include","_","with","_","pragmas directive"),(0,a.kt)("p",null," ",(0,a.kt)("strong",{parentName:"p"},"Note:"),"  To use ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directives, you must enable the ",(0,a.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/shader-compilation"},"Caching Shader Preprocessor"),"."),(0,a.kt)("p",null,"This example demonstrates how to use the Unity-specific ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directive to enable a common workflow improvement: the ability to toggle shader debugging on and off for multiple shaders, without needing to edit every shader source file every time."),(0,a.kt)("p",null,"The following line demonstrates the contents of the include file. It contains a single pragma directive that enables shader debugging:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Comment out the following line to disable shader debugging\n#pragma enable_d3d11_debug_symbols\n")),(0,a.kt)("p",null,"In each shader that you want to debug, add an ",(0,a.kt)("inlineCode",{parentName:"p"},"#include_with_pragmas")," directive that points to the include file. Put the directive near the other ",(0,a.kt)("inlineCode",{parentName:"p"},"#pragma")," directives, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Example pragma directives\n#pragma target 4.0\n#pragma vertex vert\n#pragma fragment frag\n\n// Replace path-to-include-file with the path to the include file \n#include_with_pragmas "path-to-include-file"\n\n// The rest of the HLSL code goes here\n')),(0,a.kt)("p",null,"Now, when you want to toggle shader debugging on and off for all shaders that use the include file, you only need to change a single line in the include file. When Unity recompiles the shaders, it includes the amended line."))}h.isMDXComponent=!0}}]);