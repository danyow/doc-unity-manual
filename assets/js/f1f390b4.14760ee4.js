"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[97738],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6815:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={id:"UIE-HowTo-CreateCustomInspector",title:"Create a Custom Inspector",slug:"/uie-getting-started/uie-how-to-create-custom-inspector"},s="Create a Custom Inspector",p={unversionedId:"uitoolkits/uielements/uie-getting-started/UIE-HowTo-CreateCustomInspector",id:"uitoolkits/uielements/uie-getting-started/UIE-HowTo-CreateCustomInspector",title:"Create a Custom Inspector",description:"While Unity generates a default inspector for your MonoBehaviours and ScriptableObjects, there are good reasons to write a custom inspector, such as:",source:"@site/docs/uitoolkits/uielements/uie-getting-started/uie-how-to-create-custom-inspector.md",sourceDirName:"uitoolkits/uielements/uie-getting-started",slug:"/uie-getting-started/uie-how-to-create-custom-inspector",permalink:"/docs/uie-getting-started/uie-how-to-create-custom-inspector",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uitoolkits/uielements/uie-getting-started/uie-how-to-create-custom-inspector.md",tags:[],version:"current",frontMatter:{id:"UIE-HowTo-CreateCustomInspector",title:"Create a Custom Inspector",slug:"/uie-getting-started/uie-how-to-create-custom-inspector"},sidebar:"tutorialSidebar",previous:{title:"Get started with UI Toolkit",permalink:"/docs/uie-getting-started"},next:{title:"Creating your first runtime UI",permalink:"/docs/uie-getting-started/uie-how-to-create-runtime-ui"}},u={},c=[{value:"\u5148\u51b3\u6761\u4ef6",id:"\u5148\u51b3\u6761\u4ef6",level:2},{value:"Content",id:"content",level:2},{value:"Create a new MonoBehaviour",id:"create-a-new-monobehaviour",level:2},{value:"Create a custom inspector script",id:"create-a-custom-inspector-script",level:2},{value:"Use UXML inside a custom inspector",id:"use-uxml-inside-a-custom-inspector",level:2},{value:"Undo and data binding",id:"undo-and-data-binding",level:2},{value:"Property fields",id:"property-fields",level:2},{value:"Create a custom property drawer",id:"create-a-custom-property-drawer",level:2},{value:"Create a default inspector",id:"create-a-default-inspector",level:2},{value:"Final scripts",id:"final-scripts",level:2},{value:"Car.cs",id:"carcs",level:3},{value:"Car_Inspector.cs",id:"car_inspectorcs",level:3},{value:"Car_Inspector_UXML.uxml",id:"car_inspector_uxmluxml",level:3},{value:"Tire.cs",id:"tirecs",level:3},{value:"Tire_Property.cs",id:"tire_propertycs",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-a-custom-inspector"},"Create a Custom Inspector"),(0,i.kt)("p",null,"While Unity generates a default inspector for your MonoBehaviours and ScriptableObjects, there are good reasons to write a custom inspector, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a more user-friendly representation of script properties."),(0,i.kt)("li",{parentName:"ul"},"Organize and group properties together."),(0,i.kt)("li",{parentName:"ul"},"Display or hide sections of the UI depending on the user\u2019s choices."),(0,i.kt)("li",{parentName:"ul"},"Provide additional information about the meaning of individual settings and properties.")),(0,i.kt)("p",null,"Creating custom inspectors using UI Toolkit is similar to using Immediate Mode GUI (IMGUI), but UI Toolkit has several advantages, such as automatic data binding and automatic undo support. Where IMGUI creates the UI for the inspector entirely through script, UI Toolkit allows you to build the UI via script, visually in UI Builder, or a combination of both."),(0,i.kt)("p",null,"\u60a8\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8",(0,i.kt)("a",{parentName:"p",href:"#%E6%AD%A4%E5%A4%84"},"\u6b64\u5904"),"\u627e\u5230\u672c\u6307\u5357\u7684\u6700\u7ec8\u6e90\u4ee3\u7801\u3002"),(0,i.kt)("p",null,"In this guide, you\u2019ll create a custom inspector for a MonoBehaviour class, using both scripts and UXML (using UI Builder) to create the UI. The custom inspector will also feature a custom property drawers."),(0,i.kt)("h2",{id:"\u5148\u51b3\u6761\u4ef6"},"\u5148\u51b3\u6761\u4ef6"),(0,i.kt)("p",null,"This guide is for developers familiar with Unity, but new to UI Toolkit. It\u2019s recommended to have a basic understanding of Unity and C# scripting."),(0,i.kt)("p",null,"This guide also references the following concepts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/uielements/uie-visual-tree"},"Visual Tree")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/uielements/uie-binding"},"Data binding"))),(0,i.kt)("h2",{id:"content"},"Content"),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Topics covered:")," "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"UI Builder"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.Foldout.html"},"Foldout")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.PropertyField.html"},"PropertyField")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/PropertyDrawer.html"},"PropertyDrawer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.InspectorElement.html"},"InspectorElement"))),(0,i.kt)("p",null,"In this guide, you\u2019ll do the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creating a new MonoBehaviour"),(0,i.kt)("li",{parentName:"ul"},"Creating a custom inspector script"),(0,i.kt)("li",{parentName:"ul"},"Using UXML inside a custom inspector"),(0,i.kt)("li",{parentName:"ul"},"Undo and data binding"),(0,i.kt)("li",{parentName:"ul"},"Creating a default inspector"),(0,i.kt)("li",{parentName:"ul"},"Property fields"),(0,i.kt)("li",{parentName:"ul"},"Creating a custom property drawer")),(0,i.kt)("h2",{id:"create-a-new-monobehaviour"},"Create a new MonoBehaviour"),(0,i.kt)("p",null,"To begin, you need to create a custom class that you can create a custom inspector for, which is either a ",(0,i.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptableObject"),". This guide works with a ",(0,i.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," script that represents a simple car with properties, such as model and color."),(0,i.kt)("p",null,"Create a new script file ",(0,i.kt)("inlineCode",{parentName:"p"},"Car.cs")," inside  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts"),"  and copy the following code into it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEngine;\n\npublic class Car : MonoBehaviour\n{\n  public string m_Make = "Toyota";\n  public int m_YearBuilt = 1980;\n  public Color m_Color = Color.black;\n}\n')),(0,i.kt)("p",null,"Create a new GameObject in the scene and attach the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," script component to it."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-defaultinspector.png",alt:"Default inspector for the Car object"})),(0,i.kt)("p",null,"Default inspector for the Car object"),(0,i.kt)("h2",{id:"create-a-custom-inspector-script"},"Create a custom inspector script"),(0,i.kt)("p",null,"To create a custom inspector for any serialized object, you need to create a class deriving from the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Editor.html"},"Editor")," base class, and add the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/CustomEditor.html"},"CustomEditor")," attribute to it. This attribute lets Unity know which class this custom inspector represents. The workflow for this in UI Toolkit is identical to that in ",(0,i.kt)("a",{parentName:"p",href:"/docs/extending-the-editor/editor-custom-editors"},"Immediate Mode GUI (IMGUI)"),"."),(0,i.kt)("p",null,"Create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector.cs")," inside  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/Editor"),"  and copy the following code into it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEngine.UIElements;\n\n[CustomEditor(typeof(Car))]\npublic class Car_Inspector : Editor\n{\n}\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"The custom inspector file must be inside the ",(0,i.kt)("inlineCode",{parentName:"td"},"Editor")," folder, or inside an Editor-only assembly definition. Attempting to create standalone builds will fail, as the UnityEditor namespace isn\u2019t available.")))),(0,i.kt)("p",null,"If you select your GameObject with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," component at this point, Unity will still display the default inspector. You need to override ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/ditor.html"},"CreateInspectorGUI()")," inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector")," class to replace the default inspector."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," function builds the visual tree for the inspector. The function needs to return a VisualElement containing the UI. The implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," below creates a blank new VisualElement and adds a label to it."),(0,i.kt)("p",null,"Override the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," function inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector")," script and copy the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public override VisualElement CreateInspectorGUI()\n{\n  // Create a new VisualElement to be the root of our inspector UI\n  VisualElement myInspector = new VisualElement();\n\n  // Add a simple label\n  myInspector.Add(new Label("This is a custom inspector"));\n\n  // Return the finished inspector UI\n  return myInspector;\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-label.png",alt:"Custom inspector with a label"})),(0,i.kt)("p",null,"Custom inspector with a label"),(0,i.kt)("h2",{id:"use-uxml-inside-a-custom-inspector"},"Use UXML inside a custom inspector"),(0,i.kt)("p",null,"UI Toolkit allows you to add UI controls in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Implementing a script"),(0,i.kt)("li",{parentName:"ul"},"Loading a UXML file containing a pre-made UI tree.")),(0,i.kt)("p",null,"This section will be using the UI Builder to create a UXML file containing the UI, and use code to load and instantiate the UI from the UXML file."),(0,i.kt)("p",null,"Open the UI Builder via the menu  ",(0,i.kt)("strong",{parentName:"p"},"Window ",">"," UI Toolkit ",">"," UI Builder"),"  and create a new Visual Tree Asset using the  ",(0,i.kt)("strong",{parentName:"p"},"File ",">"," New"),"  menu entry inside the UI Builder."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-new.png",alt:"Custom inspector with a label"})),(0,i.kt)("p",null,"Custom inspector with a label"),(0,i.kt)("p",null,"UI Toolkit offers additional controls types when you\u2019re using it to create Editor windows and custom inspectors. By default, these Editor-only controls aren\u2019t visible in UI Builder. To make them available, you need to enable the checkbox  ",(0,i.kt)("strong",{parentName:"p"},"Editor Extension Authoring")," ."),(0,i.kt)("p",null,"Select the ",(0,i.kt)("inlineCode",{parentName:"p"},"&lt;unsaved file&gt;*.uxml")," in the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy"),"  view in the UI Builder and enable the  ",(0,i.kt)("strong",{parentName:"p"},"Editor Extension Authoring"),"  checkbox."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-extensionauthoring.png",alt:"Custom inspector with a label"})),(0,i.kt)("p",null,"Custom inspector with a label"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"If you use UI Toolkit to create Editor windows and custom inspectors, you can enable this setting by default in  ",(0,i.kt)("strong",{parentName:"td"},"Project Settings ",">"," UI Builder")," .")))),(0,i.kt)("p",null,"To add a control to the UI, select it from the  ",(0,i.kt)("strong",{parentName:"p"},"Library"),"  and drag it into the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy"),"  above. You don\u2019t need to adjust the position or size of the new control unless you want to modify the automatic layout. By default, the label uses the entire width of the available panel and the height adjusts to the chosen font size."),(0,i.kt)("p",null,"Add a label control to the visual tree by dragging it from the  ",(0,i.kt)("strong",{parentName:"p"},"Library"),"  to the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy")," ."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-label.png",alt:"Custom inspector with a label"})),(0,i.kt)("p",null,"Custom inspector with a label"),(0,i.kt)("p",null,"You can change the text inside the label by selecting it and changing the text in the element\u2019s inspector on the right side of the UI Builder editor."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-text.png",alt:"Custom inspector with a label"})),(0,i.kt)("p",null,"Custom inspector with a label"),(0,i.kt)("p",null,"When the UI Builder saves a visual tree, it saves it as a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.VisualTreeAsset.html"},"Visual Tree Asset")," in the UXML format. You can learn more about this on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/uie-uxml"},"UXML documentation page"),"."),(0,i.kt)("p",null,"The UXML below displays the code generated by UI Builder from the previous steps:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True"&gt;\n    &lt;ui:Label text="Label created in UI Builder" /&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("p",null,"Save the visual tree you created under  ",(0,i.kt)("strong",{parentName:"p"},"Asset ",">"," Script ",">"," Editor"),"  as ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector_UXML.uxml"),", using the  ",(0,i.kt)("strong",{parentName:"p"},"File"),"  menu in UI Builder."),(0,i.kt)("p",null,"To use the UXML file you created inside your custom inspector, you need to load and clone it inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," function and add it to the visual tree. To do this, you use the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.VisualTreeAsset.CloneTree.html"},"CloneTree")," method. You can pass any ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualElement")," as a parameter to act as a parent for the created elements."),(0,i.kt)("p",null,"Modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," function to clone the visual tree inside the UXML file and use it in your custom inspector."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public override VisualElement CreateInspectorGUI()\n{\n  // Create a new VisualElement to be the root of our inspector UI\n  VisualElement myInspector = new VisualElement();\n\n  // Add a simple label\n  myInspector.Add(new Label("This is a custom inspector"));\n\n  // Load and clone a visual tree from UXML\n  VisualTreeAsset visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;("Assets/Scripts/Editor/Car_Inspector_UXML.uxml");\n  visualTree.CloneTree(myInspector);\n\n  // Return the finished inspector UI\n  return myInspector;\n}\n')),(0,i.kt)("p",null,"The inspector for the ",(0,i.kt)("inlineCode",{parentName:"p"},"car")," component now displays two created labels: one through script, and one through UI Builder/UXML."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-labels.png",alt:"Custom inspector with two labels label"})),(0,i.kt)("p",null,"Custom inspector with two labels label"),(0,i.kt)("p",null,"The code must load the Visual Tree Asset (UXML) file to clone the visual tree, and uses a hard-coded path and filename. However, hard-coded files aren\u2019t recommended, because if the file properties change, such as file path or name, it might invalidate the code."),(0,i.kt)("p",null,"The better solution to access the Visual Tree Asset is to use a reference to the asset file. The GUID inside the meta file stores the file reference. If you rename or move the file, the GUID remains unchanged, and Unity will still be able to find and load the file from its new location."),(0,i.kt)("p",null,"For Prefabs and ScriptableObjects, you can assign references to other files in the Editor. For script files, Unity allows setting a ",(0,i.kt)("inlineCode",{parentName:"p"},"Default Reference"),". If you declare public fields of type ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," in a window class, the Inspector offers the ability to drag references onto the corresponding object fields. This means that any new instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector")," class populates with the references set to the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," object. This is the recommended way of assigning UXML files to custom inspectors and Editor window scripts."),(0,i.kt)("p",null,"Create a public variable for a ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," in your script, and assign the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector_UXML.uxml")," file as a default reference in the Editor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public VisualTreeAsset m_InspectorXML;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-defaultreference.png",alt:"Custom inspector with two labels label"})),(0,i.kt)("p",null,"Custom inspector with two labels label"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Default references only work in the Editor. They do not work with runtime components in standalone builds using the AddComponent() method.")))),(0,i.kt)("p",null,"With the default reference set, you no longer need to load the ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadAssetAtPath")," function. Instead, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.VisualTreeAsset.CloneTree.html"},"CloneTree")," directly on the reference to your UXML file."),(0,i.kt)("p",null,"This reduces the code inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," method to 3 lines."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public VisualTreeAsset m_InspectorXML;\n\npublic override VisualElement CreateInspectorGUI()\n{\n  // Create a new VisualElement to be the root of our inspector UI\n  VisualElement myInspector = new VisualElement();\n\n  // Load from default reference\n  m_InspectorXML.CloneTree(myInspector);\n\n  // Return the finished inspector UI\n  return myInspector;\n}\n")),(0,i.kt)("h2",{id:"undo-and-data-binding"},"Undo and data binding"),(0,i.kt)("p",null,"The purpose of this custom inspector is to display all properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," class. When the user modifies any of the UI controls, the values inside the instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," class should also change. To do so, you need to add UI controls to the visual tree and connect them to the individual properties of the class."),(0,i.kt)("p",null,"UI Toolkit supports linking of UI controls to serialized properties with  ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/uielements/uie-binding"},"data binding"))," . Controls that are bound to a serialized property automatically display the current value of a property, and they also automatically update the property value if the user changes it in the UI. You don\u2019t have to write code that retrieves a value from a control and writes it back to the property, like you would in IMGUI."),(0,i.kt)("p",null,"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"TextField")," control for the car\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"m_Make")," property to the inspector using UI Builder."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-textfield.png",alt:"Adding a text field to the UI"})),(0,i.kt)("p",null,"Adding a text field to the UI"),(0,i.kt)("p",null,"To bind a control to a serialized property, assign the property to the ",(0,i.kt)("inlineCode",{parentName:"p"},"binding-path")," field of the control. You can do this in code, UXML or UI Builder. The property matches by name, so make sure to check your spelling."),(0,i.kt)("p",null,"Bind the new ",(0,i.kt)("inlineCode",{parentName:"p"},"TextField")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"m_Make")," property in UI Builder."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-binding.png",alt:"Binding a property to a control in UI Builder"})),(0,i.kt)("p",null,"Binding a property to a control in UI Builder"),(0,i.kt)("p",null,"Below is the UXML code for the inspector UI, including the data binding attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True"&gt;\n    &lt;ui:TextField label="Make of the car" text="&lt;not set&gt;" binding-path="m_Make" /&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("p",null,"When you set the binding path of a control, you tell the control the name of the serialized property it should be linking to. But the control still needs to receive and instance of the serialized object that the property belongs to. You can use the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.BindingExtensions.html"},"VisualElement.Bind")," method to bind a serialized object such as a ",(0,i.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," to an entire Visual Tree, and the individual controls will bind to the appropriate properties on that object."),(0,i.kt)("p",null,"When writing a custom inspector, binding is automatic. ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI()")," does an implicit bind after you return your visual tree. To learn more, see the documentation page on  ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/uielements/uie-binding"},"Data binding"))," ."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-firstproperty.png",alt:"Custom inspector showing a text field"})),(0,i.kt)("p",null,"Custom inspector showing a text field"),(0,i.kt)("p",null,"Because UI Toolkit is working with serialized properties, there is no additional code needed to support Undo/Redo functionality. It\u2019s automatically supported."),(0,i.kt)("h2",{id:"property-fields"},"Property fields"),(0,i.kt)("p",null,"To display properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," class, you must add a control for each field. The control must match the property type so that it can be bound. For example, an ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," should be bound to an Integer field or an Integer Slider."),(0,i.kt)("p",null,"Instead of adding a specific control based on the property type, you can also make use of the generic ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.PropertyField.html"},"PropertyField")," control. This control works for most types of serialized properties, and generates the default inspector UI for this property type."),(0,i.kt)("p",null,"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," control for the ",(0,i.kt)("inlineCode",{parentName:"p"},"m_YearBuilt")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"m_Color")," properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," class. Assign the binding path for each and fill in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Label")," text."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-propertyfield.png",alt:"Adding a property field in UI Builder"})),(0,i.kt)("p",null,"Adding a property field in UI Builder"),(0,i.kt)("p",null,"The advantage of a ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," is the inspector UI will automatically adjust when you change the variable type inside your script. However, you can\u2019t get a preview of the control inside the UI Builder, since the control type needed is unknown until the visual tree is bound to a serialized object, and UI Toolkit can determine the property type."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-custominspector.png",alt:"Custom inspector with property fields"})),(0,i.kt)("p",null,"Custom inspector with property fields"),(0,i.kt)("h2",{id:"create-a-custom-property-drawer"},"Create a custom property drawer"),(0,i.kt)("p",null,"A custom property drawer is a custom inspector UI for a custom serializable class. If that serializable class is part of another serialized object, the custom UI displays that property in the inspector. In UI Toolkit, the ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," control displays the custom property drawer for a field if one exists."),(0,i.kt)("p",null,"Create a new script ",(0,i.kt)("inlineCode",{parentName:"p"},"Tire.cs")," in  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts"),"  and copy the following code into the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[System.Serializable]\npublic class Tire\n{\n  public float m_AirPressure = 21.5f;\n  public int m_ProfileDepth = 4;\n}\n")),(0,i.kt)("p",null,"Add a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Tire")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Car")," class as shown in the code below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public class Car : MonoBehaviour\n{\n  public string m_Make = "Toyota";\n  public int m_YearBuilt = 1980;\n  public Color m_Color = Color.black;\n\n  // This car has four tires\n  public Tire[] m_Tires = new Tire[4];\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," control works with all standard property types, but it also supports custom serializable classes and arrays. To display the properties of the car\u2019s tires, add another ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," in UI Builder and bind it to ",(0,i.kt)("inlineCode",{parentName:"p"},"m_Tires"),"."),(0,i.kt)("p",null,"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"PropertyField")," control for the ",(0,i.kt)("inlineCode",{parentName:"p"},"m_Tires")," property."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-serializable.png",alt:"Using a PropertyField control to display an array"})),(0,i.kt)("p",null,"Using a PropertyField control to display an array"),(0,i.kt)("p",null,"You can find the UXML code from ",(0,i.kt)("inlineCode",{parentName:"p"},"Car_Inspector_UXML.uxml")," generated for the current inspector UI below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True"&gt;\n    &lt;ui:TextField label="Make of the car" text="&lt;not set&gt;" binding-path="m_Make" /&gt;\n    &lt;uie:PropertyField label="Year Built" binding-path="m_YearBuilt" /&gt;\n    &lt;uie:PropertyField binding-path="m_Color" label="Paint Color" /&gt;\n    &lt;uie:PropertyField binding-path="m_Tires" label="Tires" /&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("p",null,"A custom property drawer allows you to customize the look of the individual ",(0,i.kt)("inlineCode",{parentName:"p"},"Tire")," elements in the list. Instead of deriving from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Editor")," base class, custom property drawers derive from the  ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/PropertyDrawer.html"},"PropertyDrawer")),"  class. To create UI for the custom property, you need to override the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/PropertyDrawer.CreatePropertyGUI.html"},"CreatePropertyGUI")," method."),(0,i.kt)("p",null,"Create a new script ",(0,i.kt)("inlineCode",{parentName:"p"},"Tire_PropertyDrawer.cs")," inside the folder  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/Editor"),"  and copy the code below into it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEngine.UIElements;\n\n[CustomPropertyDrawer(typeof(Tire))]\npublic class Tire_PropertyDrawer : PropertyDrawer\n{\n  public override VisualElement CreatePropertyGUI(SerializedProperty property)\n  {\n    // Create a new VisualElement to be the root the property UI\n    var container = new VisualElement();\n\n    // Create drawer UI using C#\n    // ...\n\n    // Return the finished UI\n    return container;\n  }\n}\n")),(0,i.kt)("p",null,"You can use code and UXML to create the UI for the property, like in a customized inspector. This examples uses code to create the custom UI."),(0,i.kt)("p",null,"Create custom UI for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tire")," class property drawer by extending the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreatePropertyGUI")," method as shown below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public override VisualElement CreatePropertyGUI(SerializedProperty property)\n{\n  // Create a new VisualElement to be the root the property UI\n  var container = new VisualElement();\n\n  // Create drawer UI using C#\n  var popup = new UnityEngine.UIElements.PopupWindow();\n  popup.text = "Tire Details";\n  popup.Add(new PropertyField(property.FindPropertyRelative("m_AirPressure"), "Air Pressure (psi)"));\n  popup.Add(new PropertyField(property.FindPropertyRelative("m_ProfileDepth"), "Profile Depth (mm)"));\n  container.Add(popup);\n\n  // Return the finished UI\n  return container;\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-custompropertydrawer.png",alt:"Inspector using a custom property drawer"})),(0,i.kt)("p",null,"Inspector using a custom property drawer"),(0,i.kt)("p",null,"For more information on property drawers, please see the documentation of  ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/PropertyDrawer.html"},"PropertyDrawer"))," "),(0,i.kt)("h2",{id:"create-a-default-inspector"},"Create a default inspector"),(0,i.kt)("p",null,"During development of a custom inspector it\u2019s helpful to keep access to the default inspector. With UI Toolkit, it\u2019s simple to add the default inspector UI to your custom UI."),(0,i.kt)("p",null,"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"Foldout")," control to your UI in UI Builder, name it  ",(0,i.kt)("strong",{parentName:"p"},"Default","_","Inspector"),"  and assign a label text:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-uibuilder-foldout.png",alt:"Foldout for the Default Inspector"})),(0,i.kt)("p",null,"Foldout for the Default Inspector"),(0,i.kt)("p",null,"You will use UI Builder to create the foldout, but not the inspector. The content of the default inspector generates inside the inspector script and attaches to the foldout control via code."),(0,i.kt)("p",null,"To attach the default inspector UI to the foldout you created in the UI Builder, you must obtain a reference to it. You can retrieve the visual element of the foldout from the visual tree of your inspector. This is done using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/uie-uxml/uie-uquery"},"UQuery")," family of APIs. You can retrieve individual elements inside your UI by name, USS class or by type, or a combination of these attributes."),(0,i.kt)("p",null,"Get a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Foldout")," control inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateInspectorGUI")," method, using the name you set in UI Builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Get a reference to the default inspector foldout control\nVisualElement inspectorFoldout = myInspector.Q("Default_Inspector");\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.InspectorElement.FillDefaultInspector.html"},"FillDefaultInspector")," method of the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/InspectorElement.html"},"InspectorElement")," creates a visual tree with a default inspector for a given serialized object and attaches it to the parent visual element passed into the method as a parameter."),(0,i.kt)("p",null,"Create and attach a default inspector to the foldout using the code below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Attach a default inspector to the foldout\nInspectorElement.FillDefaultInspector(inspectorFoldout, serializedObject, this);\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-custominspector-foldoutinspector.png",alt:"Foldout with the Default Inspector"})),(0,i.kt)("p",null,"Foldout with the Default Inspector"),(0,i.kt)("h2",{id:"final-scripts"},"Final scripts"),(0,i.kt)("p",null,"Below you can find the full source code for all files created in this guide."),(0,i.kt)("h3",{id:"carcs"},"Car.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEngine;\n\npublic class Car : MonoBehaviour\n{\n  public string m_Make = "Toyota";\n  public int m_YearBuilt = 1980;\n  public Color m_Color = Color.black;\n\n  // This car has four tires\n  public Tire[] m_Tires = new Tire[4];\n}\n')),(0,i.kt)("h3",{id:"car_inspectorcs"},"Car","_","Inspector.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEngine.UIElements;\n\n[CustomEditor(typeof(Car))]\npublic class Car_Inspector : Editor\n{\n  public VisualTreeAsset m_InspectorXML;\n\n  public override VisualElement CreateInspectorGUI()\n  {\n    // Create a new VisualElement to be the root of our inspector UI\n    VisualElement myInspector = new VisualElement();\n\n    // Load from default reference\n    m_InspectorXML.CloneTree(myInspector);\n\n    // Get a reference to the default inspector foldout control\n    VisualElement inspectorFoldout = myInspector.Q("Default_Inspector");\n\n    // Attach a default inspector to the foldout\n    InspectorElement.FillDefaultInspector(inspectorFoldout, serializedObject, this);\n\n    // Return the finished inspector UI\n    return myInspector;\n  }\n}\n')),(0,i.kt)("h3",{id:"car_inspector_uxmluxml"},"Car","_","Inspector","_","UXML.uxml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True"&gt;\n    &lt;ui:TextField label="Make of the car" text="&lt;not set&gt;" binding-path="m_Make" /&gt;\n    &lt;uie:PropertyField label="Year Built" binding-path="m_YearBuilt" /&gt;\n    &lt;uie:PropertyField binding-path="m_Color" label="Paint Color" /&gt;\n    &lt;uie:PropertyField binding-path="m_Tires" label="Tires" /&gt;\n    &lt;ui:Foldout text="Default Inspector" name="Default_Inspector" /&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("h3",{id:"tirecs"},"Tire.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[System.Serializable]\npublic class Tire\n{\n  public float m_AirPressure = 21.5f;\n  public int m_ProfileDepth = 4;\n}\n")),(0,i.kt)("h3",{id:"tire_propertycs"},"Tire","_","Property.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEngine.UIElements;\n\n[CustomPropertyDrawer(typeof(Tire))]\npublic class Tire_PropertyDrawer : PropertyDrawer\n{\n  public override VisualElement CreatePropertyGUI(SerializedProperty property)\n  {\n    // Create a new VisualElement to be the root the property UI\n    var container = new VisualElement();\n\n    // Create drawer UI using C#\n    var popup = new UnityEngine.UIElements.PopupWindow();\n    popup.text = "Tire Details";\n    popup.Add(new PropertyField(property.FindPropertyRelative("m_AirPressure"), "Air Pressure (psi)"));\n    popup.Add(new PropertyField(property.FindPropertyRelative("m_ProfileDepth"), "Profile Depth (mm)"));\n    container.Add(popup);\n\n    // Return the finished UI\n    return container;\n  }\n}\n')))}m.isMDXComponent=!0}}]);