"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75309],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return c}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),c=i,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},33225:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=["components"],o={id:"TimeFrameManagement",title:"Important Classes - Time",slug:"/scripting-important-classes/time-frame-management"},s="Important Classes - Time",m={unversionedId:"scripting-section/scripting-important-classes/TimeFrameManagement",id:"scripting-section/scripting-important-classes/TimeFrameManagement",title:"Important Classes - Time",description:"Unity\u2019s Time class provides important basic properties that allow you to work with time-related values in your project.",source:"@site/docs/scripting-section/scripting-important-classes/time-frame-management.md",sourceDirName:"scripting-section/scripting-important-classes",slug:"/scripting-important-classes/time-frame-management",permalink:"/docs/scripting-important-classes/time-frame-management",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting-section/scripting-important-classes/time-frame-management.md",tags:[],version:"current",frontMatter:{id:"TimeFrameManagement",title:"Important Classes - Time",slug:"/scripting-important-classes/time-frame-management"},sidebar:"tutorialSidebar",previous:{title:"\u91cd\u8981\u7684\u7c7b - Transform",permalink:"/docs/scripting-important-classes/scripting-transform"},next:{title:"\u91cd\u8981\u7684\u7c7b - \u77e2\u91cf",permalink:"/docs/scripting-important-classes/vector-cookbook"}},p={},d=[{value:"Variable and Fixed time steps",id:"variable-and-fixed-time-steps",level:2},{value:"Variable frame rate management",id:"variable-frame-rate-management",level:2},{value:"\u56fa\u5b9a\u65f6\u95f4\u6b65\u957f",id:"\u56fa\u5b9a\u65f6\u95f4\u6b65\u957f",level:2},{value:"Unity \u7684\u65f6\u95f4\u903b\u8f91",id:"unity-\u7684\u65f6\u95f4\u903b\u8f91",level:2},{value:"Controlling and handling variations in time",id:"controlling-and-handling-variations-in-time",level:2},{value:"Time variation and the physics system",id:"time-variation-and-the-physics-system",level:2},{value:"\u65f6\u95f4\u5c3a\u5ea6",id:"\u65f6\u95f4\u5c3a\u5ea6",level:2},{value:"Capture frame rate",id:"capture-frame-rate",level:2}],u={toc:d};function c(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"important-classes---time"},"Important Classes - Time"),(0,r.kt)("p",null,"Unity\u2019s Time class provides important basic properties that allow you to work with time-related values in your project."),(0,r.kt)("p",null,"This page contains explanations for some more commonly used members of the Time class, and how they relate to each other. You can read individual descriptions for each member of the time class on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Time.html"},"Time script reference page"),"."),(0,r.kt)("p",null,"The Time class has a few properties which provide you with numeric values that allow you to measure time elapsing while your game or app is running. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-time.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Time.time"))," returns the amount of time in seconds since your project started playing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-deltaTime.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Time.deltaTime"))," returns the amount of time in seconds that elapsed since the last frame completed. This value varies depending on the frames per second (FPS) rate at which your game or app is running.")),(0,r.kt)("p",null,"The Time class also provides you with properties which allow you to control and limit how time elapses, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-timeScale.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Time.timeScale"))," controls the rate at which time elapses. You can read this value, or set it to control how fast time passes, allowing you to create slow-motion effects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-fixedDeltaTime.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Time.fixedDeltaTime"))," controls the interval of Unity\u2019s fixed timestep loop (used for physics, and if you want to write deterministic time-based code)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-maximumDeltaTime.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Time.maximumDeltaTime"))," sets an upper limit on the amount of time the engine will report as having passed by the \u201cdelta time\u201d properties above.")),(0,r.kt)("h2",{id:"variable-and-fixed-time-steps"},"Variable and Fixed time steps"),(0,r.kt)("p",null,"Unity has two systems which track time, one with a variable amount of time between each step, and one with a fixed amount of time between each step."),(0,r.kt)("p",null,"The variable time step system operates on the repeated process of drawing a frame to the screen, and running your app or game code once per frame."),(0,r.kt)("p",null,"The fixed time step system steps forward at a pre-defined amount each step, and is not linked to the visual frame updates. It is more commonly associated with the physics system, which runs at the rate specified by the fixed time step size, but you can also execute your own code each fixed time step if necessary."),(0,r.kt)("h2",{id:"variable-frame-rate-management"},"Variable frame rate management"),(0,r.kt)("p",null,"The frame rate of your game or app can vary because of the time it takes to display and execute the code for each frame. This is is affected by the capabilities of the device on which it is running, and also on the varying amount of complexity of the graphics displayed and computation required each frame. For example, your game may run at a slower frame rate when there are one hundred characters active and on-screen, compared to when there is only one. This variable rate is often referred to as \u201cframes per second\u201d, or FPS."),(0,r.kt)("p",null,"Unless otherwise constrained by your ",(0,r.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-quality-settings"},"quality settings")," or by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/pack-safe/com-unity-adaptiveperformance"},"Adaptive Performance package"),", Unity tries to run your game or app at the fastest frame rate possible. You can see more details of what occurs each frame in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/scripting-concepts/execution-order"},"execution order diagram"),", in the section marked \u201cGame Logic\u201d."),(0,r.kt)("p",null,"Unity provides the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MonoBehaviour.Update.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Update"))," method as an entry point for you to execute your own code each frame. For example, in your game character\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"Update")," method, you might read the user input from a joypad, and move the character forward a certain amount. It\u2019s important to remember when handling time-based actions like this is that the game\u2019s frame rate can vary and so the length of time between Update calls also varies."),(0,r.kt)("p",null,"Consider the task of moving an object forward gradually, one frame at a time. It might seem at first that you could just translate the object by a fixed distance each frame:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//C# \u811a\u672c\u793a\u4f8b\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public float distancePerFrame;\n    \n    void Update() {\n        transform.Translate(0, 0, distancePerFrame); // \u8fd9\u4e0d\u6b63\u786e\n    }\n}\n")),(0,r.kt)("p",null,"However with this code, as the frame rate varies, the the object\u2019s apparent speed also varies. If the game is running at 100 frames per second, the object moves ",(0,r.kt)("em",{parentName:"p"},"distancePerFrame")," one hundred times per second. But if the frame rate slows to 60 frames per second (due to CPU load, say) then it only steps forward sixty times a second and therefore covers a shorter distance over the same amount of time."),(0,r.kt)("p",null,"In most cases this is undesirable, particularly with games and animation. It is much more common to want your in-game objects to move at steady and predictable speeds regardless of the frame rate. The solution is to scale the amount of the movement each frame by the amount of time elapsed each frame, which you can read from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-deltaTime.html"},"Time.deltaTime")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//C# \u811a\u672c\u793a\u4f8b\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public float distancePerSecond;\n    \n    void Update() {\n        transform.Translate(0, 0, distancePerSecond * Time.deltaTime);\n    }\n}\n")),(0,r.kt)("p",null,"Note that the movement is now given as ",(0,r.kt)("em",{parentName:"p"},"distancePerSecond")," rather than ",(0,r.kt)("em",{parentName:"p"},"distancePerFrame"),". As the frame rate varies, the size of the movement step will vary accordingly and so the object\u2019s speed will be constant."),(0,r.kt)("p",null,"Depending on your target platform, use either ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Application-targetFrameRate.html"},"Application.targetFrameRate")," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/QualitySettings-vSyncCount.html"},"QualitySettings.vSyncCount")," to set the frame rate of your application. For more information, see the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Application-targetFrameRate.html"},"Application.targetFrameRate API documentation"),"."),(0,r.kt)("h2",{id:"\u56fa\u5b9a\u65f6\u95f4\u6b65\u957f"},"\u56fa\u5b9a\u65f6\u95f4\u6b65\u957f"),(0,r.kt)("p",null,"Unlike the main frame update, Unity\u2019s physics system works to a fixed timestep, which is important for the accuracy and consistency of the simulation. At the start of the each frame, Unity performs as many fixed updates as necessary to catch up with the current time. You can see more details of what occurs during the fixed update cycle in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/scripting-concepts/execution-order"},"execution order diagram"),", in the section marked \u201cPhysics\u201d."),(0,r.kt)("p",null,"You can also execute your own code in sync with the fixed timestep, if necessary. This is most commonly used for executing your own physics-related code, such as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rigidbody.AddForce.html"},"applying a force")," to a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rigidbody.html"},"Rigidbody"),". Unity provides the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MonoBehaviour.FixedUpdate.html"},(0,r.kt)("inlineCode",{parentName:"a"},"FixedUpdate"))," method as an entry point for you to execute your own code each fixed timestep."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-fixedDeltaTime.html"},(0,r.kt)("inlineCode",{parentName:"a"},"fixedDeltaTime"))," property controls the interval of Unity\u2019s fixed timestep loop, and is specified in seconds. For example, a value of 0.01 means each fixed timestep is one hundredth of a second in duration, and so there will be 100 fixed time steps per second."),(0,r.kt)("p",null,"If your game or app is running at a higher frame rate than the number of fixed timesteps per second, it means each frame duration is less than the duration of a single fixed timestep. In that case, Unity performs either zero or one fixed physics updates per frame. For example, if your fixed timestep value is 0.02, there will be 50 fixed updates per second. If your game or app then runs at 60 frames per second, approximately one in ten frames will not have a fixed update."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UpdateAndFixedUpdateExample1.svg",alt:"An example showing Update running at 60fps and FixedUpdate running at 50 updates per second. Occasionally a frame update occurs (marked in yellow) with no corresponding FixedUpdate."})),(0,r.kt)("p",null,"An example showing Update running at 60fps and FixedUpdate running at 50 updates per second. Occasionally a frame update occurs (marked in yellow) with no corresponding FixedUpdate."),(0,r.kt)("p",null,"If your game or app is running at a lower frame rate than the fixed timestep value, it means each frame duration is longer than a single fixed timestep. To account for this, Unity will perform one or more fixed updates each frame, so that the physics simulation catches up with the amount of time elapsed since the last frame. For example, if your fixed timestep value is 0.01, there will be 100 fixed updates per second. If your app runs at 25 frames per second, Until performs four fixed updates every frame. You might want a scenario like this where it\u2019s more important to model more accurate physics than to have a high frame rate."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UpdateAndFixedUpdateExample2.svg",alt:"An example showing Update running at 25 FPS and FixedUpdate running at 100 updates per second. You can see there are four occurrences of a FixedUpdate during one frame, marked in yellow."})),(0,r.kt)("p",null,"An example showing Update running at 25 FPS and FixedUpdate running at 100 updates per second. You can see there are four occurrences of a FixedUpdate during one frame, marked in yellow."),(0,r.kt)("p",null,"You can read or change the duration of the fixed timestep in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-time-manager"},"Time")," window, or from a script using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-fixedDeltaTime.html"},"Time.fixedDeltaTime")," property."),(0,r.kt)("p",null,"Note: A lower timestep value means more frequent physics updates and more precise simulations, which leads to higher CPU load."),(0,r.kt)("h2",{id:"unity-\u7684\u65f6\u95f4\u903b\u8f91"},"Unity \u7684\u65f6\u95f4\u903b\u8f91"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u6d41\u7a0b\u56fe\u8bf4\u660e\u4e86 Unity \u7528\u4e8e\u8ba1\u7b97\u5355\u4e2a\u5e27\u4e2d\u65f6\u95f4\u7684\u903b\u8f91\uff0c\u4ee5\u53ca ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-time.html"},"time"),"\u3001",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-deltaTime.html"},"deltaTime"),"\u3001",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-fixedDeltaTime.html"},"fixedDeltaTime")," \u548c ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-maximumDeltaTime.html"},"maximumDeltaTime")," \u5c5e\u6027\u5982\u4f55\u76f8\u4e92\u5173\u8054\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/time-flowchart.png",alt:"time-flowchart.png"})),(0,r.kt)("h2",{id:"controlling-and-handling-variations-in-time"},"Controlling and handling variations in time"),(0,r.kt)("p",null,"As described above, there can be variations in the amount of time elapsed between each frame."),(0,r.kt)("p",null,"Elapsed time variations can be slight. For example, in a game running at 60 frames per second, the actual number of frames per second may vary slightly, so that each frame lasts between 0.016 and 0.018 seconds. Larger variations can occur when your app performs heavy computations or garbage collection, or when the resources it needs to maintain its frame rate are being used by a different app."),(0,r.kt)("p",null,"The properties explained in this section are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-time.html"},"Time.time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-unscaledTime.html"},"Time.unscaledTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-deltaTime.html"},"Time.deltaTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-unscaledDeltaTime.html"},"Time.unscaledDeltaTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-smoothDeltaTime.html"},"Time.smoothDeltaTime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-timeScale.html"},"Time.timeScale")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-maximumDeltaTime.html"},"Time.maximumDeltaTime"))),(0,r.kt)("p",null,"These properties each have their own scripting API documentation page, but it can help to see their descriptions and outputs in relation to each other to understand their appropriate uses."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Time.time")," indicates the amount of time elapsed since the player started, and so usually continuously and steadily rises. ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.deltaTime")," indicates the amount of time elapsed since the last frame, and so ideally remains fairly constant."),(0,r.kt)("p",null,"Both these values are subjective measures of time elapsed within your app or game. This means they take into account any scaling of time that you apply. So for example, you could set the Time.timeScale to 0.1 for a slow-motion effect (which indicates 10% of normal playback speed). In this situation the value reported by ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.time")," increases at 10% the rate of \u201creal\u201d time. After 10 seconds, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.time")," would have increased by 1. In addition to slowing down or speeding up time in your app, you can set Time.timeScale to zero to pause your game, in which case the ",(0,r.kt)("inlineCode",{parentName:"p"},"Update")," method is still called, but ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.time")," does not increase at all, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.deltaTime")," is zero."),(0,r.kt)("p",null,"These values are also clamped by the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.maximumDeltaTime")," property. This means the length of any pauses or variations in frame rate reported by these properties will never exceed maximumDeltaTime. For example, if a delay of one second occurs, but the maximumDeltaTime is set to the default value of 0.333, ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.time")," would only increase by 0.333, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.deltaTime")," would equal 0.333, despite more time having actually elapsed in the real world."),(0,r.kt)("p",null,"The unscaled versions of each of these properties (",(0,r.kt)("inlineCode",{parentName:"p"},"Time.unscaledTime")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.unscaledDeltaTime"),") ignore these subjective variations and limitations, and report the actual time elapsed in both cases. This is useful for anything that should respond at a fixed speed even when the game is playing in slow-motion. An example of this is UI interaction animation."),(0,r.kt)("p",null,"The table below shows an example of 16 frames elapsing one after another, with one large delay occuring half-way through, on a single frame. These figures illustrate how the various Time class properties report and respond to this large variation in frame rate."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Frame"),(0,r.kt)("th",{parentName:"tr",align:null},"unscaledTime"),(0,r.kt)("th",{parentName:"tr",align:null},"time"),(0,r.kt)("th",{parentName:"tr",align:null},"unscaledDeltaTime"),(0,r.kt)("th",{parentName:"tr",align:null},"deltaTime"),(0,r.kt)("th",{parentName:"tr",align:null},"smoothDeltaTime"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"0.036"),(0,r.kt)("td",{parentName:"tr",align:null},"0.036"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"0.054"),(0,r.kt)("td",{parentName:"tr",align:null},"0.054"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"0.071"),(0,r.kt)("td",{parentName:"tr",align:null},"0.071"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"0.089"),(0,r.kt)("td",{parentName:"tr",align:null},"0.089"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"0.107"),(0,r.kt)("td",{parentName:"tr",align:null},"0.107"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8 ( ",(0,r.kt)("strong",{parentName:"td"},"a")," )"),(0,r.kt)("td",{parentName:"tr",align:null},"1.123 ( ",(0,r.kt)("strong",{parentName:"td"},"b")," )"),(0,r.kt)("td",{parentName:"tr",align:null},"0.440 ( ",(0,r.kt)("strong",{parentName:"td"},"c")," )"),(0,r.kt)("td",{parentName:"tr",align:null},"1.016 ( ",(0,r.kt)("strong",{parentName:"td"},"d")," )"),(0,r.kt)("td",{parentName:"tr",align:null},"0.333 ( ",(0,r.kt)("strong",{parentName:"td"},"e")," )"),(0,r.kt)("td",{parentName:"tr",align:null},"0.081 ( ",(0,r.kt)("strong",{parentName:"td"},"f")," )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"1.140"),(0,r.kt)("td",{parentName:"tr",align:null},"0.457"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.066")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"1.157"),(0,r.kt)("td",{parentName:"tr",align:null},"0.474"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.017"),(0,r.kt)("td",{parentName:"tr",align:null},"0.056")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"1.175"),(0,r.kt)("td",{parentName:"tr",align:null},"0.492"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.049")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"1.193"),(0,r.kt)("td",{parentName:"tr",align:null},"0.510"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.042")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13"),(0,r.kt)("td",{parentName:"tr",align:null},"1.211"),(0,r.kt)("td",{parentName:"tr",align:null},"0.528"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.038")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},"1.229"),(0,r.kt)("td",{parentName:"tr",align:null},"0.546"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.034")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"15"),(0,r.kt)("td",{parentName:"tr",align:null},"1.247"),(0,r.kt)("td",{parentName:"tr",align:null},"0.564"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.031")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"1.265"),(0,r.kt)("td",{parentName:"tr",align:null},"0.582"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.018"),(0,r.kt)("td",{parentName:"tr",align:null},"0.028")))),(0,r.kt)("p",null,"Frames 1 to 7 are running at a steady rate of approximately 60 frames per second. You can see both \u201ctime\u201d and \u201cunscaledTime\u201d increasing steadily together, indicating that the timeScale during this example is set to 1."),(0,r.kt)("p",null,"Then on frame 8 ( ",(0,r.kt)("strong",{parentName:"p"},"a")," ), a large delay of just over one second occurs. This can happen when there is resource competition. For example, a code in the app blocks the main process while it loads a large amount of data from disk."),(0,r.kt)("p",null,"When a frame delay of larger than the maximumDeltaTime value occurs, Unity limits the value reported by ",(0,r.kt)("inlineCode",{parentName:"p"},"deltaTime"),", and the amount added to the current ",(0,r.kt)("inlineCode",{parentName:"p"},"time"),". The purpose of this limit is to avoid undesirable side-effects that might occur if the timestep exceeded that amount. If there was no limit, an object whose movement was scaled by deltaTime would be able to \u201cglitch\u201d through a wall in a game during a frame rate spike, because there would theoretically be no limit to how far an object could move from one frame to the next, so it could possibly jump from one side of an obstacle to another in a single frame without intersecting with it at all."),(0,r.kt)("p",null,"You can adjust the maximumDeltaTime value in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-time-manager"},"Time")," window, where it is labelled  ",(0,r.kt)("strong",{parentName:"p"},"Maximum allowed timestep")," , as well as with the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-maximumDeltaTime.html"},"Time.maximumDeltaTime")," property."),(0,r.kt)("p",null,"The default maximumDeltaTime value is one third of a second (0.3333333). This means that in a game where movement is controlled by deltaTime, an object\u2019s movement from one frame to the next is limited to the distance it could cover in a third of a second, regardless of how much time actually elapsed since the previous frame."),(0,r.kt)("p",null,"Looking at the data from the table above in graph form can help to visualise how these time properties behave in relation to each other:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/time-delta-unscaled.png",alt:"time-delta-unscaled.png"})),(0,r.kt)("p",null,"You can see above, on frame 8, that ",(0,r.kt)("inlineCode",{parentName:"p"},"unscaledDeltaTime")," ( ",(0,r.kt)("strong",{parentName:"p"},"d")," ) and ",(0,r.kt)("inlineCode",{parentName:"p"},"deltaTime")," ( ",(0,r.kt)("strong",{parentName:"p"},"e")," ) differ in how much time they report has elapsed. Although a whole second of real time elapsed between frames 7 and 8, deltaTime reports only 0.333 seconds. This is because deltaTime is clamped to the ",(0,r.kt)("inlineCode",{parentName:"p"},"maximumDeltaTime")," value."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/time-and-unscaled.png",alt:"time-and-unscaled.png"})),(0,r.kt)("p",null,"Similarly, ",(0,r.kt)("inlineCode",{parentName:"p"},"unscaledTime")," ( ",(0,r.kt)("strong",{parentName:"p"},"b")," ) has increased by approximately a whole second because the true (unclamped) value has been added, whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," ( ",(0,r.kt)("strong",{parentName:"p"},"c")," ) has only increased by the smaller clamped value. The ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," value does not catch up to the real amount of time that has elapsed, and instead behaves as though the delay was only ",(0,r.kt)("inlineCode",{parentName:"p"},"maximumDeltaTime")," in duration."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/time-delta-smoothed.png",alt:"time-delta-smoothed.png"})),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.smoothDeltaTime")," property reports an approximation of the recent deltaTime values with all variations smoothed out according to an algorithm. This is another technique to avoid undesirably large steps or fluctuations in movement or other time-based calculations. In particular, those which fall below the threshold set by ",(0,r.kt)("inlineCode",{parentName:"p"},"maximumDeltaTime"),". The smoothing-out algorithm cannot predict future variations, but it gradually adapts its reported value to smooth out variations in the recently elapsed delta time values, so that the average reported time remains approximately equivalent to the actual amount of time elapsed."),(0,r.kt)("h2",{id:"time-variation-and-the-physics-system"},"Time variation and the physics system"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"maximumDeltaTime")," value also affects the physics system. The physics system uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"fixedTimestep")," value to determine how much time to simulate in each step. Unity tries to keep the physics simulation up-to-date with the amount of time that has elapsed and, as mentioned above, sometimes performs multiple physics updates per frame. However if the physics simulation fall too far behind, for example because of some heavy computation or a delay of some kind, the physics system may require a large number of steps to catch up with the current time. This large number of steps may then itself cause a further slow-down."),(0,r.kt)("p",null,"To avoid this cyclic feedback of slowing down due to attempting to catch up, the maximumDeltaTime value also acts as a limit on the amount of time the physics system will simulate between any given two frames."),(0,r.kt)("p",null,"If a frame update takes longer than maximumDeltaTime to process, the physics engine will not try to simulate any time beyond the maximumDeltaTime, and instead lets the frame processing catch up. Once the frame update has finished, the physics resumes as though no time has passed since it stopped. The result of this is that physics objects will not move perfectly in real time as they usually do, but will be slowed slightly. However, the physics \u201cclock\u201d will still track them as though they were moving normally. The slowing of physics time is usually not noticeable and is often an acceptable trade-off against gameplay performance."),(0,r.kt)("h2",{id:"\u65f6\u95f4\u5c3a\u5ea6"},"\u65f6\u95f4\u5c3a\u5ea6"),(0,r.kt)("p",null,"For special time effects such as slow-motion, it\u2019s sometimes useful to slow the passage of game time so that animations and time-based calculations in your code happen at a slower pace. Furthermore, you may sometimes want to freeze game time completely, as when the game is paused. Unity has a ",(0,r.kt)("em",{parentName:"p"},"Time Scale")," property that controls how fast game time proceeds relative to real time. If you set the scale to 1.0, your in-game time matches real time. A value of 2.0 makes time pass twice as quickly in Unity (ie, the action will be speeded-up) while a value of 0.5 will slow gameplay down to half speed. A value of zero will make your in-game time stop completely. Note that the time scale doesn\u2019t actually slow execution but instead changes the time step reported to the Update and FixedUpdate functions with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-deltaTime.html"},"Time.deltaTime")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-fixedDeltaTime.html"},"Time.fixedDeltaTime"),". Your Update function may be called just as often when you reduce your time scale, but the value of deltaTime each frame will be less. Other script functions aren\u2019t affected by the time scale, so you can for example display a GUI with normal interaction when the game is paused."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-time-manager"},"Time")," window has a property to let you set the time scale globally but it\u2019s usually more useful to set the value from a script using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-timeScale.html"},"../ScriptReference/Time-timeScale")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//C# \u811a\u672c\u793a\u4f8b\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void Pause() {\n        Time.timeScale = 0;\n    }\n    \n    void Resume() {\n        Time.timeScale = 1;\n    }\n}\n")),(0,r.kt)("h2",{id:"capture-frame-rate"},"Capture frame rate"),(0,r.kt)("p",null,"A special case of time management is where you want to record gameplay as a video. Since the task of saving screen images takes considerable time, the game\u2019s normal frame rate is reduced, and the video doesn\u2019t reflect the game\u2019s true performance."),(0,r.kt)("p",null,"To improve the video\u2019s appearance, use the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/Time-captureFramerate.html"},"Capture Framerate")," property. The property\u2019s default value is 0, for unrecorded gameplay. For recording. When you set the property\u2019s value to anything other than zero, game time is slowed and the frame updates are issued at precise regular intervals. The interval between frames is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1 / Time.captureFramerate"),", so if you set the value to 5.0 then updates occur every fifth of a second. With the demands on frame rate effectively reduced, you have time in the Update function to save screenshots or take other actions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    // Capture frames as a screenshot sequence. Images are\n    // stored as PNG files in a folder - these can be combined into\n    // a movie using image utility software (eg, QuickTime Pro).\n    // The folder to contain our screenshots.\n    // If the folder exists we will append numbers to create an empty folder.\n    string folder = "ScreenshotFolder";\n    int frameRate = 25;\n        \n    void Start () {\n        // Set the playback frame rate (real time will not relate to game time after this).\n        Time.captureFramerate = frameRate;\n        \n        // Create the folder\n        System.IO.Directory.CreateDirectory(folder);\n    }\n    \n    void Update () {\n        // Append filename to folder name (format is \'0005 shot.png"\')\n        string name = string.Format("{0}/{1:D04} shot.png", folder, Time.frameCount );\n        \n        // Capture the screenshot to the specified file.\n        Application.CaptureScreenshot(name);\n    }\n}\n')),(0,r.kt)("p",null,"Using this technique improves the video, but can make the game much harder to play. Try different values of Time.captureFramerate to find a good balance."))}c.isMDXComponent=!0}}]);