"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1004],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return u}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(r),u=n,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return r?a.createElement(g,s(s({ref:t},d),{},{components:r})):a.createElement(g,s({ref:t},d))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},92788:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=r(87462),n=r(63366),i=(r(67294),r(3905)),s=["components"],o={id:"SL-ShaderCompilationAPIs",title:"Targeting graphics APIs and platforms in HLSL",slug:"/shader-preprocessor-directives/sl-shader-compilation-apis"},l="Targeting graphics APIs and platforms in HLSL",p={unversionedId:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/SL-ShaderCompilationAPIs",id:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/SL-ShaderCompilationAPIs",title:"Targeting graphics APIs and platforms in HLSL",description:"Some #pragma directives take parameters that allow you to target specific graphics APIs and platforms. This page contains information on using those directives, and provides a list of valid parameter values.",source:"@site/docs/graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/sl-shader-compilation-apis.md",sourceDirName:"graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives",slug:"/shader-preprocessor-directives/sl-shader-compilation-apis",permalink:"/docs/shader-preprocessor-directives/sl-shader-compilation-apis",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/sl-shader-compilation-apis.md",tags:[],version:"current",frontMatter:{id:"SL-ShaderCompilationAPIs",title:"Targeting graphics APIs and platforms in HLSL",slug:"/shader-preprocessor-directives/sl-shader-compilation-apis"},sidebar:"tutorialSidebar",previous:{title:"pragma directives in HLSL",permalink:"/docs/shader-preprocessor-directives/sl-pragma-directives"},next:{title:"Targeting shader models and GPU features in HLSL",permalink:"/docs/shader-preprocessor-directives/sl-shader-compile-targets"}},d={},c=[{value:"\u5305\u542b\u6216\u6392\u9664\u56fe\u5f62 API",id:"\u5305\u542b\u6216\u6392\u9664\u56fe\u5f62-api",level:2},{value:"Generating shader variants for graphics tiers for a given graphics API",id:"generating-shader-variants-for-graphics-tiers-for-a-given-graphics-api",level:2},{value:"List of valid parameter values",id:"list-of-valid-parameter-values",level:2}],m={toc:c};function u(e){var t=e.components,r=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"targeting-graphics-apis-and-platforms-in-hlsl"},"Targeting graphics APIs and platforms in HLSL"),(0,i.kt)("p",null,"Some ",(0,i.kt)("a",{parentName:"p",href:"/docs/shader-preprocessor-directives/sl-pragma-directives"},(0,i.kt)("inlineCode",{parentName:"a"},"#pragma")," directives")," take parameters that allow you to target specific graphics APIs and platforms. This page contains information on using those directives, and provides a list of valid parameter values."),(0,i.kt)("h2",{id:"\u5305\u542b\u6216\u6392\u9664\u56fe\u5f62-api"},"\u5305\u542b\u6216\u6392\u9664\u56fe\u5f62 API"),(0,i.kt)("p",null,"By default, Unity compiles all shader programs for each graphics API in the list for the current build target. Sometimes, you might want to compile certain shader programs only for certain graphics APIs; for example, if you use features that are not supported on all platforms."),(0,i.kt)("p",null,"To compile a shader program only for given APIs, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"#pragma only_renderers")," directive. You can pass multiple values, space delimited."),(0,i.kt)("p",null,"This example demonstrates how to compile shaders only for Metal and Vulkan:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#pragma only_renderers metal vulkan\n")),(0,i.kt)("p",null,"To exclude shader code from compilation by given compilers, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"#pragma exclude_renderers")," directive. You can pass multiple values, space delimited."),(0,i.kt)("p",null,"This example demonstrates how to exclude a shader from compilation for Metal and Vulkan:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#pragma exclude_renderers metal vulkan\n")),(0,i.kt)("h2",{id:"generating-shader-variants-for-graphics-tiers-for-a-given-graphics-api"},"Generating shader variants for graphics tiers for a given graphics API"),(0,i.kt)("p",null,"In the Built-in Render Pipeline, Unity automatically generates ",(0,i.kt)("a",{parentName:"p",href:"/docs/shader-variants-and-keywords/shader-variants"},"shader variants")," that correspond to ",(0,i.kt)("a",{parentName:"p",href:"/docs/built-in-render-pipeline/graphics-tiers"},"graphics tiers")," under certain conditions. You can also force Unity to generate these variants, if required."),(0,i.kt)("p",null,"To do this, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"#pragma hardware_tier_variants")," preprocessor directive and specify the graphics APIs for which you want to generate tier shader variants."),(0,i.kt)("p",null,"For example, this instructs Unity to compile tier shader variants for Metal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#pragma hardware_tier_variants metal\n")),(0,i.kt)("h2",{id:"list-of-valid-parameter-values"},"List of valid parameter values"),(0,i.kt)("p",null,"Supported values are:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u503c")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u63cf\u8ff0")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"d3d11")),(0,i.kt)("td",{parentName:"tr",align:null},"DirectX 11 feature level 10 and above, DirectX 12")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gles")),(0,i.kt)("td",{parentName:"tr",align:null},"OpenGL ES 2.0, WebGL 1.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gles3")),(0,i.kt)("td",{parentName:"tr",align:null},"OpenGL ES 3.x, WebGL 2.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ps4")),(0,i.kt)("td",{parentName:"tr",align:null},"PlayStation 4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"xboxone")),(0,i.kt)("td",{parentName:"tr",align:null},"Xbox One and GameCore, DirectX 11 and DirectX 12")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"metal")),(0,i.kt)("td",{parentName:"tr",align:null},"iOS/Mac Metal")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"glcore")),(0,i.kt)("td",{parentName:"tr",align:null},"OpenGL 3.x, OpenGL 4.x")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"vulkan")),(0,i.kt)("td",{parentName:"tr",align:null},"Vulkan")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"switch")),(0,i.kt)("td",{parentName:"tr",align:null},"Nintendo Switch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ps5")),(0,i.kt)("td",{parentName:"tr",align:null},"PlayStation 5")))))}u.isMDXComponent=!0}}]);