"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56978],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return p}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,f=u["".concat(d,".").concat(p)]||u[p]||h[p]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},17058:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return h}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={id:"shader-conditionals",title:"Conditionals in shaders",slug:"/shader-variants-and-keywords/shader-conditionals"},d="Conditionals in shaders",c={unversionedId:"graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-conditionals",id:"graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-conditionals",title:"Conditionals in shaders",description:"Sometimes, you want the same shader to do different things under different circumstances. For example, you might want to configure different settings for different materials, define functionality for different hardware, or dynamically change the behavior of shaders at runtime. You might also want to avoid executing computationally expensive code when it\u2019s not needed, such as texture reads, vertex inputs, interpolators, or loops.",source:"@site/docs/graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-conditionals.md",sourceDirName:"graphics/shaders/shaders-overview/shader-variants-and-keywords",slug:"/shader-variants-and-keywords/shader-conditionals",permalink:"/docs/shader-variants-and-keywords/shader-conditionals",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/shaders/shaders-overview/shader-variants-and-keywords/shader-conditionals.md",tags:[],version:"current",frontMatter:{id:"shader-conditionals",title:"Conditionals in shaders",slug:"/shader-variants-and-keywords/shader-conditionals"},sidebar:"tutorialSidebar",previous:{title:"Branching in shaders",permalink:"/docs/shader-variants-and-keywords/shader-branching"},next:{title:"Using shader keywords with the material Inspector",permalink:"/docs/shader-variants-and-keywords/shader-keywords-material-inspector"}},l={},h=[{value:"Different types of conditionals",id:"different-types-of-conditionals",level:2},{value:"When to use which type of conditional",id:"when-to-use-which-type-of-conditional",level:2}],u={toc:h};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"conditionals-in-shaders"},"Conditionals in shaders"),(0,i.kt)("p",null,"Sometimes, you want the same shader to do different things under different circumstances. For example, you might want to configure different settings for different materials, define functionality for different hardware, or dynamically change the behavior of shaders at runtime. You might also want to avoid executing computationally expensive code when it\u2019s not needed, such as texture reads, vertex inputs, interpolators, or loops."),(0,i.kt)("p",null,"You can use conditionals to define behavior that the GPU only executes under certain conditions."),(0,i.kt)("h2",{id:"different-types-of-conditionals"},"Different types of conditionals"),(0,i.kt)("p",null,"To use conditionals in your shader, you can use the following approaches:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-branching#static-branching"},"Static branching"),": the shader compiler evaluates conditional code at compile time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-branching#dynamic-branching"},"Dynamic branching"),": the GPU evaluates conditional code at runtime."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/shader-variants-and-keywords/shader-variants"},"Shader variants"),": Unity uses static branching to compile the shader source code into multiple shader programs. Unity then uses the shader program that matches the conditions at runtime.")),(0,i.kt)("h2",{id:"when-to-use-which-type-of-conditional"},"When to use which type of conditional"),(0,i.kt)("p",null,"There is no \u201cone size fits all\u201d approach to conditionals in shaders, and you should consider the advantages and disadvantages of each approach for a given shader, in a given project."),(0,i.kt)("p",null,"Bear in mind the following information:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you know the conditions at compile time (for example, if you know that you are building for given hardware), then static branching is likely the best choice. Static branching code is simple to write and maintain, and it does not negatively impact build times, file sizes, or runtime performance. However, you cannot use it to execute code for different conditions at runtime."),(0,i.kt)("li",{parentName:"ul"},"If you need to execute code for different conditions at runtime, you should consider the following options:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Shader variants do not incur any GPU performance penalty. However, a large number of shader variants in a project can lead to significant problems: increased build times, file sizes, runtime memory usage, and loading times. Shader variants also introduce additional code complexity when manually preloading (\u201cprewarming\u201d) shaders."),(0,i.kt)("li",{parentName:"ul"},"Dynamic branching incurs a GPU performance penalty, which might be small or large depending on the shader code and the hardware. However, it allows you to use conditionals at runtime without increasing the number of shader variants in your project."),(0,i.kt)("li",{parentName:"ul"},"It\u2019s possible to author your shader code so that it avoids branching or variants, and instead uses mathematical operations that return 0 or 1 to execute conditional code. This can lead to complex code that is difficult to maintain. Depending on the circumstances, it might result in only a very small performance improvement over dynamic branching, or no advantage at all.")))),(0,i.kt)("p",null,"In general, the best approach is to profile the performance of your application and carefully consider your decisions case-by-case. For example, if you can afford the slightly increased GPU cost, it might be best to use dynamic branching to achieve \u201cgood enough\u201d GPU performance and reduce the risk of introducing more variants. However, if GPU performance is the primary concern for this shader and you have already accounted for the cost of additional variants, you might choose to use variants."))}p.isMDXComponent=!0}}]);