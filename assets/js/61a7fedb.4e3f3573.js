"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[73596],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83285:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],c={id:"IL2CPP-managed-stack-traces",title:"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP",slug:"/il2cpp/il2cpp-managed-stack-traces"},s="\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP",l={unversionedId:"scripting-section/unity-architecture/scripting-backends/il2cpp/IL2CPP-managed-stack-traces",id:"scripting-section/unity-architecture/scripting-backends/il2cpp/IL2CPP-managed-stack-traces",title:"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP",description:"When an exception happens in managed code, the stack trace for the exception can help you understand the cause of the exception. This can often be found in the player log file. However, the managed stack trace might not appear the way you expect because the stack trace varies depending on the build configuration.\u200b \u200b",source:"@site/docs/scripting-section/unity-architecture/scripting-backends/il2cpp/il2cpp-managed-stack-traces.md",sourceDirName:"scripting-section/unity-architecture/scripting-backends/il2cpp",slug:"/il2cpp/il2cpp-managed-stack-traces",permalink:"/docs/il2cpp/il2cpp-managed-stack-traces",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting-section/unity-architecture/scripting-backends/il2cpp/il2cpp-managed-stack-traces.md",tags:[],version:"current",frontMatter:{id:"IL2CPP-managed-stack-traces",title:"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP",slug:"/il2cpp/il2cpp-managed-stack-traces"},sidebar:"tutorialSidebar",previous:{title:"Handling platform specific settings for IL2CPP additional arguments",permalink:"/docs/il2cpp/handling-il2cpp-additional-args"},next:{title:"Windows \u8fd0\u884c\u65f6\u652f\u6301",permalink:"/docs/il2cpp/il2cpp-windows-runtime-support"}},p={},u=[{value:"C++ Compiler Configuration options",id:"c-compiler-configuration-options",level:2},{value:"Debug",id:"debug",level:3},{value:"Release and master",id:"release-and-master",level:3},{value:"\u6e90\u4ee3\u7801\u884c\u53f7",id:"\u6e90\u4ee3\u7801\u884c\u53f7",level:2},{value:"Script Debugging enabled",id:"script-debugging-enabled",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e-il2cpp"},"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP"),(0,i.kt)("p",null,"When an exception happens in managed code, the stack trace for the exception can help you understand the cause of the exception. This can often be found in the player log file. However, the managed stack trace might not appear the way you expect because the stack trace varies depending on the build configuration.\u200b \u200b"),(0,i.kt)("h2",{id:"c-compiler-configuration-options"},"C++ Compiler Configuration options"),(0,i.kt)("h3",{id:"debug"},"Debug"),(0,i.kt)("p",null,"When the C++ Compiler Configuration is set to Debug, IL2CPP reports a reliable managed stack trace, and includes each managed method in the call stack. The stack trace doesn\u2019t include line numbers from the original C# source code. \u200b"),(0,i.kt)("h3",{id:"release-and-master"},"Release and master"),(0,i.kt)("p",null,"When the C++ Compiler Configuration is set to Release or Master, IL2CPP might produce a call stack that\u2019s missing one or more managed methods. This is because the C++ compiler has inlined the missing methods. Method inlining is usually good for performance at run time, but it can make call stacks more difficult to understand. IL2CPP always provides at least one managed method on the call stack. For stack traces created from managed exceptions, this is the method where the exception occurred. It also includes other methods if they aren\u2019t inlined.\u200b \u200b"),(0,i.kt)("h2",{id:"\u6e90\u4ee3\u7801\u884c\u53f7"},"\u6e90\u4ee3\u7801\u884c\u53f7"),(0,i.kt)("p",null,"To locate errors that the compiler finds in your code, you can configure the managed stack trace information to include the file name and line number in the managed stack traces. The managed stack trace information does not include this information by default, because it increases code size and causes the Unity Player to run more slowly."),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Note:"),"  The option to include line numbers in the stack trace is only available on desktop platforms."),(0,i.kt)("p",null,"To configure the managed stack trace information to include the file name and line numbers:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to  ",(0,i.kt)("strong",{parentName:"li"},"Edit"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Project Settings"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Player"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Other Settings")," ."),(0,i.kt)("li",{parentName:"ol"},"Set  ",(0,i.kt)("strong",{parentName:"li"},"IL2CPP Stacktrace Information"),"  to  ",(0,i.kt)("strong",{parentName:"li"},"Method Name, File Name, and Line Number")," .")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/stack-trace-line-numbers-placeholder.png",alt:"stack-trace-line-numbers-placeholder.png"})),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Note:"),"  When the  ",(0,i.kt)("strong",{parentName:"p"},"C++ Compiler Configuration"),"  is set to  ",(0,i.kt)("strong",{parentName:"p"},"Release"),"  or  ",(0,i.kt)("strong",{parentName:"p"},"Master")," , you might experience the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The compiler might inline some functions, which causes them not to appear in the stack trace."),(0,i.kt)("li",{parentName:"ul"},"The source code line numbers might not match up with the correct line numbers in your code.")),(0,i.kt)("h2",{id:"script-debugging-enabled"},"Script Debugging enabled"),(0,i.kt)("p",null,"To enable  ",(0,i.kt)("strong",{parentName:"p"},"Script Debugging")," , go to  ",(0,i.kt)("strong",{parentName:"p"},"File"),"  ",">","  ",(0,i.kt)("strong",{parentName:"p"},"Build Settings"),"  then click the checkbox next to  ",(0,i.kt)("strong",{parentName:"p"},"Script Debugging")," . With  ",(0,i.kt)("strong",{parentName:"p"},"Script Debugging"),"  enabled, IL2CPP will always report a correct managed stack trace with the method, file name, and line number. However, this increases the program size and produces slower code. Using script debugging solely to improve stack traces is not recommended. Instead, enable the option shown above."))}m.isMDXComponent=!0}}]);