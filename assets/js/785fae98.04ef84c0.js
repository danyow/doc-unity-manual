"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[45913],{3905:function(e,t,s){s.d(t,{Zo:function(){return l},kt:function(){return u}});var n=s(67294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function d(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=p(s),u=r,f=c["".concat(i,".").concat(u)]||c[u]||h[u]||a;return s?n.createElement(f,o(o({ref:t},l),{},{components:s})):n.createElement(f,o({ref:t},l))}));function u(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=s.length,o=new Array(a);o[0]=c;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:r,o[1]=d;for(var p=2;p<a;p++)o[p]=s[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}c.displayName="MDXCreateElement"},48150:function(e,t,s){s.r(t),s.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return h}});var n=s(87462),r=s(63366),a=(s(67294),s(3905)),o=["components"],d={id:"DefaultPresetsByFolder",title:"Applying default presets to Assets by folder",slug:"/presets/default-presets-by-folder"},i="Applying default presets to Assets by folder",p={unversionedId:"asset-workflow/presets/DefaultPresetsByFolder",id:"asset-workflow/presets/DefaultPresetsByFolder",title:"Applying default presets to Assets by folder",description:"\u5bf9\u4e8e\u5927\u9879\u76ee\uff0c\u53ef\u4f7f\u7528\u591a\u4e2a\u9884\u8bbe\u6765\u5bfc\u5165\u76f8\u540c\u7c7b\u578b\u7684\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7eb9\u7406\u8d44\u6e90\uff0c\u53ef\u80fd\u5177\u6709\u7528\u4e8e\u5bfc\u5165\u9ed8\u8ba4\u7eb9\u7406\u7684\u9884\u8bbe\u4ee5\u53ca\u7528\u4e8e\u5149\u7167\u8d34\u56fe\u7eb9\u7406\u7684\u53e6\u4e00\u4e2a\u9884\u8bbe\u3002\u5728\u9879\u76ee\u7684 Assets \u6587\u4ef6\u5939\u4e2d\uff0c\u5df2\u7ecf\u4e3a\u5176\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u7eb9\u7406\u8bbe\u7f6e\u5355\u72ec\u6587\u4ef6\u5939\u3002",source:"@site/docs/asset-workflow/presets/default-presets-by-folder.md",sourceDirName:"asset-workflow/presets",slug:"/presets/default-presets-by-folder",permalink:"/docs/presets/default-presets-by-folder",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/asset-workflow/presets/default-presets-by-folder.md",tags:[],version:"current",frontMatter:{id:"DefaultPresetsByFolder",title:"Applying default presets to Assets by folder",slug:"/presets/default-presets-by-folder"},sidebar:"tutorialSidebar",previous:{title:"\u9884\u8bbe",permalink:"/docs/presets"},next:{title:"Supporting presets",permalink:"/docs/presets/supporting-presets"}},l={},h=[],c={toc:h};function u(e){var t=e.components,s=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"applying-default-presets-to-assets-by-folder"},"Applying default presets to Assets by folder"),(0,a.kt)("p",null,"\u5bf9\u4e8e\u5927\u9879\u76ee\uff0c\u53ef\u4f7f\u7528\u591a\u4e2a\u9884\u8bbe\u6765\u5bfc\u5165\u76f8\u540c\u7c7b\u578b\u7684\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7eb9\u7406\u8d44\u6e90\uff0c\u53ef\u80fd\u5177\u6709\u7528\u4e8e\u5bfc\u5165\u9ed8\u8ba4\u7eb9\u7406\u7684\u9884\u8bbe\u4ee5\u53ca\u7528\u4e8e\u5149\u7167\u8d34\u56fe\u7eb9\u7406\u7684\u53e6\u4e00\u4e2a\u9884\u8bbe\u3002\u5728\u9879\u76ee\u7684 ",(0,a.kt)("em",{parentName:"p"},"Assets")," \u6587\u4ef6\u5939\u4e2d\uff0c\u5df2\u7ecf\u4e3a\u5176\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u7eb9\u7406\u8bbe\u7f6e\u5355\u72ec\u6587\u4ef6\u5939\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/PresetsByFolder.png",alt:"TexturesDefault \u548c TexturesLighting \u6587\u4ef6\u5939\u5404\u6709\u4e00\u4e2a\u9884\u8bbe"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"TexturesDefault")," \u548c ",(0,a.kt)("em",{parentName:"p"},"TexturesLighting")," \u6587\u4ef6\u5939\u5404\u6709\u4e00\u4e2a\u9884\u8bbe"),(0,a.kt)("p",null,"\u4ee5\u4e0b\u811a\u672c\u6839\u636e\u6dfb\u52a0\u8d44\u6e90\u7684\u6587\u4ef6\u5939\u800c\u5e94\u7528\u9884\u8bbe\u3002\u6b64\u811a\u672c\u9009\u62e9\u4e0e\u8d44\u6e90\u4f4d\u4e8e\u540c\u4e00\u6587\u4ef6\u5939\u4e2d\u7684\u9884\u8bbe\u3002\u5982\u679c\u6b64\u6587\u4ef6\u5939\u4e2d\u6ca1\u6709\u9884\u8bbe\uff0c\u5219\u8be5\u811a\u672c\u5c06\u641c\u7d22\u7236\u6587\u4ef6\u5939\u3002\u5982\u679c\u7236\u6587\u4ef6\u5939\u4e2d\u6ca1\u6709\u9884\u8bbe\uff0cUnity \u5c06\u4f7f\u7528 ",(0,a.kt)("a",{parentName:"p",href:"/docs/comp-manager-group/class-preset-manager"},"Preset")," \u7a97\u53e3\u6307\u5b9a\u7684\u9ed8\u8ba4\u9884\u8bbe\u3002"),(0,a.kt)("p",null,"\u4e3a\u4e86\u4f7f\u7528\u6b64\u811a\u672c\uff0c\u8bf7\u5728 Project \u7a97\u53e3\u4e2d\u65b0\u5efa\u540d\u4e3a ",(0,a.kt)("em",{parentName:"p"},"Editor")," \u7684\u6587\u4ef6\u5939\uff0c\u5728\u6b64\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa C# \u811a\u672c\uff0c\u7136\u540e\u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u811a\u672c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing UnityEditor;\nusing UnityEditor.Experimental;\nusing UnityEditor.Presets;\nusing UnityEngine;\nnamespace PresetsPerFolder\n{\n    /// &lt;summary&gt;\n   /// This sample class applies Presets automatically to Assets in the folder containing the Preset and any subfolders.\n   /// The code is divided into three parts that set up importer dependencies to make sure the importers of all Assets stay deterministic.\n   ///\n   /// OnPreprocessAsset:\n   /// This method goes from the root folder down to the Asset folder for each imported asset\n   /// and registers a CustomDependency to each folder in case a Preset is added/removed at a later time.\n   /// It then loads all Presets from that folder and tries to apply them to the Asset importer.\n   /// If it is applied, the method adds a direct dependency to each Preset so that the Asset can be re-imported when the Preset values are changed.\n   /// &lt;/summary&gt;\n    public class EnforcePresetPostProcessor : AssetPostprocessor\n    {\n        void OnPreprocessAsset()\n        {\n            // The  if(assetPath....)  line ensures that the asset path starts with "Assets/" so that the AssetPostprocessor is not applied to Assets in a package.\n            // The Asset extension cannot end with .cs to avoid triggering a code compilation every time a Preset is created or removed.\n            // The Asset extension cannot end with .preset so that Presets don\'t depend on themselves, which would cause an infinite import loop.\n            // There may be more exceptions to add here depending on your project.\n            if (assetPath.StartsWith("Assets/") && !assetPath.EndsWith(".cs") && !assetPath.EndsWith(".preset"))\n            {\n                var path = Path.GetDirectoryName(assetPath);\n                ApplyPresetsFromFolderRecursively(path);\n            }\n        }\n        void ApplyPresetsFromFolderRecursively(string folder)\n        {\n            // Apply Presets in order starting from the parent folder to the Asset so that the Preset closest to the Asset is applied last.\n            var parentFolder = Path.GetDirectoryName(folder);\n            if (!string.IsNullOrEmpty(parentFolder))\n                ApplyPresetsFromFolderRecursively(parentFolder);\n            // Add a dependency to the folder Preset custom key\n            // so whenever a Preset is added to or removed from this folder, the Asset is re-imported.\n            context.DependsOnCustomDependency($"PresetPostProcessor_{folder}");\n            // Find all Preset Assets in this folder. Use the System.Directory method instead of the AssetDatabase\n            // because the import may run in a separate process which prevents the AssetDatabase from performing a global search.\n            var presetPaths =\n                Directory.EnumerateFiles(folder, "*.preset", SearchOption.TopDirectoryOnly)\n                    .OrderBy(a =&gt; a);\n            foreach (var presetPath in presetPaths)\n            {\n                // Load the Preset and try to apply it to the importer.\n                var preset = AssetDatabase.LoadAssetAtPath&lt;Preset&gt;(presetPath);\n                // The script adds a Presets dependency to an Asset in two cases:\n                //1 If the Asset is imported before the Preset, the Preset will not load because it is not yet imported.\n                //Adding a dependency between the Asset and the Preset allows the Asset to be re-imported so that Unity loads\n                //the assigned Preset and can try to apply its values.\n                //2 If the Preset loads successfully, the ApplyTo method returns true if the Preset applies to this Asset\'s import settings.\n                //Adding the Preset as a dependency to the Asset ensures that any change in the Preset values will re-import the Asset using the new values.\n                if (preset == null || preset.ApplyTo(assetImporter))\n                {\n                    // Using DependsOnArtifact here because Presets are native assets and using DependsOnSourceAsset would not work.\n                    context.DependsOnArtifact(presetPath);\n                }\n            }\n        }\n        /// &lt;summary&gt;\n        /// This method with the didDomainReload argument will be called every time the project is being loaded or the code is compiled.\n        /// It is very important to set all of the hashes correctly at startup\n        /// because Unity does not apply the OnPostprocessAllAssets method to previously imported Presets\n        /// and the CustomDependencies are not saved between sessions and need to be rebuilt every time.\n        /// &lt;/summary&gt;\n        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets,\n            string[] movedFromAssetPaths, bool didDomainReload)\n        {\n            if (didDomainReload)\n            {\n                // AssetDatabase.FindAssets uses a glob filter to avoid importing all objects in the project.\n                // This glob search only looks for .preset files.\n                var allPaths = AssetDatabase.FindAssets("glob:\\" **.preset\\"")\n                    .Select(AssetDatabase.GUIDToAssetPath)\n                    .OrderBy(a =&gt; a)\n                    .ToList();\n                bool atLeastOnUpdate = false;\n                string previousPath = string.Empty;\n                Hash128 hash = new Hash128();\n                for (var index = 0; index &lt; allPaths.Count; index++)\n                {\n                    var path = allPaths[index];\n                    var folder = Path.GetDirectoryName(path);\n                    if (folder != previousPath)\n                    {\n                        // When a new folder is found, create a new CustomDependency with the Preset name and the Preset type.\n                        if (previousPath != string.Empty)\n                        {\n                            AssetDatabase.RegisterCustomDependency($"PresetPostProcessor_{previousPath}", hash);\n                            atLeastOnUpdate = true;\n                        }\n                        hash = new Hash128();\n                        previousPath = folder;\n                    }\n                    // Append both path and Preset type to make sure Assets get re-imported whenever a Preset type is changed.\n                    hash.Append(path);\n                    hash.Append(AssetDatabase.LoadAssetAtPath&lt;Preset&gt;(path).GetTargetFullTypeName());\n                }\n                // Register the last path.\n                if (previousPath != string.Empty)\n                {\n                    AssetDatabase.RegisterCustomDependency($"PresetPostProcessor_{previousPath}", hash);\n                    atLeastOnUpdate = true;\n                }\n                // Only trigger a Refresh if there is at least one dependency updated here.\n                if (atLeastOnUpdate)\n                    AssetDatabase.Refresh();\n            }\n        }\n    }\n    /// &lt;summary&gt;\n    /// InitPresetDependencies:\n    /// This method is called when the project is loaded. It finds every imported Preset in the project.\n    /// For each folder containing a Preset, create a CustomDependency from the folder name and a hash from the list of Preset names and types in the folder.\n    ///\n    /// OnAssetsModified:\n    /// Whenever a Preset is added, removed, or moved from a folder, the CustomDependency for this folder needs to be updated\n    /// so Assets that may depend on those Presets are reimported.\n    ///\n    /// TODO: Ideally each CustomDependency should also be dependent on the PresetType,\n    /// so Textures are not re-imported by adding a new FBXImporterPreset in a folder.\n    /// This makes the InitPresetDependencies and OnPostprocessAllAssets methods too complex for the purpose of this example.\n    /// Unity suggests having the CustomDependency follow the form "Preset_{presetType}_{folder}",\n    /// and the hash containing only Presets of the given presetType in that folder.\n    /// &lt;/summary&gt;\n    public class UpdateFolderPresetDependency : AssetsModifiedProcessor\n    {\n        /// &lt;summary&gt;\n        /// The OnAssetsModified method is called whenever an Asset has been changed in the project.\n        /// This methods determines if any Preset has been added, removed, or moved\n        /// and updates the CustomDependency related to the changed folder.\n        /// &lt;/summary&gt;\n        protected override void OnAssetsModified(string[] changedAssets, string[] addedAssets, string[] deletedAssets, AssetMoveInfo[] movedAssets)\n        {\n            HashSet&lt;string&gt; folders = new HashSet&lt;string&gt;();\n            foreach (var asset in changedAssets)\n            {\n                // A Preset has been changed, so the dependency for this folder must be updated in case the Preset type has been changed.\n                if (asset.EndsWith(".preset"))\n                {\n                    folders.Add(Path.GetDirectoryName(asset));\n                }\n            }\n            foreach (var asset in addedAssets)\n            {\n                // A new Preset has been added, so the dependency for this folder must be updated.\n                if (asset.EndsWith(".preset"))\n                {\n                    folders.Add(Path.GetDirectoryName(asset));\n                }\n            }\n            foreach (var asset in deletedAssets)\n            {\n                // A Preset has been removed, so the dependency for this folder must be updated.\n                if (asset.EndsWith(".preset"))\n                {\n                    folders.Add(Path.GetDirectoryName(asset));\n                }\n            }\n            foreach (var movedAsset in movedAssets)\n            {\n                // A Preset has been moved, so the dependency for the previous and new folder must be updated.\n                if (movedAsset.destinationAssetPath.EndsWith(".preset"))\n                {\n                    folders.Add(Path.GetDirectoryName(movedAsset.destinationAssetPath));\n                }\n                if (movedAsset.sourceAssetPath.EndsWith(".preset"))\n                {\n                    folders.Add(Path.GetDirectoryName(movedAsset.sourceAssetPath));\n                }\n            }\n            // Do not add a dependency update for no reason.\n            if (folders.Count != 0)\n            {\n                // The dependencies need to be updated outside of the AssetPostprocessor calls.\n                // Register the method to the next Editor update.\n                EditorApplication.delayCall += () =&gt;\n                {\n                    DelayedDependencyRegistration(folders);\n                };\n            }\n        }\n        /// &lt;summary&gt;\n        /// This method loads all Presets in each of the given folder paths\n        /// and updates the CustomDependency hash based on the Presets currently in that folder.\n        /// &lt;/summary&gt;\n        static void DelayedDependencyRegistration(HashSet&lt;string&gt; folders)\n        {\n            foreach (var folder in folders)\n            {\n                var presetPaths =\n                    AssetDatabase.FindAssets("glob:\\"** .preset\\"", new[] { folder })\n                        .Select(AssetDatabase.GUIDToAssetPath)\n                        .Where(presetPath =&gt; Path.GetDirectoryName(presetPath) == folder)\n                        .OrderBy(a =&gt; a);\n                Hash128 hash = new Hash128();\n                foreach (var presetPath in presetPaths)\n                {\n                    // Append both path and Preset type to make sure Assets get re-imported whenever a Preset type is changed.\n                    hash.Append(presetPath);\n                    hash.Append(AssetDatabase.LoadAssetAtPath&lt;Preset&gt;(presetPath).GetTargetFullTypeName());\n                }\n                AssetDatabase.RegisterCustomDependency($"PresetPostProcessor_{folder}", hash);\n            }\n            // Manually trigger a Refresh\n            // so that the AssetDatabase triggers a dependency check on the updated folder hash.\n            AssetDatabase.Refresh();\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);