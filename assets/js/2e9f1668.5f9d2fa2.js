"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53226],{3905:function(e,r,t){t.d(r,{Zo:function(){return m},kt:function(){return g}});var a=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,a,o=function(e,r){if(null==e)return{};var t,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),s=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},m=function(e){var r=s(e.components);return a.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},p=a.forwardRef((function(e,r){var t=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=s(t),g=o,f=p["".concat(i,".").concat(g)]||p[g]||u[g]||n;return t?a.createElement(f,l(l({ref:r},m),{},{components:t})):a.createElement(f,l({ref:r},m))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var n=t.length,l=new Array(n);l[0]=p;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<n;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},18137:function(e,r,t){t.r(r),t.d(r,{assets:function(){return m},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var a=t(87462),o=t(63366),n=(t(67294),t(3905)),l=["components"],c={id:"performance-garbage-collector",title:"Garbage collector overview",slug:"/performance-garbage-collector"},i="Garbage collector overview",s={unversionedId:"unity-overview/analysis/performance-memory-overview/performance-garbage-collector/performance-garbage-collector",id:"unity-overview/analysis/performance-memory-overview/performance-garbage-collector/performance-garbage-collector",title:"Garbage collector overview",description:"Unity uses a garbage collector to reclaim memory from objects that your application and Unity are no longer using. When a script tries to make an allocation on the managed heap but there isn\u2019t enough free heap memory to accommodate the allocation, Unity runs the garbage collector. When the garbage collector runs, it examines all objects in the heap, and marks for deletion any objects that your application no longer references. Unity then deletes the unreferenced objects, which frees up memory.",source:"@site/docs/unity-overview/analysis/performance-memory-overview/performance-garbage-collector/performance-garbage-collector.md",sourceDirName:"unity-overview/analysis/performance-memory-overview/performance-garbage-collector",slug:"/performance-garbage-collector",permalink:"/doc-unity-manual/docs/performance-garbage-collector",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/unity-overview/analysis/performance-memory-overview/performance-garbage-collector/performance-garbage-collector.md",tags:[],version:"current",frontMatter:{id:"performance-garbage-collector",title:"Garbage collector overview",slug:"/performance-garbage-collector"},sidebar:"tutorialSidebar",previous:{title:"Memory allocator customization",permalink:"/doc-unity-manual/docs/performance-memory-overview/memory-allocator-customization"},next:{title:"Disabling garbage collection",permalink:"/doc-unity-manual/docs/performance-garbage-collector/performance-disabling-garbage-collection"}},m={},u=[{value:"Tracking allocations",id:"tracking-allocations",level:2}],p={toc:u};function g(e){var r=e.components,t=(0,o.Z)(e,l);return(0,n.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"garbage-collector-overview"},"Garbage collector overview"),(0,n.kt)("p",null,"Unity uses a ",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals"},"garbage collector")," to reclaim memory from objects that your application and Unity are no longer using. When a script tries to make an allocation on the managed heap but there isn\u2019t enough free heap memory to accommodate the allocation, Unity runs the garbage collector. When the garbage collector runs, it examines all objects in ",(0,n.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/performance-memory-overview/performance-managed-memory#managed-heap-overview"},"the heap"),", and marks for deletion any objects that your application no longer references. Unity then deletes the unreferenced objects, which frees up memory."),(0,n.kt)("p",null,"The garbage collector handles subsequent requests in the same way until there is no free area large enough to allocate the required block size. In this situation, it\u2019s unlikely that all allocated memory is still in use. Unity\u2019s scripting backends can only access a reference item on the heap as long as there are still reference variables that can locate it. If all references to a memory block are missing (if the reference variables have been reassigned or if they\u2019re local variables that are now out of scope) then the garbage collector can reallocate the memory it occupied."),(0,n.kt)("p",null,"To determine which heap blocks are no longer in use, the garbage collector searches through all active reference variables and marks the blocks of memory that they refer to as \u201clive.\u201d At the end of the search, the garbage collector considers any space between the \u201clive\u201d blocks empty and marks them for use for subsequent allocations. The process of locating and freeing up unused memory is called  ",(0,n.kt)("strong",{parentName:"p"},"garbage collection"),"  (GC)."),(0,n.kt)("p",null," ",(0,n.kt)("strong",{parentName:"p"},"Note:"),"  The garbage collector works differently in WebGL. For more information, see ",(0,n.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/webgl-develop/webgl-memory"},"Garbage collection considerations"),"."),(0,n.kt)("p",null,"In Unity, the garbage collector has the following modes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/doc-unity-manual/docs/performance-garbage-collector/performance-incremental-garbage-collection"},"Incremental garbage collection"),": Enabled by default ( ",(0,n.kt)("strong",{parentName:"li"},"Project Settings ",">"," Player ",">"," Configuration")," ), this mode spreads out the process of garbage collection over multiple frames."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/doc-unity-manual/docs/performance-garbage-collector/performance-incremental-garbage-collection#disabling-incremental-garbage-collection"},"Incremental garbage collection disabled"),": If you disable the  ",(0,n.kt)("strong",{parentName:"li"},"Incremental GC"),"  Player Setting, the garbage collector stops running your application to inspect and process objects on the heap."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/doc-unity-manual/docs/performance-garbage-collector/performance-disabling-garbage-collection"},"Disable automatic garbage collection"),": Use the ",(0,n.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Scripting.GarbageCollector.GCMode.html"},"GarbageCollector.GCMode")," API to take full control of when Unity should run the garbage collector.")),(0,n.kt)("h2",{id:"tracking-allocations"},"Tracking allocations"),(0,n.kt)("p",null,"Unity has the following tools to keep track of memory allocations:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/doc-unity-manual/docs/profiler-window/profiler-cpu"},"Unity Profiler\u2019s CPU Usage module"),": Provides details of the  ",(0,n.kt)("strong",{parentName:"li"},"GC Alloc"),"  per frame"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/doc-unity-manual/docs/profiler-window/profiler-memory"},"Unity Profiler\u2019s Memory module"),": Provides high-level memory usage frame by frame"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.memoryprofiler@latest"},"The Memory Profiler package"),": A separate Unity package which provides detailed information about memory usage during specific frames in your application")),(0,n.kt)("p",null,"In the CPU Usage module, the ",(0,n.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/profiler-window/profiler-cpu#hierarchy-%E5%92%8C-raw-hierarchy-%E8%A7%86%E5%9B%BE"},"Hierarchy view")," contains a  ",(0,n.kt)("strong",{parentName:"p"},"GC Alloc"),"  column. This column displays the number of bytes that Unity allocated on the managed heap in a specific frame. It also displays the amount of memory that the garbage collector managed, and it includes memory that Unity might have allocated and reused in subsequent frames. This means that the sum of the GC Alloc over all frames doesn\u2019t total how much the managed memory grew in that time."),(0,n.kt)("p",null,"To get the most accurate information, you should always profile your application on a development build on the target platform or device you want to build to. The Unity Editor works in a different way to a build, and this affects the profiling data; for example, the ",(0,n.kt)("inlineCode",{parentName:"p"},"GetComponent")," method always allocates memory when it\u2019s executed in the Editor, but not in a built project."),(0,n.kt)("p",null,"You can also use the ",(0,n.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/profiler-window/profiler-cpu#%E8%B0%83%E7%94%A8%E6%A0%88"},"Call Stacks mode")," in the Profiler to determine which method the allocations happen in. You can enable the full call stack traces for  ",(0,n.kt)("strong",{parentName:"p"},"GC.Alloc"),"  samples, which then helps you determine where and when the garbage collector ran."))}g.isMDXComponent=!0}}]);