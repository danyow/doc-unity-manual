"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29943],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),c=i,h=p["".concat(s,".").concat(c)]||p[c]||d[c]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},11319:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],l={id:"UIE-Transitioning-From-UGUI",title:"Migrate from Unity UI (UGUI) to UI Toolkit",slug:"/uie-migration-guides/uie-transitioning-from-ugui"},s="Migrate from Unity UI (UGUI) to UI Toolkit",u={unversionedId:"uitoolkits/uielements/uie-migration-guides/UIE-Transitioning-From-UGUI",id:"uitoolkits/uielements/uie-migration-guides/UIE-Transitioning-From-UGUI",title:"Migrate from Unity UI (UGUI) to UI Toolkit",description:"This page guides developers with experience in Unity UI (UGUI) to transition to the new UI Toolkit system. It explores the similarities and differences between UGUI and the UI Toolkit.",source:"@site/docs/uitoolkits/uielements/uie-migration-guides/uie-transitioning-from-ugui.md",sourceDirName:"uitoolkits/uielements/uie-migration-guides",slug:"/uie-migration-guides/uie-transitioning-from-ugui",permalink:"/doc-unity-manual/docs/uie-migration-guides/uie-transitioning-from-ugui",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uitoolkits/uielements/uie-migration-guides/uie-transitioning-from-ugui.md",tags:[],version:"current",frontMatter:{id:"UIE-Transitioning-From-UGUI",title:"Migrate from Unity UI (UGUI) to UI Toolkit",slug:"/uie-migration-guides/uie-transitioning-from-ugui"},sidebar:"tutorialSidebar",previous:{title:"Migrate from Immediate Mode GUI (IMGUI) to UI Toolkit",permalink:"/doc-unity-manual/docs/uie-migration-guides/uie-imgui-migration"},next:{title:"Unity \u6837\u5f0f\u8868 (USS)",permalink:"/doc-unity-manual/docs/uie-uss"}},m={},d=[{value:"UI \u5c42\u7ea7\u7ed3\u6784",id:"ui-\u5c42\u7ea7\u7ed3\u6784",level:2},{value:"Key differences",id:"key-differences",level:2},{value:"Canvas versus UIDocument",id:"canvas-versus-uidocument",level:3},{value:"GameObject Components versus Visual Elements",id:"gameobject-components-versus-visual-elements",level:2},{value:"\u8bbf\u95ee UI \u5143\u7d20",id:"\u8bbf\u95ee-ui-\u5143\u7d20",level:3},{value:"\u521b\u5efa UI",id:"\u521b\u5efa-ui",level:2},{value:"\u9884\u5236\u4ef6",id:"\u9884\u5236\u4ef6",level:3},{value:"UI Layout",id:"ui-layout",level:3},{value:"\u6e32\u67d3\u987a\u5e8f",id:"\u6e32\u67d3\u987a\u5e8f",level:3},{value:"\u4e8b\u4ef6",id:"\u4e8b\u4ef6",level:2}],p={toc:d};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"migrate-from-unity-ui-ugui-to-ui-toolkit"},"Migrate from Unity UI (UGUI) to UI Toolkit"),(0,o.kt)("p",null,"This page guides developers with experience in Unity UI (UGUI) to transition to the new UI Toolkit system. It explores the similarities and differences between UGUI and the UI Toolkit."),(0,o.kt)("p",null,"As UGUI is a runtime-only UI system, this page focuses on runtime UI. UI Toolkit can create both runtime and Editor UI. This guide applies to both use cases for UI Toolkit."),(0,o.kt)("h2",{id:"ui-\u5c42\u7ea7\u7ed3\u6784"},"UI \u5c42\u7ea7\u7ed3\u6784"),(0,o.kt)("p",null,"Both UGUI and UI Toolkit build and maintain the UI inside a hierarchy tree structure. In UGUI, all elements in this hierarchy are visible as individual GameObjects in the hierarchy view panel. In UI Toolkit, visual elements organize into a  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/Manual/UIE_VisualTree.html"},"Visual Tree"))," . The Visual Tree isn\u2019t visible in the panel."),(0,o.kt)("p",null,"To view and debug the UI hierarchy in UI Toolkit, you can use the UI Debugger. You can find UI Debugger in the Editor toolbar, under  ",(0,o.kt)("strong",{parentName:"p"},"Window ",">"," UI Toolkit ",">"," Debugger")," ."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIEDebugger.png",alt:"UI \u8c03\u8bd5\u5668"})),(0,o.kt)("p",null,"UI \u8c03\u8bd5\u5668"),(0,o.kt)("h2",{id:"key-differences"},"Key differences"),(0,o.kt)("h3",{id:"canvas-versus-uidocument"},"Canvas versus UIDocument"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas")," component in UGUI is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component in UI Toolkit. Both are MonoBehaviours that attach to GameObjects."),(0,o.kt)("p",null,"In UGUI, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas")," component sits at the root of the UI tree. It works with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas Scaler")," component to determine the sort order, rendering, and scaling mode of the UI underneath."),(0,o.kt)("p",null,"In UI Toolkit, the ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component contains a reference to a ",(0,o.kt)("inlineCode",{parentName:"p"},"PanelSettings")," object. The ",(0,o.kt)("inlineCode",{parentName:"p"},"PanelSettings")," contains the rendering settings for the UI, including the scale mode and the sort order. Multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," components can point to the same ",(0,o.kt)("inlineCode",{parentName:"p"},"PanelSettings")," object, which optimizes performance when using multiple UI screens in the same scene."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIEPanelSettings.png",alt:"\u9762\u677f\u8bbe\u7f6e"})),(0,o.kt)("p",null,"\u9762\u677f\u8bbe\u7f6e"),(0,o.kt)("p",null,"In UGUI, the UI tree hierarchy sits underneath the GameObject holding the ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas")," component. In UI Toolkit, the ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component holds a reference to the root element of the Visual Tree."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component also contains a reference to the UXML file that defines the UI layout from which the Visual Tree is built at runtime. See ",(0,o.kt)("a",{parentName:"p",href:"#creating-ui"},"Creating UI")," section for more information."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"\u6ce8\u610f\uff1a")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"For Editor UI, no ",(0,o.kt)("inlineCode",{parentName:"td"},"UIDocument")," component is needed. You can derive your custom class from ",(0,o.kt)("inlineCode",{parentName:"td"},"EditorWindow"),", then implement ",(0,o.kt)("inlineCode",{parentName:"td"},"CreateGUI()"),". For a practical example, see the guide on ",(0,o.kt)("a",{parentName:"td",href:"/doc-unity-manual/docs/uie-examples/uie-how-to-create-editor-window"},"Creating custom Editor windows"),".")))),(0,o.kt)("h2",{id:"gameobject-components-versus-visual-elements"},"GameObject Components versus Visual Elements"),(0,o.kt)("p",null,"UI Toolkit refers to UI elements as controls or visual elements. Examples of UI elements are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Controls"),(0,o.kt)("li",{parentName:"ul"},"Buttons\uff08\u6309\u94ae\uff09"),(0,o.kt)("li",{parentName:"ul"},"Text labels")),(0,o.kt)("p",null,"UGUI builds the UI hierarchy from GameObjects. Adding new UI elements requires adding new GameObjects to the hierarchy. The individual controls are implemented as ",(0,o.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," components."),(0,o.kt)("p",null,"In UI Toolkit, the Visual Tree is virtual and doesn\u2019t use GameObjects. You can no longer build or view the UI hierarchy in the hierarchy view, but it removes the overhead of using a GameObject for each UI element."),(0,o.kt)("p",null,"In UGUI, UI elements derive (directly or indirectly) from the ",(0,o.kt)("inlineCode",{parentName:"p"},"UIBehavior")," base class. Similarly, in UI Toolkit all UI elements derive from a base class called ",(0,o.kt)("inlineCode",{parentName:"p"},"VisualElement"),". The key difference is the ",(0,o.kt)("inlineCode",{parentName:"p"},"VisualElement")," class doesn\u2019t derive from ",(0,o.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),". You can not attach visual elements to GameObjects."),(0,o.kt)("p",null,"Working with UI Toolkit controls in script is similar to working with UGUI controls. The following table shows common script interactions with UI controls in UGUI, and their UI Toolkit counterparts."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"\u64cd\u4f5c")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UGUI")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UI \u5de5\u5177\u5305")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u5c06\u6587\u672c\u5199\u5165\u6807\u7b7e"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'m_Label.text = "My Text";')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'m_Label.text = "My Text";'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u8bfb\u53d6\u5207\u6362\u72b6\u6001"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"bool isToggleChecked = m_Toggle.isOn;")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"bool isToggleChecked = m_Toggle.value;"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u4e3a\u6309\u94ae\u6307\u5b9a\u56de\u8c03"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"m_Button.onClick.AddListener(MyCallbackFunc);")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"m_Button.clicked += MyCallbackFunc_1;"),(0,o.kt)("br",null),"or",(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"m_Button.RegisterCallback&lt;ClickEvent&gt;(MyCallbackFunc_2);"))))),(0,o.kt)("p",null,"\u8981\u4e86\u89e3\u6709\u5173\u63a7\u4ef6\u53ca\u5176\u5c5e\u6027\u548c\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/doc-unity-manual/docs/uie-controls"},"\u63a7\u4ef6\u6982\u8ff0"))," \u9875\u9762\u3002"),(0,o.kt)("h3",{id:"\u8bbf\u95ee-ui-\u5143\u7d20"},"\u8bbf\u95ee UI \u5143\u7d20"),(0,o.kt)("p",null,"In UGUI, there are two ways scripts can access UI elements:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Assigning a reference to the UI components in the Editor."),(0,o.kt)("li",{parentName:"ul"},"Finding the components in the hierarchy using helper functions such as ",(0,o.kt)("inlineCode",{parentName:"li"},"GetComponentInChildren&lt;T&gt;()"),".")),(0,o.kt)("p",null,"Since there are no GameObject or components in UI Toolkit, you can\u2019t directly assign references to a control in the Editor. They must be resolved at runtime using a query function. Instead, access the Visual Tree via the ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),", so you can assign it as a reference and make it part of a Prefab. The ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component holds a reference to the root visual element. From the root, scripts can find child elements by type or by name, similar to UGUI."),(0,o.kt)("p",null,"The table below shows a direct comparison of accessing UI controls in Unity UI and UI Toolkit"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"\u64cd\u4f5c")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UGUI")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UI \u5de5\u5177\u5305")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6309\u540d\u79f0\u67e5\u627e UI \u5143\u7d20"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'transform.FindChild("childName");')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'rootVisualElement.Query("childName");'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6309\u7c7b\u578b\u67e5\u627e UI \u5143\u7d20"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"transform.GetComponentInChildren&lt;Button&gt;();")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"rootVisualElement.Query&lt;Button&gt;();"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u5728\u7f16\u8f91\u5668\u4e2d\u76f4\u63a5\u6307\u5b9a\u5f15\u7528"),(0,o.kt)("td",{parentName:"tr",align:null},"Possible"),(0,o.kt)("td",{parentName:"tr",align:null},"Not possible")))),(0,o.kt)("h2",{id:"\u521b\u5efa-ui"},"\u521b\u5efa UI"),(0,o.kt)("p",null,"One of the biggest differences between UGUI and UI Toolkit is the creation of user interfaces."),(0,o.kt)("p",null,"Both UGUI and UI Toolkit allow you to visually build the UI and preview it in the Editor. In UGUI, the UI is then saved inside a Prefab, along with any logic scripts attached to individual UI controls."),(0,o.kt)("p",null,"In UI Toolkit, The UI layout is created in UI Builder, then saved as one or multiple UXML files. At runtime, ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," components load the UXML files that the Visual Tree assembles in memory."),(0,o.kt)("p",null,"For a method similar to UGUI, you can create UI controls directly from a script, then add them to a Visual Tree at runtime."),(0,o.kt)("h3",{id:"\u9884\u5236\u4ef6"},"\u9884\u5236\u4ef6"),(0,o.kt)("p",null,"UGUI uses GameObjects for individual UI controls and Prefabs that both contain visuals and logic. UI Toolkit takes a different approach to reusability, as it separates logic and layout. You can create reusable UI components through UXML and custom controls."),(0,o.kt)("p",null,"To create a similar template to a Prefab in UI Toolkit:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a UXML file for the partial UI element."),(0,o.kt)("li",{parentName:"ol"},"Create a GameObject with a ",(0,o.kt)("inlineCode",{parentName:"li"},"UIDocument")," component."),(0,o.kt)("li",{parentName:"ol"},"Reference the UXML file in the GameObject."),(0,o.kt)("li",{parentName:"ol"},"Add a script to handle the UI component logic to the same GameObject."),(0,o.kt)("li",{parentName:"ol"},"Save the GameObject as a Prefab.")),(0,o.kt)("h3",{id:"ui-layout"},"UI Layout"),(0,o.kt)("p",null,"Arranging individual UI elements on screen in UGUI is a manual process. By default, UI controls are free floating and are only affected by their direct parent. Other UI controls under the same parent don\u2019t affect their siblings positions or sizes. Pivots and anchors control the position and size of an element."),(0,o.kt)("p",null,"The UI Toolkit layout system is influenced by web design, and based on automatic layout generation. The automatic layout system affects all elements by default, and an element\u2019s size and position will affect other elements under the same parent."),(0,o.kt)("p",null,"The default behavior in UI Toolkit is comparable to placing all elements inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"VerticalLayoutGroup")," in UGUI, and adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"LayoutElement")," component to each."),(0,o.kt)("p",null,"You can disable automatic layout generation by changing the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.IStyle.html"},"IStyle")," ",(0,o.kt)("inlineCode",{parentName:"p"},"position")," property of the visual element. All visual elements have this property. See  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/doc-unity-manual/docs/uielements/uie-visual-tree"},"Visual Tree")),"  for a code sample."),(0,o.kt)("p",null,"UI Toolkit has no direct equivalents for anchoring and pivots of UI elements, due to the fundamental layout differences compared to UGUI."),(0,o.kt)("p",null,"The size and position of an element is controlled by the layout engine. To learn more about this, please see the  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/doc-unity-manual/docs/uielements/uie-layout-engine"},"Layout Engine")),"  documentation, and the  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/doc-unity-manual/docs/uielements/uie-visual-tree#%E5%9D%90%E6%A0%87%E5%92%8C%E4%BD%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F"},"Positioning")),"  section of the Visual Tree page."),(0,o.kt)("h3",{id:"\u6e32\u67d3\u987a\u5e8f"},"\u6e32\u67d3\u987a\u5e8f"),(0,o.kt)("p",null,"In UGUI, the order of the GameObjects in the hierarchy determines the rendering order. Objects further down in the hierarchy render last and appear on top. In a scene with multiple Canvases, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sort Order")," on the root ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas")," component determines the render order of the individual UI trees."),(0,o.kt)("p",null,"The render order in a Visual Tree in UI Toolkit operates the same way. Parent elements render before their children, and children render from the first to the last, so that the last appears on top. IUn a scene with multiple UI Documents, the render order is determined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sort Order")," setting on the root ",(0,o.kt)("inlineCode",{parentName:"p"},"UIDocument")," component."),(0,o.kt)("p",null,"To change the rendering order of an element in UGUI, such as making an element appear on top, you can call the sibling functions on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Transform")," component of the GameObject. The ",(0,o.kt)("inlineCode",{parentName:"p"},"VisualElement")," class offers comparable functions to control the rendering order. As all UI Toolkit controls derive from this class, all controls have access to this function."),(0,o.kt)("p",null,"The table below shows the UGUI functions to control render order and the equivalent functions in UI Toolkit:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"\u64cd\u4f5c")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UGUI")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"UI \u5de5\u5177\u5305")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u4f7f\u5143\u7d20\u6e32\u67d3\u5728\u6240\u6709\u5176\u4ed6\u540c\u7ea7\u5143\u7d20\u4e4b\u4e0b"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"transform.SetAsFirstSibling();")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"myVisualElement.SendToBack();"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u4f7f\u5143\u7d20\u6e32\u67d3\u5728\u6240\u6709\u5176\u4ed6\u540c\u7ea7\u5143\u7d20\u4e4b\u4e0a"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"transform.SetAsLastSibling();")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"myVisualElement.BringToFront();"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u624b\u52a8\u63a7\u5236\u5143\u7d20\u76f8\u5bf9\u4e8e\u5176\u540c\u7ea7\u5143\u7d20\u7684\u6e32\u67d3\u987a\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"transform.SetSiblingIndex(newIndex);")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"myVisualElement.PlaceBehind(sibling);"),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"myVisualElement.PlaceInFront(sibling);"))))),(0,o.kt)("h2",{id:"\u4e8b\u4ef6"},"\u4e8b\u4ef6"),(0,o.kt)("p",null,"Just like in UGUI, user interactions in UI Toolkit trigger events. The code can subscribe to receive a callback on events, such as pressing a button or moving a slider."),(0,o.kt)("p",null,"In UGUI, all UI elements are based on MonoBehaviour, and can expose their events in the Editor. This allows to set up logic with other GameObjects, for example to hide or unhide other UI elements, or to assign callback functions."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-ugui-button-callback.png",alt:"UGUI \u6309\u94ae OnClick Inspector"})),(0,o.kt)("p",null,"UGUI \u6309\u94ae OnClick Inspector"),(0,o.kt)("p",null,"In UI Toolkit, logic and UI layout are stored separately. Callbacks can no longer be set up directly on GameObjects or stored in Prefabs. You must set up all callbacks at runtime, and handle them via scripting."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Button playButton = new Button("Play");\nplayButton.RegisterCallback&lt;ClickEvent&gt;(OnPlayButtonPressed);\n...\nprivate void OnPlayButtonPressed(ClickEvent evt)\n{\n  // Handle button press\n}\n')),(0,o.kt)("p",null,"The event dispatching system in UI Toolkit differs from events in UGUI. Depending on the event type, events aren\u2019t just sent to the target UI control, but also to all the parent controls."),(0,o.kt)("p",null,"To learn more about this, see  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/doc-unity-manual/docs/uie-events/uie-events-dispatching"},"Events Dispatching"))," ."))}c.isMDXComponent=!0}}]);