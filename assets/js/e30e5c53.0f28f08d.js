"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42759],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),g=p(n),d=o,h=g["".concat(s,".").concat(d)]||g[d]||m[d]||a;return n?i.createElement(h,l(l({ref:t},u),{},{components:n})):i.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=g;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},97619:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return m}});var i=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],r={id:"UIB-styling-ui-positioning",title:"Positioning elements",slug:"/uib-styling-ui/uib-styling-ui-positioning"},s="Positioning elements",p={unversionedId:"uitoolkits/uielements/uibuilder/uib-styling-ui/UIB-styling-ui-positioning",id:"uitoolkits/uielements/uibuilder/uib-styling-ui/UIB-styling-ui-positioning",title:"Positioning elements",description:"Relative position and flexbox",source:"@site/docs/uitoolkits/uielements/uibuilder/uib-styling-ui/uib-styling-ui-positioning.md",sourceDirName:"uitoolkits/uielements/uibuilder/uib-styling-ui",slug:"/uib-styling-ui/uib-styling-ui-positioning",permalink:"/docs/uib-styling-ui/uib-styling-ui-positioning",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uitoolkits/uielements/uibuilder/uib-styling-ui/uib-styling-ui-positioning.md",tags:[],version:"current",frontMatter:{id:"UIB-styling-ui-positioning",title:"Positioning elements",slug:"/uib-styling-ui/uib-styling-ui-positioning"},sidebar:"tutorialSidebar",previous:{title:"Creating and managing StyleSheets (USS)",permalink:"/docs/uib-styling-ui/uib-styling-ui-creating-uss"},next:{title:"Styling individual inline elements",permalink:"/docs/uib-styling-ui/uib-styling-ui-styling-individual"}},u={},m=[{value:"Relative position and flexbox",id:"relative-position-and-flexbox",level:2},{value:"Absolute position",id:"absolute-position",level:2},{value:"Using both Relative and Absolute",id:"using-both-relative-and-absolute",level:2}],g={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"positioning-elements"},"Positioning elements"),(0,a.kt)("h2",{id:"relative-position-and-flexbox"},"Relative position and flexbox"),(0,a.kt)("p",null,"UI Toolkit uses a modified version of Yoga, an implementation of the Flexbox ",(0,a.kt)("a",{parentName:"p",href:"/docs/uielements/uie-layout-engine"},"layout engine"),". Flexbox is a common CSS layout engine. Some main style properties are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Flex ",">"," Direction"),"  (",(0,a.kt)("inlineCode",{parentName:"li"},"flex-direction")," in USS): Set the layout direction of which elements, or the  ",(0,a.kt)("strong",{parentName:"li"},"main-axis")," . The default is ",(0,a.kt)("inlineCode",{parentName:"li"},"column")," and that means that, without any other overrides, the child element under a parent element with this style property will appear above the second child element in a column."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Flex ",">"," Grow"),"  (",(0,a.kt)("inlineCode",{parentName:"li"},"flex-grow")," in USS): This property defines how an element should grow in the  ",(0,a.kt)("strong",{parentName:"li"},"main-axis")," . It\u2019s a ratio that\u2019s shared with all other siblings of the same parent. This property is useful when trying make an element stretch to take up the entire size of its parents (minus any siblings). To do this, set the  ",(0,a.kt)("strong",{parentName:"li"},"Flex ",">"," Grow"),"  value to ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),". If you have two siblings with ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-grow")," set to ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", they will each take 50% of the parent\u2019s available size along the  ",(0,a.kt)("strong",{parentName:"li"},"main-axis")," ."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Align ",">"," Align Items"),"  (",(0,a.kt)("inlineCode",{parentName:"li"},"align-items")," in USS): This property defines the alignment of elements in the  ",(0,a.kt)("strong",{parentName:"li"},"cross-axis")," , or the perpendicular axis to the  ",(0,a.kt)("strong",{parentName:"li"},"main-axis")," . For example, if you have two Buttons in a ",(0,a.kt)("inlineCode",{parentName:"li"},"VisualElement")," that has ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-direction: column")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"align-items: flex-end")," set, the two Buttons will squish against the container\u2019s right edge. The options for ",(0,a.kt)("inlineCode",{parentName:"li"},"align-items")," have names like ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-start")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-end")," because they depend on the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-direction"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Align ",">"," Justify Content"),"  (",(0,a.kt)("inlineCode",{parentName:"li"},"justify-content")," in USS): This property defines the alignment of elements in the  ",(0,a.kt)("strong",{parentName:"li"},"main-axis")," . For example, if you have two Buttons in a ",(0,a.kt)("inlineCode",{parentName:"li"},"VisualElement")," that has ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-direction: column")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"align-items: flex-end")," set, the two Buttons squish against the container\u2019s bottom edge. The options for ",(0,a.kt)("inlineCode",{parentName:"li"},"justify-content")," are named like ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-start")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-end")," because they depend on the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"flex-direction"),".")),(0,a.kt)("p",null,"If the selected element has child elements, you can toggle flex-related style properties in the  ",(0,a.kt)("strong",{parentName:"p"},"Viewport"),"  using toggles in the header. The image below shows the options available for the #menu element:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/FlexPropertiesInCanvas.png",alt:"FlexPropertiesInCanvas"})),(0,a.kt)("p",null,"FlexPropertiesInCanvas"),(0,a.kt)("p",null,"It\u2019s recommended to learn how Flexbox works. See the ",(0,a.kt)("a",{parentName:"p",href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/"},"Flexbox guide")," for more information."),(0,a.kt)("p",null,"You can create complex dynamic layouts by using a combination of the above Flexbox style properties and a hierarchy of ",(0,a.kt)("inlineCode",{parentName:"p"},"VisualElement"),"s. Here\u2019s an example of a layout that anchors a ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," on the bottom-right edge of the screen:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/BottomRightCornerButtonLayout.png",alt:"BottomRightCornerButtonLayout"})),(0,a.kt)("p",null,"BottomRightCornerButtonLayout"),(0,a.kt)("p",null,"The UXML for this layout, showing the inline styles set on each container ",(0,a.kt)("inlineCode",{parentName:"p"},"VisualElement"),", is below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements"&gt;\n    &lt;ui:VisualElement name="screen-is-blue" style="flex-grow: 1; justify-content: flex-end; background-color: blue;"&gt;\n        &lt;ui:VisualElement name="toolbar-is-orange" style="align-items: flex-end; background-color: orange;"&gt;\n            &lt;ui:Button text="Button" display-tooltip-when-elided="true" /&gt;\n        &lt;/ui:VisualElement&gt;\n    &lt;/ui:VisualElement&gt;\n&lt;/ui:UXML&gt;\n')),(0,a.kt)("p",null,"The containers are colored to reveal their shape. You can use nested ",(0,a.kt)("inlineCode",{parentName:"p"},"VisualElement")," containers to achieve any dynamic layout without resorting to explicitly setting the position and size of each element. This keeps the layout dynamic and automatically adjusts to the larger container changing size, like the screen changing size."),(0,a.kt)("h2",{id:"absolute-position"},"Absolute position"),(0,a.kt)("p",null,"UI Builder also exposes  ",(0,a.kt)("strong",{parentName:"p"},"Position"),"  style properties. To use the  ",(0,a.kt)("strong",{parentName:"p"},"Position"),"  style properties you must set the  ",(0,a.kt)("strong",{parentName:"p"},"Position ",">"," Position"),"  type to  ",(0,a.kt)("strong",{parentName:"p"},"Absolute")," . This  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  mode makes an element invisible to the default Flexbox-based layout engine. It\u2019s as if it no longer takes any space.  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position elements will appear on top of any siblings that are still using  ",(0,a.kt)("strong",{parentName:"p"},"Relative"),"  position."),(0,a.kt)("p",null,"It\u2019s discouraged to use  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position mode, as it bypasses the built-in layout engine in UI Toolkit. It might also lead to high-maintenance UI where changing the overall layout would require manually updating individual elements."),(0,a.kt)("p",null,"While using  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position, you can use the  ",(0,a.kt)("strong",{parentName:"p"},"Position ",">"," Left")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Top")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Right")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Bottom"),"  style properties to offset and size the element from the respective edges of its parent. This doesn\u2019t sett absolute coordinates on the screen but sets offsets relative to the parent element. You can still use  ",(0,a.kt)("strong",{parentName:"p"},"Relative"),"  mode to position the parent element. If you set both a  ",(0,a.kt)("strong",{parentName:"p"},"Left"),"  offset and a  ",(0,a.kt)("strong",{parentName:"p"},"Right"),"  offset, the  ",(0,a.kt)("strong",{parentName:"p"},"Width"),"  style property of the element is ignored and the computed width will now come from the following formula:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"element-computed-width = parent-width - left-offset - right-offset\n")),(0,a.kt)("p",null," ",(0,a.kt)("strong",{parentName:"p"},"Left")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Top")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Right")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Bottom"),"  can also be interpreted as anchors. For example, you can anchor a ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," on the bottom-right of the screen:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/BottomRightCornerButtonAbsolute.png",alt:"BottomRightCornerButtonAbsolute"})),(0,a.kt)("p",null,"BottomRightCornerButtonAbsolute"),(0,a.kt)("p",null,"The UXML below displays the inline styles:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements"&gt;\n    &lt;ui:Button text="Button" style="position: absolute; right: 0; bottom: 0;" /&gt;\n&lt;/ui:UXML&gt;\n')),(0,a.kt)("p",null,"With positioning, there is a difference between having  ",(0,a.kt)("strong",{parentName:"p"},"Left"),"  set to ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and having  ",(0,a.kt)("strong",{parentName:"p"},"Left"),"  unset:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Left set to 0")," means set an offset of 0."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Left unset")," doesn\u2019t set any offset and lets other style properties define the width or height of the element.")),(0,a.kt)("p",null,"You can also modify these offset style properties directly in the  ",(0,a.kt)("strong",{parentName:"p"},"Canvas"),"  via additional resize handles on each edge and corner of the element\u2019s blue selection border. It\u2019s important to differentiate between what\u2019s set and what\u2019s unset, so the  ",(0,a.kt)("strong",{parentName:"p"},"Canvas"),"  also includes \u201canchor\u201d toggles as orange squares off each side of the element. The  ",(0,a.kt)("strong",{parentName:"p"},"Canvas"),"  handles will adjust which style properties are set when resizing the element visually, depending on which \u201canchors\u201d are set. For example, say you are resizing the element in the  ",(0,a.kt)("strong",{parentName:"p"},"Canvas"),"  via its right-border handle:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you set both  ",(0,a.kt)("strong",{parentName:"li"},"Left"),"  and  ",(0,a.kt)("strong",{parentName:"li"},"Right"),"  properties, the handle will update the  ",(0,a.kt)("strong",{parentName:"li"},"Right"),"  property."),(0,a.kt)("li",{parentName:"ul"},"If you set  ",(0,a.kt)("strong",{parentName:"li"},"Left"),"  but not  ",(0,a.kt)("strong",{parentName:"li"},"Right")," , the handle will update the  ",(0,a.kt)("strong",{parentName:"li"},"Width"),"  property.")),(0,a.kt)("h2",{id:"using-both-relative-and-absolute"},"Using both Relative and Absolute"),(0,a.kt)("p",null,"One of the legitimate use cases for  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position mode is for overlays. It\u2019s useful to overlay some complex UI on top of other complex UI, such as a popup or a dropdown. You can use  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position only for the overlay container itself, while continuing to use  ",(0,a.kt)("strong",{parentName:"p"},"Relative"),"  mode inside the overlay. Here\u2019s an example of a simple centered popup:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/AbsolutePositionOverlayWithPopup.png",alt:"AbsolutePositionOverlayWithPopup"})," And here\u2019s the UXML for your reference:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements"&gt;\n    &lt;ui:VisualElement name="complex-ui-screen"&gt;\n        &lt;ui:Toggle label="Toggle" /&gt;\n        &lt;ui:MinMaxSlider picking-mode="Ignore" label="Min/Max Slider" min-value="10" max-value="12" low-limit="-10" high-limit="40" /&gt;\n        &lt;ui:Label text="Label" /&gt;\n        &lt;ui:Button text="Button" /&gt;\n        &lt;ui:Button text="Button" /&gt;\n    &lt;/ui:VisualElement&gt;\n    &lt;ui:VisualElement name="overlay" style="position: absolute; left: 0; top: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.71); align-items: center; justify-content: center;"&gt;\n        &lt;ui:VisualElement name="popup" style="background-color: rgba(70, 70, 70, 255);"&gt;\n            &lt;ui:Label text="Exit?" name="message" /&gt;\n            &lt;ui:Button text="Ok" name="ok-button" style="width: 108.3333px;" /&gt;\n        &lt;/ui:VisualElement&gt;\n    &lt;/ui:VisualElement&gt;\n&lt;/ui:UXML&gt;\n')),(0,a.kt)("p",null,"The example above highlights the use of  ",(0,a.kt)("strong",{parentName:"p"},"Absolute"),"  position. Set all  ",(0,a.kt)("strong",{parentName:"p"},"Position ",">"," Left")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Top")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Right")," ,  ",(0,a.kt)("strong",{parentName:"p"},"Bottom"),"  to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", so the position is ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," pixels away from the edges of the screen. This makes the ",(0,a.kt)("inlineCode",{parentName:"p"},"#overlay")," element overlap the ",(0,a.kt)("inlineCode",{parentName:"p"},"#complex-ui-screen")," container element. You can also set a semi-transparent background to the ",(0,a.kt)("inlineCode",{parentName:"p"},"#overlay")," element to make the other UI appear darkened. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"#overlay")," to set  ",(0,a.kt)("strong",{parentName:"p"},"Relative"),"  position to center our ",(0,a.kt)("inlineCode",{parentName:"p"},"#popup")," container ",(0,a.kt)("inlineCode",{parentName:"p"},"VisualElement"),"."))}d.isMDXComponent=!0}}]);