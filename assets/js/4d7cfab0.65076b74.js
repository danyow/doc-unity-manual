"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[26351],{3905:function(e,n,a){a.d(n,{Zo:function(){return o},kt:function(){return f}});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},o=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),c=s(a),f=r,h=c["".concat(p,".").concat(f)]||c[f]||d[f]||i;return a?t.createElement(h,l(l({ref:n},o),{},{components:a})):t.createElement(h,l({ref:n},o))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:r,l[1]=u;for(var s=2;s<i;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},46873:function(e,n,a){a.r(n),a.d(n,{assets:function(){return o},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return d}});var t=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],u={id:"SL-SurfaceShaderLightingExamples",title:"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b",slug:"/sl-surface-shaders/sl-surface-shader-lighting-examples"},p="\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b",s={unversionedId:"graphics/shaders/shader-writing/sl-surface-shaders/SL-SurfaceShaderLightingExamples",id:"graphics/shaders/shader-writing/sl-surface-shaders/SL-SurfaceShaderLightingExamples",title:"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b",description:"\u672c\u9875\u63d0\u4f9b\u4e86\u8868\u9762\u7740\u8272\u5668\u4e2d\u7684\u81ea\u5b9a\u4e49\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u6a21\u578b\u7684\u793a\u4f8b\u3002\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u5e38\u89c4\u8868\u9762\u7740\u8272\u5668\u6307\u5357\uff0c\u8bf7\u53c2\u9605\u8868\u9762\u7740\u8272\u5668\u793a\u4f8b\u3002",source:"@site/docs/graphics/shaders/shader-writing/sl-surface-shaders/sl-surface-shader-lighting-examples.md",sourceDirName:"graphics/shaders/shader-writing/sl-surface-shaders",slug:"/sl-surface-shaders/sl-surface-shader-lighting-examples",permalink:"/doc-unity-manual/docs/sl-surface-shaders/sl-surface-shader-lighting-examples",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/shaders/shader-writing/sl-surface-shaders/sl-surface-shader-lighting-examples.md",tags:[],version:"current",frontMatter:{id:"SL-SurfaceShaderLightingExamples",title:"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b",slug:"/sl-surface-shaders/sl-surface-shader-lighting-examples"},sidebar:"tutorialSidebar",previous:{title:"\u8868\u9762\u7740\u8272\u5668\u793a\u4f8b",permalink:"/doc-unity-manual/docs/sl-surface-shaders/sl-surface-shader-examples"},next:{title:"\u8868\u9762\u7740\u8272\u5668\u4e2d\u7684\u81ea\u5b9a\u4e49\u5149\u7167\u6a21\u578b",permalink:"/doc-unity-manual/docs/sl-surface-shaders/sl-surface-shader-lighting"}},o={},d=[{value:"\u6e32\u67d3\u7ba1\u7ebf\u517c\u5bb9\u6027",id:"\u6e32\u67d3\u7ba1\u7ebf\u517c\u5bb9\u6027",level:2},{value:"Diffuse",id:"diffuse",level:2},{value:"\u6f2b\u5c04\u73af\u7ed5",id:"\u6f2b\u5c04\u73af\u7ed5",level:2},{value:"\u5361\u901a\u6e10\u53d8 (Toon Ramp)",id:"\u5361\u901a\u6e10\u53d8-toon-ramp",level:2},{value:"\u7b80\u5355\u955c\u9762\u53cd\u5c04",id:"\u7b80\u5355\u955c\u9762\u53cd\u5c04",level:2},{value:"\u81ea\u5b9a\u4e49 GI",id:"\u81ea\u5b9a\u4e49-gi",level:2}],c={toc:d};function f(e){var n=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b"},"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u793a\u4f8b"),(0,i.kt)("p",null,"\u672c\u9875\u63d0\u4f9b\u4e86",(0,i.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/sl-surface-shaders"},"\u8868\u9762\u7740\u8272\u5668"),"\u4e2d\u7684\u81ea\u5b9a\u4e49",(0,i.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/sl-surface-shaders/sl-surface-shader-lighting"},"\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u6a21\u578b"),"\u7684\u793a\u4f8b\u3002\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u5e38\u89c4\u8868\u9762\u7740\u8272\u5668\u6307\u5357\uff0c\u8bf7\u53c2\u9605",(0,i.kt)("a",{parentName:"p",href:"/doc-unity-manual/docs/sl-surface-shaders/sl-surface-shader-examples"},"\u8868\u9762\u7740\u8272\u5668\u793a\u4f8b"),"\u3002"),(0,i.kt)("p",null,"\u56e0\u4e3a ",(0,i.kt)("strong",{parentName:"p"},"\u5ef6\u8fdf\u5149\u7167")," \u4e0e\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u6bcf\u6750\u8d28\u5149\u7167\u6a21\u578b\u4e0d\u517c\u5bb9\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u5927\u591a\u6570\u793a\u4f8b\u90fd\u4f7f\u7740\u8272\u5668\u4ec5\u7f16\u8bd1\u5230 ",(0,i.kt)("strong",{parentName:"p"},"\u524d\u5411\u6e32\u67d3")," \u3002"),(0,i.kt)("h2",{id:"\u6e32\u67d3\u7ba1\u7ebf\u517c\u5bb9\u6027"},"\u6e32\u67d3\u7ba1\u7ebf\u517c\u5bb9\u6027"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u529f\u80fd\u540d\u79f0")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u5185\u7f6e\u6e32\u67d3\u7ba1\u7ebf")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u901a\u7528\u6e32\u67d3\u7ba1\u7ebf (URP)")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u9ad8\u6e05\u6e32\u67d3\u7ba1\u7ebf (HDRP)")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u81ea\u5b9a\u4e49 SRP")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"\u8868\u9762\u7740\u8272\u5668")),(0,i.kt)("td",{parentName:"tr",align:null},"\u662f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u5426",(0,i.kt)("br",null),(0,i.kt)("br",null),"\u6709\u5173\u5728 URP \u4e2d\u521b\u5efa Shader \u5bf9\u8c61\u7684\u7b80\u5316\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 ",(0,i.kt)("a",{parentName:"td",href:"/doc-unity-manual/docs/shaders/shader-graph"},"Shader Graph"),"\u3002"),(0,i.kt)("td",{parentName:"tr",align:null},"\u5426",(0,i.kt)("br",null),(0,i.kt)("br",null),"\u6709\u5173\u5728 HDRP \u4e2d\u521b\u5efa Shader \u5bf9\u8c61\u7684\u7b80\u5316\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 ",(0,i.kt)("a",{parentName:"td",href:"/doc-unity-manual/docs/shaders/shader-graph"},"Shader Graph"),"\u3002"),(0,i.kt)("td",{parentName:"tr",align:null},"\u5426")))),(0,i.kt)("h2",{id:"diffuse"},"Diffuse"),(0,i.kt)("p",null,"\u4ee5\u4e0b\u662f\u4f7f\u7528\u5185\u7f6e\u5170\u4f2f\u7279\u5149\u7167\u6a21\u578b\u7684\u7740\u8272\u5668\u793a\u4f8b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  Shader "Example/Diffuse Texture" {\n      Properties {\n        _MainTex ("Texture", 2D) = "white" {}\n      }\n      SubShader {\n        Tags { "RenderType" = "Opaque" }\n        CGPROGRAM\n        #pragma surface surf Lambert\n      \n        struct Input {\n            float2 uv_MainTex;\n        };\n      \n        sampler2D _MainTex;\n      \n        void surf (Input IN, inout SurfaceOutput o) {\n            o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n        }\n        ENDCG\n      }\n      Fallback "Diffuse"\n    }\n')),(0,i.kt)("p",null,"\u4ee5\u4e0b\u662f\u6709\u7eb9\u7406\u548c\u6ca1\u6709\u7eb9\u7406\u7684\u5916\u89c2\uff08\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65b9\u5411\u5149\uff09\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderDiffuseTexture.jpg",alt:"SurfaceShaderDiffuseTexture.jpg"})," ",(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderDiffuseNoTex.png",alt:"SurfaceShaderDiffuseNoTex.png"})),(0,i.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u7f16\u5199\u81ea\u5b9a\u4e49\u5149\u7167\u6a21\u578b\uff08\u800c\u4e0d\u662f\u4f7f\u7528\u5185\u7f6e\u5170\u4f2f\u7279\u6a21\u578b\uff09\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u7ed3\u679c\u3002"),(0,i.kt)("p",null,"\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u8bb8\u591a\u8868\u9762\u7740\u8272\u5668\u5149\u7167\u6a21\u578b\u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5170\u4f2f\u7279\u5149\u7167\u6a21\u578b\u3002\u8bf7\u6ce8\u610f\uff0c\u53ea\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"CGPROGRAM")," \u90e8\u5206\u53d1\u751f\u53d8\u5316\uff1b\u5468\u56f4\u7684\u7740\u8272\u5668\u4ee3\u7801\u5b8c\u5168\u76f8\u540c\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Shader "Example/Diffuse Texture" {\n            Properties {\n                _MainTex ("Texture", 2D) = "white" {}\n            }\n            SubShader {\n            Tags { "RenderType" = "Opaque" }\n            CGPROGRAM\n              #pragma surface surf SimpleLambert\n  \n              half4 LightingSimpleLambert (SurfaceOutput s, half3 lightDir, half atten) {\n                  half NdotL = dot (s.Normal, lightDir);\n                  half4 c;\n                  c.rgb = s.Albedo * _LightColor0.rgb * (NdotL * atten);\n                  c.a = s.Alpha;\n                  return c;\n              }\n  \n            struct Input {\n                float2 uv_MainTex;\n            };\n        \n            sampler2D _MainTex;\n        \n            void surf (Input IN, inout SurfaceOutput o) {\n                o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n            }\n            ENDCG\n            }\n            Fallback "Diffuse"\n        }\n')),(0,i.kt)("p",null,"\u8fd9\u4e2a\u7b80\u5355\u7684\u6f2b\u5c04\u5149\u7167\u6a21\u578b\u4f7f\u7528\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"LightingSimpleLambert")," \u51fd\u6570\u3002\u5b83\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8ba1\u7b97\u5149\u7167\uff1a\u8ba1\u7b97\u8868\u9762\u6cd5\u7ebf\u548c\u5149\u7ebf\u65b9\u5411\u4e4b\u95f4\u7684\u70b9\u79ef\uff0c\u7136\u540e\u5e94\u7528\u5149\u8870\u51cf\u548c\u989c\u8272\u3002"),(0,i.kt)("h2",{id:"\u6f2b\u5c04\u73af\u7ed5"},"\u6f2b\u5c04\u73af\u7ed5"),(0,i.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86 ",(0,i.kt)("strong",{parentName:"p"},"\u73af\u7ed5\u6f2b\u5c04")," \uff0c\u8fd9\u662f\u5bf9 ",(0,i.kt)("strong",{parentName:"p"},"\u6f2b\u5c04")," \u5149\u7167\u7684\u4fee\u6539\uff0c\u5176\u4e2d\u5149\u7167\u201c\u73af\u7ed5\u7740\u201d\u5bf9\u8c61\u7684\u8fb9\u7f18\u3002\u5b83\u5bf9\u4e8e\u6a21\u62df\u6b21\u8868\u9762\u6563\u5c04\u6548\u679c\u5f88\u6709\u7528\u3002\u53ea\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"CGPROGRAM")," \u90e8\u5206\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u91cc\u540c\u6837\u7701\u7565\u4e86\u5468\u56f4\u7684\u7740\u8272\u5668\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    ...ShaderLab code...\n        CGPROGRAM\n        #pragma surface surf WrapLambert\n\n        half4 LightingWrapLambert (SurfaceOutput s, half3 lightDir, half atten) {\n            half NdotL = dot (s.Normal, lightDir);\n            half diff = NdotL * 0.5 + 0.5;\n            half4 c;\n            c.rgb = s.Albedo * _LightColor0.rgb * (diff * atten);\n            c.a = s.Alpha;\n            return c;\n        }\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n    \n        sampler2D _MainTex;\n            void surf (Input IN, inout SurfaceOutput o) {\n            o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n        }\n        ENDCG\n        ...ShaderLab code...\n")),(0,i.kt)("p",null,"\u4ee5\u4e0b\u662f\u6709\u7eb9\u7406\u548c\u6ca1\u6709\u7eb9\u7406\u7684\u5916\u89c2\uff08\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65b9\u5411\u5149\uff09\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderDiffuseWrap.jpg",alt:"SurfaceShaderDiffuseWrap.jpg"})," ",(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderDiffuseWrapNoTex.png",alt:"SurfaceShaderDiffuseWrapNoTex.png"})),(0,i.kt)("h2",{id:"\u5361\u901a\u6e10\u53d8-toon-ramp"},"\u5361\u901a\u6e10\u53d8 (Toon Ramp)"),(0,i.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u201c\u6e10\u53d8\u201d\u5149\u7167\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u4f7f\u7528\u7eb9\u7406\u6e10\u53d8\u6765\u5b9a\u4e49\u8868\u9762\u5982\u4f55\u54cd\u5e94\u5149\u6e90\u548c\u6cd5\u7ebf\u4e4b\u95f4\u7684\u89d2\u5ea6\u3002\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5404\u79cd\u6548\u679c\uff0c\u5e76\u4e14\u5728\u4e0e ",(0,i.kt)("strong",{parentName:"p"},"\u5361\u901a")," \u5149\u7167\u4e00\u8d77\u4f7f\u7528\u65f6\u5c24\u5176\u6709\u6548\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    ...ShaderLab code...\n        CGPROGRAM\n        #pragma surface surf Ramp\n\n        sampler2D _Ramp;\n\n        half4 LightingRamp (SurfaceOutput s, half3 lightDir, half atten) {\n            half NdotL = dot (s.Normal, lightDir);\n            half diff = NdotL * 0.5 + 0.5;\n            half3 ramp = tex2D (_Ramp, float2(diff)).rgb;\n            half4 c;\n            c.rgb = s.Albedo * _LightColor0.rgb * ramp * atten;\n            c.a = s.Alpha;\n            return c;\n        }\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n    \n        sampler2D _MainTex;\n    \n        void surf (Input IN, inout SurfaceOutput o) {\n            o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n        }\n        ENDCG\n        ...ShaderLab code... \n")),(0,i.kt)("p",null,"\u4ee5\u4e0b\u662f\u6709\u7eb9\u7406\u548c\u6ca1\u6709\u7eb9\u7406\u7684\u5916\u89c2\uff08\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65b9\u5411\u5149\uff09\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderToonRamp.jpg",alt:"SurfaceShaderToonRamp.jpg"})," ",(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderToonRampNoTex.jpg",alt:"SurfaceShaderToonRampNoTex.jpg"})),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderToonRampItself.png",alt:"SurfaceShaderToonRampItself.png"})),(0,i.kt)("h2",{id:"\u7b80\u5355\u955c\u9762\u53cd\u5c04"},"\u7b80\u5355\u955c\u9762\u53cd\u5c04"),(0,i.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u955c\u9762\u53cd\u5c04\u5149\u7167\u6a21\u578b\uff0c\u7c7b\u4f3c\u4e8e\u5185\u7f6e\u7684 BlinnPhong \u5149\u7167\u6a21\u578b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    ...ShaderLab code...\n        CGPROGRAM\n        #pragma surface surf SimpleSpecular\n\n        half4 LightingSimpleSpecular (SurfaceOutput s, half3 lightDir, half3 viewDir, half atten) {\n            half3 h = normalize (lightDir + viewDir);\n\n            half diff = max (0, dot (s.Normal, lightDir));\n\n            float nh = max (0, dot (s.Normal, h));\n            float spec = pow (nh, 48.0);\n\n            half4 c;\n            c.rgb = (s.Albedo * _LightColor0.rgb * diff + _LightColor0.rgb * spec) * atten;\n            c.a = s.Alpha;\n            return c;\n        }\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n    \n        sampler2D _MainTex;\n    \n        void surf (Input IN, inout SurfaceOutput o) {\n            o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n        }\n        ENDCG\n        ...ShaderLab code... \n")),(0,i.kt)("p",null,"\u4ee5\u4e0b\u662f\u6709\u7eb9\u7406\u548c\u6ca1\u6709\u7eb9\u7406\u7684\u5916\u89c2\uff08\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65b9\u5411\u5149\uff09\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderSimpleSpecular.jpg",alt:"SurfaceShaderSimpleSpecular.jpg"})," ",(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SurfaceShaderSimpleSpecularNoTex.png",alt:"SurfaceShaderSimpleSpecularNoTex.png"})),(0,i.kt)("h2",{id:"\u81ea\u5b9a\u4e49-gi"},"\u81ea\u5b9a\u4e49 GI"),(0,i.kt)("p",null,"\u6211\u4eec\u5c06\u4ece\u4e00\u4e2a\u6a21\u4eff Unity \u5185\u7f6e GI \u7684\u7740\u8272\u5668\u5f00\u59cb\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Shader "Example/CustomGI_ToneMapped" {\n        Properties {\n            _MainTex ("Albedo (RGB)", 2D) = "white" {}\n        }\n        SubShader {\n            Tags { "RenderType"="Opaque" }\n        \n            CGPROGRAM\n            #pragma surface surf StandardDefaultGI\n    \n            #include "UnityPBSLighting.cginc"\n    \n            sampler2D _MainTex;\n    \n            inline half4 LightingStandardDefaultGI(SurfaceOutputStandard s, half3 viewDir, UnityGI gi)\n            {\n                return LightingStandard(s, viewDir, gi);\n            }\n    \n            inline void LightingStandardDefaultGI_GI(\n                SurfaceOutputStandard s,\n                UnityGIInput data,\n                inout UnityGI gi)\n            {\n                LightingStandard_GI(s, data, gi);\n            }\n    \n            struct Input {\n                float2 uv_MainTex;\n            };\n    \n                void surf (Input IN, inout SurfaceOutputStandard o) {\n                    o.Albedo = tex2D(_MainTex, IN.uv_MainTex);\n                }\n                ENDCG\n            }\n            FallBack "Diffuse"\n        }\n')),(0,i.kt)("p",null,"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5728 GI \u4e0a\u6dfb\u52a0\u4e00\u4e9b\u8272\u8c03\u6620\u5c04\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    Shader "Example/CustomGI_ToneMapped" {\n        Properties {\n            _MainTex ("Albedo (RGB)", 2D) = "white" {}\n            _Gain("Lightmap tone-mapping Gain", Float) = 1\n            _Knee("Lightmap tone-mapping Knee", Float) = 0.5\n            _Compress("Lightmap tone-mapping Compress", Float) = 0.33\n        }\n        SubShader {\n            Tags { "RenderType"="Opaque" }\n        \n            CGPROGRAM\n            #pragma surface surf StandardToneMappedGI\n    \n            #include "UnityPBSLighting.cginc"\n    \n            half _Gain;\n            half _Knee;\n            half _Compress;\n            sampler2D _MainTex;\n    \n            inline half3 TonemapLight(half3 i) {\n                i *= _Gain;\n                return (i &gt; _Knee) ?(((i - _Knee)*_Compress) + _Knee) : i;\n            }\n    \n            inline half4 LightingStandardToneMappedGI(SurfaceOutputStandard s, half3 viewDir, UnityGI gi)\n            {\n                return LightingStandard(s, viewDir, gi);\n            }\n    \n            inline void LightingStandardToneMappedGI_GI(\n                SurfaceOutputStandard s,\n                UnityGIInput data,\n                inout UnityGI gi)\n            {\n                LightingStandard_GI(s, data, gi);\n    \n                gi.light.color = TonemapLight(gi.light.color);\n                #ifdef DIRLIGHTMAP_SEPARATE\n                    #ifdef LIGHTMAP_ON\n                        gi.light2.color = TonemapLight(gi.light2.color);\n                    #endif\n                    #ifdef DYNAMICLIGHTMAP_ON\n                        gi.light3.color = TonemapLight(gi.light3.color);\n                    #endif\n                #endif\n                gi.indirect.diffuse = TonemapLight(gi.indirect.diffuse);\n                gi.indirect.specular = TonemapLight(gi.indirect.specular);\n            }\n    \n            struct Input {\n                float2 uv_MainTex;\n            };\n    \n                void surf (Input IN, inout SurfaceOutputStandard o) {\n                    o.Albedo = tex2D(_MainTex, IN.uv_MainTex);\n                }\n                ENDCG\n            }\n            FallBack "Diffuse"\n        }\n')))}f.isMDXComponent=!0}}]);