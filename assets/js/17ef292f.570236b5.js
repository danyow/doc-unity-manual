"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50258],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||i;return n?a.createElement(d,l(l({ref:t},p),{},{components:n})):a.createElement(d,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67386:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return h}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={id:"UIE-HowTo-CreateRuntimeUI",title:"Creating your first runtime UI",slug:"/uie-getting-started/uie-how-to-create-runtime-ui"},s="Creating your first runtime UI",c={unversionedId:"uitoolkits/uielements/uie-getting-started/UIE-HowTo-CreateRuntimeUI",id:"uitoolkits/uielements/uie-getting-started/UIE-HowTo-CreateRuntimeUI",title:"Creating your first runtime UI",description:"This page will guide you through the steps to set up a simple character selection screen using UI Toolkit. It covers the creation of the UI elements and templates, the scene setup, and how to connect scripting logic to the UI. This guide won\u2019t cover styling through USS, and use only default styles and theming.",source:"@site/docs/uitoolkits/uielements/uie-getting-started/uie-how-to-create-runtime-ui.md",sourceDirName:"uitoolkits/uielements/uie-getting-started",slug:"/uie-getting-started/uie-how-to-create-runtime-ui",permalink:"/docs/uie-getting-started/uie-how-to-create-runtime-ui",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uitoolkits/uielements/uie-getting-started/uie-how-to-create-runtime-ui.md",tags:[],version:"current",frontMatter:{id:"UIE-HowTo-CreateRuntimeUI",title:"Creating your first runtime UI",slug:"/uie-getting-started/uie-how-to-create-runtime-ui"},sidebar:"tutorialSidebar",previous:{title:"Create a Custom Inspector",permalink:"/docs/uie-getting-started/uie-how-to-create-custom-inspector"},next:{title:"Simple UI Toolkit workflow",permalink:"/docs/uie-getting-started/uie-simple-ui-toolkit-workflow"}},p={},h=[{value:"Create the main UI view",id:"create-the-main-ui-view",level:2},{value:"Setup the scene",id:"setup-the-scene",level:2},{value:"Create sample data to display",id:"create-sample-data-to-display",level:2},{value:"Create a list entry UI template",id:"create-a-list-entry-ui-template",level:2},{value:"Create a controller for a list entry",id:"create-a-controller-for-a-list-entry",level:2},{value:"Create a controller for the main view",id:"create-a-controller-for-the-main-view",level:2},{value:"React to user selection",id:"react-to-user-selection",level:2},{value:"Final scripts",id:"final-scripts",level:2},{value:"MainView.uxml",id:"mainviewuxml",level:3},{value:"ListEntry.uxml",id:"listentryuxml",level:3},{value:"CharacterData.cs",id:"characterdatacs",level:3},{value:"CharacterListEntryController.cs",id:"characterlistentrycontrollercs",level:3},{value:"MainView.cs",id:"mainviewcs",level:3},{value:"CharacterListController.cs",id:"characterlistcontrollercs",level:3}],m={toc:h};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-your-first-runtime-ui"},"Creating your first runtime UI"),(0,i.kt)("p",null,"This page will guide you through the steps to set up a simple character selection screen using UI Toolkit. It covers the creation of the UI elements and templates, the scene setup, and how to connect scripting logic to the UI. This guide won\u2019t cover styling through USS, and use only default styles and theming."),(0,i.kt)("p",null,"\u60a8\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8",(0,i.kt)("a",{parentName:"p",href:"#%E6%AD%A4%E5%A4%84"},"\u6b64\u5904"),"\u627e\u5230\u672c\u6307\u5357\u7684\u6700\u7ec8\u6e90\u4ee3\u7801\u3002"),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Topics covered:"),"  UI Builder, ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.ListView.html"},"ListView"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.Label.html"},"Label"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.PanelSettings.html"},"PanelSettings"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.UIDocument.html"},"UIDocument"),", selection handling"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-finalMainView.png",alt:"uie-howto-runtimeUI-finalMainView.png"})),(0,i.kt)("p",null,"\u672c\u6307\u5357\u5c06\u6307\u5bfc\u60a8\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9aa4\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create the main UI view"),(0,i.kt)("li",{parentName:"ul"},"Setup the scene"),(0,i.kt)("li",{parentName:"ul"},"Create sample data to display"),(0,i.kt)("li",{parentName:"ul"},"Create a controller for the main view"),(0,i.kt)("li",{parentName:"ul"},"Create a list entry UI template"),(0,i.kt)("li",{parentName:"ul"},"Create a controller for a list entry"),(0,i.kt)("li",{parentName:"ul"},"React to user selection")),(0,i.kt)("h2",{id:"create-the-main-ui-view"},"Create the main UI view"),(0,i.kt)("p",null,"The final UI screen is composed of two individual UI templates (UXML). The main view template contains the list with the character names, a smaller panel to display the selected character\u2019s details, and a button. In this section you will set up this template using UI Builder."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"If you are familiar with UI Builder and want to skip this step, you can copy the UXML code for the ",(0,i.kt)("a",{parentName:"td",href:"#here"}," ",(0,i.kt)("strong",{parentName:"a"},"main view")," ")," from the bottom of this page and paste it into a new file directly. Save it as  ",(0,i.kt)("strong",{parentName:"td"},"Assets/UI/MainView.uxml")," .")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-mainView.png",alt:"The UI layout setup for the main view"})),(0,i.kt)("p",null,"The UI layout setup for the main view"),(0,i.kt)("p",null,"Open the UI Builder window via the menu  ",(0,i.kt)("strong",{parentName:"p"},"Window ",">"," UI Toolkit ",">"," UI Builder")," . Create a new UXML document using the file menu at the top left of the viewport."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-fileMenu.png",alt:"UI Builder file menu"})),(0,i.kt)("p",null,"UI Builder file menu"),(0,i.kt)("p",null,"When developing game UI, always make sure to select the ",(0,i.kt)("inlineCode",{parentName:"p"},"Unity Default Runtime Theme")," at the top right of the UI Builder\u2019s viewport. Default font sizes and colors differ between Editor and Runtime themes and that affects your layout."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-UIBuilderTheme.png",alt:"Create new elements by dragging from the Library"})),(0,i.kt)("p",null,"Create new elements by dragging from the Library"),(0,i.kt)("p",null,"Select the new UXML file in the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy"),"  and enable the  ",(0,i.kt)("strong",{parentName:"p"},"Match Game View"),"  checkbox. You might need to set your Unity Editor to a landscape resolution if you haven\u2019t already."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-matchGameView.png",alt:"Enabling Match Game View"})),(0,i.kt)("p",null,"Enabling Match Game View"),(0,i.kt)("p",null,"Now it\u2019s time to create UI elements! Create a new VisualElement by dragging it from the  ",(0,i.kt)("strong",{parentName:"p"},"Library"),"  into the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy")," ."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-newVisualElement.png",alt:"Create new elements by dragging from the Library"})),(0,i.kt)("p",null,"Create new elements by dragging from the Library"),(0,i.kt)("p",null,"The new element needs to cover the entire screen, so you need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"flex-grow")," property to 1. Select the element from the hierarchy and find the foldout labeled  ",(0,i.kt)("strong",{parentName:"p"},"Flex"),"  in the Inspector panel on the right. Change the value for  ",(0,i.kt)("strong",{parentName:"p"},"Grow"),"  from 0 to 1."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-flexGrow.png",alt:"Setting the Flex property"})),(0,i.kt)("p",null,"Setting the Flex property"),(0,i.kt)("p",null,"To center all children of this VisualElement in the middle of the screen, change the  ",(0,i.kt)("strong",{parentName:"p"},"Align"),"  properties of the VisualElement. You need to set both  ",(0,i.kt)("strong",{parentName:"p"},"Align Items"),"  and  ",(0,i.kt)("strong",{parentName:"p"},"Justify Content"),"  to ",(0,i.kt)("em",{parentName:"p"},"center"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-alignCenter.png",alt:"Centering children"})),(0,i.kt)("p",null,"Centering children"),(0,i.kt)("p",null,"Lastly, you can pick a background color under  ",(0,i.kt)("strong",{parentName:"p"},"Background ",">"," Color")," . This step is optional. This example uses ",(0,i.kt)("inlineCode",{parentName:"p"},"#732526")," as the color."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-backgroundColor.png",alt:"Root element background color"})),(0,i.kt)("p",null,"Root element background color"),(0,i.kt)("p",null,"Next, create a new VisualElement underneath the existing one. This will become the parent container for the left and right sections of the UI."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-secondaryContainer.png",alt:"Add a child VisualElement"})),(0,i.kt)("p",null,"Add a child VisualElement"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"flex-direction")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"row")," for this new element (it defaults to column). You also need to set a fixed height of 350 pixels."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-centerContainer.png",alt:"Center container properties"})),(0,i.kt)("p",null,"Center container properties"),(0,i.kt)("p",null,"This is what the current UI should look like. Note that your screen might look different depending on the resolution and aspect ratio of your  ",(0,i.kt)("strong",{parentName:"p"},"Game View")," ."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-intermediate01.png",alt:"Background container with empty element inside"})),(0,i.kt)("p",null,"Background container with empty element inside"),(0,i.kt)("p",null,"To create the list for the character names, select a  ",(0,i.kt)("strong",{parentName:"p"},"ListView"),"  control from the  ",(0,i.kt)("strong",{parentName:"p"},"Library"),"  and add it as a child underneath the VisualElement you just created. Select the element and assign it the name ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterList")," in the inspector. This is necessary so you can access this list via the controller script later."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-setElementName.png",alt:"Background container with empty element inside"})),(0,i.kt)("p",null,"Background container with empty element inside"),(0,i.kt)("p",null,"Set the list to have a fixed width of 230 pixels. Also give it a 6 px wide margin on the right, to crate some distance to the next elements that you are going to create."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-sizeAndMargin.png",alt:"Size and Margin foldouts for the character list"})),(0,i.kt)("p",null,"Size and Margin foldouts for the character list"),(0,i.kt)("p",null,"You can also assign a background color and set a rounded border for the list. This guide uses ",(0,i.kt)("inlineCode",{parentName:"p"},"#6E3925")," for the background and ",(0,i.kt)("inlineCode",{parentName:"p"},"#311A11")," for the border color, with a 4px wide border and a 15px radius. This step is optional."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-characterListStyling.png",alt:"Styled character list"})),(0,i.kt)("p",null,"Styled character list"),(0,i.kt)("p",null,"Add a new VisualElement under the same parent as the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterList"),". This will hold the character details panel and the button. Under the  ",(0,i.kt)("strong",{parentName:"p"},"Align"),"  foldout, change the setting for  ",(0,i.kt)("strong",{parentName:"p"},"Align Items"),"  to ",(0,i.kt)("inlineCode",{parentName:"p"},"flex-end"),", and  ",(0,i.kt)("strong",{parentName:"p"},"Justify Content"),"  to ",(0,i.kt)("inlineCode",{parentName:"p"},"space-between"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-justifySpaceBetween.png",alt:"Justify content property"})),(0,i.kt)("p",null,"Justify content property"),(0,i.kt)("p",null,"Add a new VisualElement to this new container. This will become the character details panel. When the user selects a character from the list on the left, it will display the character\u2019s portrait, name, and class."),(0,i.kt)("p",null,"Set a fixed width of 276 pixels for the element, and switch  ",(0,i.kt)("strong",{parentName:"p"},"Align Items"),"  and  ",(0,i.kt)("strong",{parentName:"p"},"Justify Content"),"  to ",(0,i.kt)("em",{parentName:"p"},"center"),". Also add an 8 pixels wide padding for the element, so that the children will keep a minimum distance to the borders of the container."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-characterDetailsProperties.png",alt:"Properties of the charcter details container"})),(0,i.kt)("p",null,"Properties of the charcter details container"),(0,i.kt)("p",null,"You can style the panel by setting a background color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#AA5939")," and a border color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#311A11")," with a 4px wide border and a 15px radius. This step is optional."),(0,i.kt)("p",null,"Your UI layout should now look similar to the image below."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-intermediate02.png",alt:"Empty character details panel"})),(0,i.kt)("p",null,"Empty character details panel"),(0,i.kt)("p",null,"Next you\u2019ll add the individual UI controls to the character details. First is the character portrait. This consists of two elements - a frame in the background and an image in the foreground."),(0,i.kt)("p",null,"Add a new VisualElement to the character details container for the background frame first. Assign it a fixed size of 120\xd7120 pixels, and a padding of 4 pixels so that the contained image won\u2019t directly touch the border."),(0,i.kt)("p",null,"You can use a 2px-wide, 15px radius border with a color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#311A11")," and a background color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#FF8554")," to style the element. Feel free to apply your own colors and styling instead."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-pictureFrame.png",alt:"Background frame for the character portrait"})),(0,i.kt)("p",null,"Background frame for the character portrait"),(0,i.kt)("p",null,"For the actual image add a new VisualElement as a child to the frame you just created. Name it ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterPortrait")," so that you can access it in the controller script later."),(0,i.kt)("p",null,"Set  ",(0,i.kt)("strong",{parentName:"p"},"Flex ",">"," Grow"),"  to 1, so that the image makes use of all the available space. Also make sure to change the scaling mode under  ",(0,i.kt)("strong",{parentName:"p"},"Background ",">"," Scale Mode"),"  to ",(0,i.kt)("inlineCode",{parentName:"p"},"scale-to-fit"),", so that you can scale the image to match the element size, while keeping the correct aspect ratio."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-portraitElement.png",alt:"VisualElement for the portrait image"})),(0,i.kt)("p",null,"VisualElement for the portrait image"),(0,i.kt)("p",null,"Next, add two label controls to the the character details container, which you will later use to display the selected character\u2019s name and class. Name them ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterClass"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-characterLabels.png",alt:"Add labels for name and class"})),(0,i.kt)("p",null,"Add labels for name and class"),(0,i.kt)("p",null,"To make the character\u2019s name stand out more than the class, change that label\u2019s font size to 18, and set the style to ",(0,i.kt)("em",{parentName:"p"},"bold"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-labelSettings.png",alt:"Change font settings"})),(0,i.kt)("p",null,"Change font settings"),(0,i.kt)("p",null,"Your UI screen should now look similar to the image below."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-intermediate03.png",alt:"Finished character details panel"})),(0,i.kt)("p",null,"Finished character details panel"),(0,i.kt)("p",null,"Lastly, add a Button control to the right side UI container. You will later access this button in the controller script and enable or disable it when a character is selected or deselected. Name the button ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectCharButton")," and give it a fixed width of 150px. You should also set the label text of the button to ",(0,i.kt)("inlineCode",{parentName:"p"},"Select Character"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-selectButton.png",alt:"Add button for character selection"})),(0,i.kt)("p",null,"Add button for character selection"),(0,i.kt)("p",null,"To style the button, set a background color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#FF8554"),", and a 2px border with a color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#311A11"),". This step is optional."),(0,i.kt)("p",null,"Your finished main view should look similar to the image below."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-finalMainView.png",alt:"Final main view layout"})),(0,i.kt)("p",null,"Final main view layout"),(0,i.kt)("p",null,"Save the UXML template as  ",(0,i.kt)("strong",{parentName:"p"},"Assets/UI/MainView.uxml")," . You can also find the final UXML code for this template at the bottom of the page ",(0,i.kt)("a",{parentName:"p",href:"#here"},"here"),"."),(0,i.kt)("h2",{id:"setup-the-scene"},"Setup the scene"),(0,i.kt)("p",null,"In this section you will learn how to load and display the UI template you created in the previous section in your game at runtime."),(0,i.kt)("p",null,"To start you need to create a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.PanelSettings.html"},"PanelSettings")," asset. This asset will define the settings of your screen, such as scaling mode and rendering order. It will also determine the name under which your UI will appear in the UI Toolkit Debugger."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-newPanelSettings.png",alt:"Create a new panel settings asset"})),(0,i.kt)("p",null,"Create a new panel settings asset"),(0,i.kt)("p",null,"Create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Panel Settings Asset")," by right-clicking in the project view. Choose  ",(0,i.kt)("strong",{parentName:"p"},"Create ",">"," UI Toolkit ",">"," Panel Settings Asset")," . Name the newly created file ",(0,i.kt)("inlineCode",{parentName:"p"},"GameUI_Panel"),". For this guide you can leave all settings at their default values."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-PanelSettingsDefaults.png",alt:"No need to change the default PanelSettings"})),(0,i.kt)("p",null,"No need to change the default PanelSettings"),(0,i.kt)("p",null,"To display the main view UI template from the previous section you need to create a new GameObject in the scene. Attach a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.UIDocument.html"},"UIDocument")," component to it."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"UIDocument")," will automatically load the assigned ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," when entering Play mode in Unity. A ",(0,i.kt)("inlineCode",{parentName:"p"},"VisualTreeAsset")," is a UXML template. Assign both the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainView.uxml")," and the new ",(0,i.kt)("inlineCode",{parentName:"p"},"GameUI_Panel")," panel settings to the component."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-UIDocument.png",alt:"The UI Document component"})),(0,i.kt)("p",null,"The UI Document component"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"If you do not assign a ",(0,i.kt)("inlineCode",{parentName:"td"},"PanelSettings")," asset to your UI Document component, it will automatically search the project and use the first Panel Settings Asset it finds automatically. Keep this in mind when renaming or moving assets.")))),(0,i.kt)("p",null,"You can now enter Play mode in the Unity Editor and see your UI displayed in the game view."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-playModeFirstLook.png",alt:"UI displayed at runtime"})),(0,i.kt)("p",null,"UI displayed at runtime"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"If you have multiple UI Documents in your scene, you can assign the same panel settings asset to all. This will cause all UI to be rendered on the same panel, optimizing performance.")))),(0,i.kt)("h2",{id:"create-sample-data-to-display"},"Create sample data to display"),(0,i.kt)("p",null,"In this section you will create some sample data that will be used to fill the character list in the UI with data."),(0,i.kt)("p",null,"For the character list you need a simple class that holds a character name, class, and a portrait image. Create a new ScriptableObject script  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/CharacterData.cs"),"  and paste the following code into the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEngine;\n\npublic enum ECharacterClass\n{\n  Knight, Ranger, Wizard\n}\n\n[CreateAssetMenu]\npublic class CharacterData : ScriptableObject\n{\n  public string m_CharacterName;\n  public ECharacterClass m_Class;\n  public Sprite m_PortraitImage;\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[CreateAssetMenu]")," attribute will automatically add an entry to the  ",(0,i.kt)("strong",{parentName:"p"},"Create"),"  menu. Right-click into a folder in the Project view to create instances of the new ScriptableObject."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-createCharacterData.png",alt:"New Create menu entry"})),(0,i.kt)("p",null,"New Create menu entry"),(0,i.kt)("p",null,"Now you need to create a few ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterData")," instances and fill them with random data. Place all of them in a folder  ",(0,i.kt)("strong",{parentName:"p"},"Resources/Characters")," . You will write a script which automatically parses and loads all character data from this folder later."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-characterDataProperties.png",alt:"Create a few sample characters"})),(0,i.kt)("p",null,"Create a few sample characters"),(0,i.kt)("h2",{id:"create-a-list-entry-ui-template"},"Create a list entry UI template"),(0,i.kt)("p",null,"In this section you will create a UI template for the individual entries in the list. At runtime, a controller script will create an instance of this UI for each character and add it to the list. The UI for a character list entry consists of acolored background frame and the character name."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-listEntryFinal.png",alt:"List entry showing the character name"})),(0,i.kt)("p",null,"List entry showing the character name"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"If you want to skip this step, you can copy the UXML code for the ",(0,i.kt)("a",{parentName:"td",href:"#here"}," ",(0,i.kt)("strong",{parentName:"a"},"list entry")," ")," from the bottom of this page and paste it into a new file directly. Save it as  ",(0,i.kt)("strong",{parentName:"td"},"Assets/UI/ListEntry.uxml")," .")))),(0,i.kt)("p",null,"Open the UI Builder window via the menu  ",(0,i.kt)("strong",{parentName:"p"},"Window ",">"," UI Toolkit ",">"," UI Builder")," . Create a new UXML template by selecting  ",(0,i.kt)("strong",{parentName:"p"},"File ",">"," New")," ."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-fileMenu.png",alt:"Create a new UXML template in UI Builder"})),(0,i.kt)("p",null,"Create a new UXML template in UI Builder"),(0,i.kt)("p",null,"Add a VisualElement for the background, and set a fixed heigth of 41px. Since the text inside the entry should be left aligned and placed in the middle of the element, open the  ",(0,i.kt)("strong",{parentName:"p"},"Align"),"  foldout and set  ",(0,i.kt)("strong",{parentName:"p"},"Align Items"),"  to ",(0,i.kt)("em",{parentName:"p"},"left"),", and  ",(0,i.kt)("strong",{parentName:"p"},"Justify Content"),"  to ",(0,i.kt)("em",{parentName:"p"},"center"),". Also set a left padding of 10px, to make the label have a minimum distance to the left border of the frame."),(0,i.kt)("p",null,"For the styling, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"#AA5939")," for the background color and add a 2px wide border, with a 15px radius and a color of ",(0,i.kt)("inlineCode",{parentName:"p"},"#311A11"),". This step is optional and you can apply your own colors and styling."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-listEntryBackground.png",alt:"The background VisualElement"})),(0,i.kt)("p",null,"The background VisualElement"),(0,i.kt)("p",null,"Add a label as a child to the existing VisualElement and name it ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterName"),", so that you can access it later in the controller script. Set the  ",(0,i.kt)("strong",{parentName:"p"},"Font Style"),"  to ",(0,i.kt)("em",{parentName:"p"},"bold")," and the font size to 18."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-listEntryLabel.png",alt:"Add label for the characters name"})),(0,i.kt)("p",null,"Add label for the character\u2019s name"),(0,i.kt)("p",null,"Save the UXML template as  ",(0,i.kt)("strong",{parentName:"p"},"Assets/UI/ListEntry.uxml")," . You can also find the final UXML code for this template at the bottom of the page ",(0,i.kt)("a",{parentName:"p",href:"#here"},"here"),"."),(0,i.kt)("h2",{id:"create-a-controller-for-a-list-entry"},"Create a controller for a list entry"),(0,i.kt)("p",null,"In this section you will create a controller script for a list entry. The purpose of the script is to display the data of a character instance in the UI of the list entry. It needs to access the label for the character name and set it to display the name of the given character instance."),(0,i.kt)("p",null,"Create a new script  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/UI/CharacterListEntryController.cs"),"  and paste the following code into it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEngine.UIElements;\n\npublic class CharacterListEntryController\n{\n  private Label m_NameLabel;\n\n  public void SetVisualElement(VisualElement rootEleme)\n  {\n    m_NameLabel = visualElement.Q&lt;Label&gt;("CharacterName");\n  }\n\n  public void SetCharacterData(CharacterData characterData)\n  {\n    m_NameLabel.text = characterData.m_CharacterName;\n  }\n}\n')),(0,i.kt)("p",null,"There are two functions in this class, and both of them are ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," functions."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SetvisualElement(VisualElement visualElement)")," This function will receive a visual element that is an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ListEntry")," UI template you created in the previous section. The main view controller will create this instance. The purpose of this function is to retrieve a reference to the character name label inside the UI element."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SetCharacterData(CharacterData characterData)")," This function receives the character whose name this list element is supposed to display. Because the elements list in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ListView")," are pooled and reused, it\u2019s necessary to have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," function to change which character\u2019s data to display."),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListEntry")," class is not a ",(0,i.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),". Since the visual elements in UI Toolkit aren\u2019t GameObjects, you can\u2019t attach components to them. Instead, this class will be attached to the ",(0,i.kt)("inlineCode",{parentName:"p"},"userData")," property in the next section."),(0,i.kt)("h2",{id:"create-a-controller-for-the-main-view"},"Create a controller for the main view"),(0,i.kt)("p",null,"In this section you will create a controller script for the character list in the main view, and a MonoBehaviour script that instantiates and assignes it to the visual tree."),(0,i.kt)("p",null,"To start, create a new script under  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/UI/CharacterListController.cs"),"  and paste the following code into it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UIElements;\n\npublic class CharacterListController\n{\n  public void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n  {\n  }\n}\n")),(0,i.kt)("p",null,"You\u2019re going to fill in the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList()")," method late on, but it\u2019s important to add the empty method now, so that you can call it in the next section."),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Attach the controller script to the main view")," "),(0,i.kt)("p",null,"Just like the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListEntryController"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," is not a ",(0,i.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),", and needs to be attached to the visual tree in a different manner. You need to create a MonoBehaviour script that you can attach to the same GameObject as the ",(0,i.kt)("inlineCode",{parentName:"p"},"UIDocument"),". It will instantiate the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," and attach it to the Visual Tree."),(0,i.kt)("p",null,"Create a new script  ",(0,i.kt)("strong",{parentName:"p"},"Assets/Scripts/UI/MainView.cs"),"  and paste the following code into it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEngine;\nusing UnityEngine.UIElements;\n\npublic class MainView : MonoBehaviour\n{\n  [SerializeField] private VisualTreeAsset m_ListEntryTemplate;\n\n  void OnEnable()\n  {\n    // The UXML is already instantiated by the UIDocument component\n    var uiDocument = GetComponent&lt;UIDocument&gt;();\n\n    // Initialize the character list controller\n    var characterListController = new CharacterListController();\n    characterListController.InitializeCharacterList(uiDocument.rootVisualElement, m_ListEntryTemplate);\n  }\n}\n")),(0,i.kt)("p",null,"Go into the Unity Editor and attach the script to the same GameObject that the ",(0,i.kt)("inlineCode",{parentName:"p"},"UIDocument")," is on. Assign the ",(0,i.kt)("inlineCode",{parentName:"p"},"ListEntry.uxml")," to the  ",(0,i.kt)("strong",{parentName:"p"},"List Entry Template"),"  property."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-assignListEntry.png",alt:"Add main view script and assign reference"})),(0,i.kt)("p",null,"Add main view script and assign reference"),(0,i.kt)("p",null,"There\u2019s no need for your script component to instantiate the MainView UXML, as this is done automatically in the ",(0,i.kt)("inlineCode",{parentName:"p"},"UIDocument")," component on the same GameObject. The ",(0,i.kt)("inlineCode",{parentName:"p"},"MainView")," script accesses the UIDocument component to get a reference of the already instantiated Visual Tree. It then creates an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," and passes in the root element of the visual tree and the UXML template used for the individual list elements."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"When the UI is reloaded, companion MonoBehaviour components on the same GameOBject containing the ",(0,i.kt)("inlineCode",{parentName:"td"},"UIDocument")," component will be disabled prior to the reload, and then re-enabled after the reload. Therefore it\u2019s a good practice to place code that interacts with the UI in the ",(0,i.kt)("inlineCode",{parentName:"td"},"OnEnable")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"OnDisable")," methods of these MonoBehaviours.")))),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Enumerate all character data instances")," "),(0,i.kt)("p",null,"The first functionality you should add to the controller script is a function that enumerates all the character data instances you created earlier. These will be used to fill the list."),(0,i.kt)("p",null,"Copy the code below into the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'private List&lt;CharacterData&gt; m_AllCharacters;\n\nprivate void EnumerateAllCharacters()\n{\n  m_AllCharacters = new List&lt;CharacterData&gt;();\n  m_AllCharacters.AddRange(Resources.LoadAll&lt;CharacterData&gt;("Characters"));\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Note")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"This code assumes that you created the character instances in the  ",(0,i.kt)("strong",{parentName:"td"},"Resources/Characters"),"  folder. You might need to adjust the folder name accordingly if you placed the characters in a different folder.")))),(0,i.kt)("p",null,"Now you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerateAllCharacter")," method during initialization. Add a call to it to the top of the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n{\n  // Enumerate all characters\n  EnumerateAllCharacters();\n}\n")),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Get references to the UI elements")," "),(0,i.kt)("p",null,"In this section you will fill in the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList")," method. The first thing this method needs to do is obtain references to all the individual UI controls it needs to access to display information. Use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/uie-uxml/uie-uquery"},"UQuery")," family of APIs to retrieve individual UI controls by name, USS class, type, or a combination of these."),(0,i.kt)("p",null,"Extend the code inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," class with the code below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// UXML template for list entries\nprivate VisualTreeAsset m_ListEntryTemplate;\n\n// UI element references\nprivate ListView m_CharacterList;\nprivate Label m_CharClassLabel;\nprivate Label m_CharNameLabel;\nprivate VisualElement m_CharPortrait;\nprivate Button m_SelectCharButton;\n\npublic void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n{\n  // Enumerate all characters\n  EnumerateAllCharacters();\n\n  // Store a reference to the template for the list entries\n  m_ListEntryTemplate = listElementTemplate;\n\n  // Store a reference to the character list element\n  m_CharacterList = root.Q&lt;ListView&gt;("CharacterList");\n\n  // Store references to the selected character info elements\n  m_CharClassLabel = root.Q&lt;Label&gt;("CharacterClass");\n  m_CharNameLabel = root.Q&lt;Label&gt;("CharacterName");\n  m_CharPortrait = root.Q&lt;VisualElement&gt;("CharacterPortrait");\n\n  // Store a reference to the select button\n  m_SelectCharButton = root.Q&lt;Button&gt;("SelectCharButton");\n}\n')),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Fill the list with entries")," "),(0,i.kt)("p",null,"Next you need to fill the list on the screen with the characters you enumerated and loaded earlier. To do so you need to create a new method ",(0,i.kt)("inlineCode",{parentName:"p"},"FillCharacterList")," inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," class."),(0,i.kt)("p",null,"Filling a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.ListView.html"},"ListView")," with elements takes 4 steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"makeItem")," function"),(0,i.kt)("li",{parentName:"ol"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"bindItem")," function"),(0,i.kt)("li",{parentName:"ol"},"Set the item height"),(0,i.kt)("li",{parentName:"ol"},"Set the item source")),(0,i.kt)("p",null,"The purpose of a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/UIElements.BaseVerticalCollectionView-makeItem.html"},"makeItem")," callback function is to create a small visual tree representing the UI a single list item, and returning the root VisualElement of this tree."),(0,i.kt)("p",null,"In this case, the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeItem")," callback needs to instantiate the UXML template you created for the list entries. IT also needs to create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListEntryController")," controller script, which takes care of filling the UI with the data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterData"),"."),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"FillCharacterList")," method inside the class and paste the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void FillCharacterList()\n{\n  // Set up a make item function for a list entry\n  m_CharacterList.makeItem = () =&gt;\n  {\n    // Instantiate the UXML template for the entry\n    var newListEntry = m_ListEntryTemplate.Instantiate();\n\n    // Instantiate a controller for the data\n    var newListEntryLogic = new CharacterListEntryController();\n\n    // Assign the controller script to the visual element\n    newListEntry.userData = newListEntryLogic;\n\n    // Initialize the controller script\n    newListEntryLogic.SetVisualElement(newListEntry);\n\n    // Return the root of the instantiated visual tree\n    return newListEntry;\n  };\n}\n")),(0,i.kt)("p",null,"As part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeItem")," callback, you\u2019re storing the controller script inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"userData")," property of the instantiated visual element. This allows you to access the script at a later time and assign different characters to the list element."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Assign the controller script to the visual element\nnewListEntry.userData = newListEntryLogic;\n")),(0,i.kt)("p",null,"As a memory and performance optimization, a ",(0,i.kt)("inlineCode",{parentName:"p"},"ListView")," reuses list elements instead of instantiating one element for every entry in the list. It creates only enough visual elements to fill the visible area, and then pools and reuses them as the list is scrolled."),(0,i.kt)("p",null,"For this reason you need to provide a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/UIElements.BaseVerticalCollectionView-bindItem.html"},"bindItem")," callback which binds an instance of your data (in this case ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterData"),") to an individual list element."),(0,i.kt)("p",null,"Extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"FillCharacterList")," method by adding the code below at the bottom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void FillCharacterList()\n{\n  ...\n\n  // Set up bind function for a specific list entry\n  m_CharacterList.bindItem = (item, index) =&gt;\n  {\n    (item.userData as CharacterListEntryController).SetCharacterData(m_AllCharacters[index]);\n  };\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"bindItem")," callback receives a reference to the root visual element for the visual tree of the list entry, and an index for the data. Because you stored a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListEntryController")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"userData")," property of the visual element, the code can access it and directly set the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterData"),"."),(0,i.kt)("p",null,"Lastly you need to set the item height of the element and provide a reference to the data source for the list. This tells the list how many elements it contains."),(0,i.kt)("p",null,"Extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"FillCharacterList")," method by adding the code below at the bottom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void FillCharacterList()\n{\n  ...\n\n  // Set a fixed item height\n  m_CharacterList.fixedItemHeight = 45;\n  // For Unity versions earlier than 2021.2 use this:\n  //m_CharacterList.itemHeight = 45;\n\n  // Set the actual item's source list/array\n  m_CharacterList.itemsSource = m_AllCharacters;\n}\n")),(0,i.kt)("p",null,"Finally, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"FillCharacterList")," method at the end of initialization. Add a call to the bottom of the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList")," method as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n{\n  ...\n\n  FillCharacterList();\n}\n")),(0,i.kt)("p",null,"If you enter  ",(0,i.kt)("strong",{parentName:"p"},"Play Mode"),"  now, the character list will fill up with the names of the characters you created."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-playModeListView.png",alt:"The character list is no longer empty"})),(0,i.kt)("p",null,"The character list is no longer empty"),(0,i.kt)("p",null,"You can find the final code for the ",(0,i.kt)("inlineCode",{parentName:"p"},"CharacterListController")," script at the bottom of this guide,  ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#here"},"here"))," "),(0,i.kt)("h2",{id:"react-to-user-selection"},"React to user selection"),(0,i.kt)("p",null,"When the user selects a character, the character\u2019s details - namely portrait, full name and class - need to be displayed in the character details section on the right side of the screen. Also, when a character is selected, the selection button needs to be enabled. When no character is selected, the button should disable again."),(0,i.kt)("p",null,"Note that you can already click and select characters in your list. The functionality for selection and highlighting are part of the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/UIElements.ListView.html"},"ListView")," control. All you need to add is a callback function to react when a user changes the selection in the list. The ",(0,i.kt)("inlineCode",{parentName:"p"},"ListView")," control contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"onSelectionChange")," event for this purpose:"),(0,i.kt)("p",null,"Add the following code to the bottom of the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n{\n  ...\n\n  // Register to get a callback when an item is selected\n  m_CharacterList.onSelectionChange += OnCharacterSelected;\n}\n")),(0,i.kt)("p",null,"Now you need to implement the callback function ",(0,i.kt)("inlineCode",{parentName:"p"},"OnCharacterSelected")," that you set up in the code above. This function will receive a list of all selected items in the list. However, because you list only allows single item selection, you can access the selected item directly through the list\u2019s ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/Manual/UIElements.BaseVerticalCollectionView-selectedItem.html"},"selectedItem")," property."),(0,i.kt)("p",null,"Copy the code below into your class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void OnCharacterSelected(IEnumerable&lt;object&gt; selectedItems)\n{\n  // Get the currently selected item directly from the ListView\n  var selectedCharacter = m_CharacterList.selectedItem as CharacterData;\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"selectedItem")," property could return null. This is the case if nothing is selected, or the user presses the ",(0,i.kt)("inlineCode",{parentName:"p"},"ESC")," key to deselect everything. This case needs to be handled first."),(0,i.kt)("p",null,"Extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnCharacterSelected")," method as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'private void OnCharacterSelected(IEnumerable&lt;object&gt; selectedItems)\n{\n  // Get the currently selected item directly from the ListView\n  var selectedCharacter = m_CharacterList.selectedItem as CharacterData;\n\n  // Handle none-selection (Escape to deselect everything)\n  if (selectedCharacter == null)\n  {\n    // Clear\n    m_CharClassLabel.text = "";\n    m_CharNameLabel.text = "";\n    m_CharPortrait.style.backgroundImage = null;\n\n    // Disable the select button\n    m_SelectCharButton.SetEnabled(false);\n\n    return;\n  }\n}\n')),(0,i.kt)("p",null,"If the selection is valid, you need to display the character\u2019s details in the UI. You can access to the labels and the portrait image visual elements via the references you retrieved in the ",(0,i.kt)("inlineCode",{parentName:"p"},"InitializeCharacterList")," method of your class."),(0,i.kt)("p",null,"Copy the code below into the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnCharacterSelected")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void OnCharacterSelected(IEnumerable&lt;object&gt; selectedItems)\n{\n  ...\n\n  // Fill in character details\n  m_CharClassLabel.text = selectedCharacter.m_Class.ToString();\n  m_CharNameLabel.text = selectedCharacter.m_CharacterName;\n  m_CharPortrait.style.backgroundImage = new StyleBackground(selectedCharacter.m_PortraitImage);\n\n  // Enable the select button\n  m_SelectCharButton.SetEnabled(true);\n}\n")),(0,i.kt)("p",null,"You can now enter  ",(0,i.kt)("strong",{parentName:"p"},"Play Mode"),"  and see your character selection list in action. Press the ",(0,i.kt)("inlineCode",{parentName:"p"},"Escape")," key to deselect a character."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/uie-howto-runtimeUI-final.png",alt:"Final runtime UI"})),(0,i.kt)("p",null,"Final runtime UI"),(0,i.kt)("h2",{id:"final-scripts"},"Final scripts"),(0,i.kt)("p",null,"Below you can find the full source code for all files created in this guide."),(0,i.kt)("h3",{id:"mainviewuxml"},"MainView.uxml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="False"&gt;\n    &lt;ui:VisualElement style="flex-grow: 1; align-items: center; justify-content: center; background-color: rgb(115, 37, 38);"&gt;\n        &lt;ui:VisualElement style="flex-direction: row; height: 350px;"&gt;\n            &lt;ui:ListView focusable="true" name="CharacterList" style="width: 230px; border-left-color: rgb(49, 26, 17); border-right-color: rgb(49, 26, 17); border-top-color: rgb(49, 26, 17); border-bottom-color: rgb(49, 26, 17); border-left-width: 4px; border-right-width: 4px; border-top-width: 4px; border-bottom-width: 4px; background-color: rgb(110, 57, 37); border-top-left-radius: 15px; border-bottom-left-radius: 15px; border-top-right-radius: 15px; border-bottom-right-radius: 15px; margin-right: 6px;" /&gt;\n            &lt;ui:VisualElement style="justify-content: space-between; align-items: flex-end;"&gt;\n                &lt;ui:VisualElement style="align-items: center; background-color: rgb(170, 89, 57); border-left-width: 4px; border-right-width: 4px; border-top-width: 4px; border-bottom-width: 4px; border-left-color: rgb(49, 26, 17); border-right-color: rgb(49, 26, 17); border-top-color: rgb(49, 26, 17); border-bottom-color: rgb(49, 26, 17); border-top-left-radius: 15px; border-bottom-left-radius: 15px; border-top-right-radius: 15px; border-bottom-right-radius: 15px; width: 276px; justify-content: center; padding-left: 8px; padding-right: 8px; padding-top: 8px; padding-bottom: 8px;"&gt;\n                    &lt;ui:VisualElement style="border-left-color: rgb(49, 26, 17); border-right-color: rgb(49, 26, 17); border-top-color: rgb(49, 26, 17); border-bottom-color: rgb(49, 26, 17); border-left-width: 2px; border-right-width: 2px; border-top-width: 2px; border-bottom-width: 2px; height: 120px; width: 120px; border-top-left-radius: 13px; border-bottom-left-radius: 13px; border-top-right-radius: 13px; border-bottom-right-radius: 13px; padding-left: 4px; padding-right: 4px; padding-top: 4px; padding-bottom: 4px; background-color: rgb(255, 133, 84);"&gt;\n                        &lt;ui:VisualElement name="CharacterPortrait" style="flex-grow: 1; -unity-background-scale-mode: scale-to-fit;" /&gt;\n                    &lt;/ui:VisualElement&gt;\n                    &lt;ui:Label text="Label" name="CharacterName" style="-unity-font-style: bold; font-size: 18px;" /&gt;\n                    &lt;ui:Label text="Label" display-tooltip-when-elided="true" name="CharacterClass" style="margin-top: 2px; margin-bottom: 8px; padding-top: 0; padding-bottom: 0;" /&gt;\n                &lt;/ui:VisualElement&gt;\n                &lt;ui:Button text="Select Character" display-tooltip-when-elided="true" name="SelectCharButton" style="width: 150px; border-left-color: rgb(49, 26, 17); border-right-color: rgb(49, 26, 17); border-top-color: rgb(49, 26, 17); border-bottom-color: rgb(49, 26, 17); background-color: rgb(255, 133, 84); border-left-width: 2px; border-right-width: 2px; border-top-width: 2px; border-bottom-width: 2px;" /&gt;\n            &lt;/ui:VisualElement&gt;\n        &lt;/ui:VisualElement&gt;\n    &lt;/ui:VisualElement&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("h3",{id:"listentryuxml"},"ListEntry.uxml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="False"&gt;\n    &lt;ui:VisualElement style="height: 41px; align-items: flex-start; justify-content: center; padding-left: 10px; background-color: rgba(170, 89, 57, 255); border-left-color: rgba(49, 26, 17, 255); border-right-color: rgba(49, 26, 17, 255); border-top-color: rgba(49, 26, 17, 255); border-bottom-color: rgba(49, 26, 17, 255); border-left-width: 2px; border-right-width: 2px; border-top-width: 2px; border-bottom-width: 2px; border-top-left-radius: 15px; border-bottom-left-radius: 15px; border-top-right-radius: 15px; border-bottom-right-radius: 15px;"&gt;\n        &lt;ui:Label text="Label" display-tooltip-when-elided="true" name="CharacterName" style="-unity-font-style: bold; font-size: 18px;" /&gt;\n    &lt;/ui:VisualElement&gt;\n&lt;/ui:UXML&gt;\n')),(0,i.kt)("h3",{id:"characterdatacs"},"CharacterData.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEngine;\n\npublic enum ECharacterClass\n{\n  Knight, Ranger, Wizard\n}\n\n[CreateAssetMenu]\npublic class CharacterData : ScriptableObject\n{\n  public string m_CharacterName;\n  public ECharacterClass m_Class;\n  public Sprite m_PortraitImage;\n}\n")),(0,i.kt)("h3",{id:"characterlistentrycontrollercs"},"CharacterListEntryController.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using UnityEngine.UIElements;\n\npublic class CharacterListEntryController\n{\n  private Label m_NameLabel;\n\n  public void SetVisualElement(VisualElement visualElement)\n  {\n    m_NameLabel = visualElement.Q&lt;Label&gt;("CharacterName");\n  }\n\n  public void SetCharacterData(CharacterData characterData)\n  {\n    m_NameLabel.text = characterData.m_CharacterName;\n  }\n}\n')),(0,i.kt)("h3",{id:"mainviewcs"},"MainView.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"using UnityEngine;\nusing UnityEngine.UIElements;\n\npublic class MainView : MonoBehaviour\n{\n  [SerializeField] private VisualTreeAsset m_ListEntryTemplate;\n\n  void OnEnable()\n  {\n    // The UXML is already instantiated by the UIDocument component\n    var uiDocument = GetComponent&lt;UIDocument&gt;();\n\n    // Initialize the character list controller\n    var characterListController = new CharacterListController();\n    characterListController.InitializeCharacterList(uiDocument.rootVisualElement, m_ListEntryTemplate);\n  }\n}\n")),(0,i.kt)("h3",{id:"characterlistcontrollercs"},"CharacterListController.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UIElements;\n\npublic class CharacterListController\n{\n  private List&lt;CharacterData&gt; m_AllCharacters;\n\n  // UXML template for list entries\n  private VisualTreeAsset m_ListEntryTemplate;\n\n  // UI element references\n  private ListView m_CharacterList;\n  private Label m_CharClassLabel;\n  private Label m_CharNameLabel;\n  private VisualElement m_CharPortrait;\n  private Button m_SelectCharButton;\n\n  private void EnumerateAllCharacters()\n  {\n    m_AllCharacters = new List&lt;CharacterData&gt;();\n    m_AllCharacters.AddRange(Resources.LoadAll&lt;CharacterData&gt;("Characters"));\n  }\n\n  public void InitializeCharacterList(VisualElement root, VisualTreeAsset listElementTemplate)\n  {\n    // Enumerate all characters\n    EnumerateAllCharacters();\n\n    // Store a reference to the template for the list entries\n    m_ListEntryTemplate = listElementTemplate;\n\n    // Store a reference to the character list element\n    m_CharacterList = root.Q&lt;ListView&gt;("CharacterList");\n\n    // Store references to the selected character info elements\n    m_CharClassLabel = root.Q&lt;Label&gt;("CharacterClass");\n    m_CharNameLabel = root.Q&lt;Label&gt;("CharacterName");\n    m_CharPortrait = root.Q&lt;VisualElement&gt;("CharacterPortrait");\n\n    // Store a reference to the select button\n    m_SelectCharButton = root.Q&lt;Button&gt;("SelectCharButton");\n\n    FillCharacterList();\n\n    // Register to get a callback when an item is selected\n    m_CharacterList.onSelectionChange += OnCharacterSelected;\n  }\n\n  private void OnCharacterSelected(IEnumerable&lt;object&gt; selectedItems)\n  {\n    // Get the currently selected item directly from the ListView\n    var selectedCharacter = m_CharacterList.selectedItem as CharacterData;\n\n    // Handle none-selection (Escape to deselect everything)\n    if (selectedCharacter == null)\n    {\n      // Clear\n      m_CharClassLabel.text = "";\n      m_CharNameLabel.text = "";\n      m_CharPortrait.style.backgroundImage = null;\n\n      // Disable the select button\n      m_SelectCharButton.SetEnabled(false);\n\n      return;\n    }\n\n    // Fill in character details\n    m_CharClassLabel.text = selectedCharacter.m_Class.ToString();\n    m_CharNameLabel.text = selectedCharacter.m_CharacterName;\n    m_CharPortrait.style.backgroundImage = new StyleBackground(selectedCharacter.m_PortraitImage);\n\n    // Enable the select button\n    m_SelectCharButton.SetEnabled(true);\n  }\n\n  private void FillCharacterList()\n  {\n    // Set up a make item function for a list entry\n    m_CharacterList.makeItem = () =&gt;\n    {\n      // Instantiate the UXML template for the entry\n      var newListEntry = m_ListEntryTemplate.Instantiate();\n\n      // Instantiate a controller for the data\n      var newListEntryLogic = new CharacterListEntryController();\n\n      // Assign the controller script to the visual element\n      newListEntry.userData = newListEntryLogic;\n\n      // Initialize the controller script\n      newListEntryLogic.SetVisualElement(newListEntry);\n\n      // Return the root of the instantiated visual tree\n      return newListEntry;\n    };\n\n    // Set up bind function for a specific list entry\n    m_CharacterList.bindItem = (item, index) =&gt;\n    {\n      (item.userData as CharacterListEntryController).SetCharacterData(m_AllCharacters[index]);\n    };\n\n    // Set a fixed item height\n    m_CharacterList.fixedItemHeight = 45;\n    // For Unity versions earlier than 2021.2 use this:\n    //m_CharacterList.itemHeight = 45;\n\n    // Set the actual item\'s source list/array\n    m_CharacterList.itemsSource = m_AllCharacters;\n  }\n}\n')))}u.isMDXComponent=!0}}]);