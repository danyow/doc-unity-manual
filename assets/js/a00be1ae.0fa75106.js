"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46825],{3905:function(e,t,i){i.d(t,{Zo:function(){return p},kt:function(){return h}});var a=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(i),h=n,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return i?a.createElement(m,l(l({ref:t},p),{},{components:i})):a.createElement(m,l({ref:t},p))}));function h(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<r;c++)l[c]=i[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},76134:function(e,t,i){i.r(t),i.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var a=i(87462),n=i(63366),r=(i(67294),i(3905)),l=["components"],o={id:"script-Serialization",title:"Script serialization",slug:"/script-serialization"},s="Script serialization",c={unversionedId:"scripting-section/unity-architecture/script-serialization/script-Serialization",id:"scripting-section/unity-architecture/script-serialization/script-Serialization",title:"Script serialization",description:"Serialization  is the automatic process of transforming data structures or GameObject states into a format that Unity can store and reconstruct later.",source:"@site/docs/scripting-section/unity-architecture/script-serialization/script-serialization.md",sourceDirName:"scripting-section/unity-architecture/script-serialization",slug:"/script-serialization",permalink:"/docs/script-serialization",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting-section/unity-architecture/script-serialization/script-serialization.md",tags:[],version:"current",frontMatter:{id:"script-Serialization",title:"Script serialization",slug:"/script-serialization"},sidebar:"tutorialSidebar",previous:{title:"\u7279\u6b8a\u6587\u4ef6\u5939\u548c\u811a\u672c\u7f16\u8bd1\u987a\u5e8f",permalink:"/docs/script-compilation/script-compile-order-folders"},next:{title:"JSON \u5e8f\u5217\u5316",permalink:"/docs/script-serialization/jsonserialization"}},p={},d=[{value:"Serialization rules",id:"serialization-rules",level:2},{value:"Serialization of custom classes",id:"serialization-of-custom-classes",level:3},{value:"Serialization of properties",id:"serialization-of-properties",level:3},{value:"Custom serialization",id:"custom-serialization",level:2},{value:"How Unity uses serialization",id:"how-unity-uses-serialization",level:2},{value:"\u4fdd\u5b58\u548c\u52a0\u8f7d",id:"\u4fdd\u5b58\u548c\u52a0\u8f7d",level:3},{value:"The Inspector window",id:"the-inspector-window",level:4},{value:"\u70ed\u91cd\u8f7d",id:"\u70ed\u91cd\u8f7d",level:4},{value:"\u9884\u5236\u4ef6",id:"\u9884\u5236\u4ef6",level:3},{value:"Instantiation",id:"instantiation",level:3},{value:"Unloading unused assets",id:"unloading-unused-assets",level:3},{value:"Differences between Editor and runtime serialization",id:"differences-between-editor-and-runtime-serialization",level:3},{value:"Script serialization errors",id:"script-serialization-errors",level:2},{value:"\u201cFind isn\u2019t allowed to be called from a MonoBehaviour constructor (or instance field initializer), call in Awake or Start instead.\u201d",id:"find-isnt-allowed-to-be-called-from-a-monobehaviour-constructor-or-instance-field-initializer-call-in-awake-or-start-instead",level:3},{value:"\u201cFind isn\u2019t allowed to be called during serialization, call it from Awake or Start instead.\u201d",id:"find-isnt-allowed-to-be-called-during-serialization-call-it-from-awake-or-start-instead",level:3},{value:"Thread-safe Unity Scripting API",id:"thread-safe-unity-scripting-api",level:3},{value:"Serialization best practice",id:"serialization-best-practice",level:2}],u={toc:d};function h(e){var t=e.components,i=(0,n.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"script-serialization"},"Script serialization"),(0,r.kt)("p",null," ",(0,r.kt)("strong",{parentName:"p"},"Serialization"),"  is the automatic process of transforming data structures or GameObject states into a format that Unity can store and reconstruct later."),(0,r.kt)("p",null,"How you organize data in your Unity project affects how Unity serializes that data, which can have a significant impact on the performance of your project. This page outlines serialization in Unity and how to optimize your project for it."),(0,r.kt)("p",null,"This document covers the following topics:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serialization-rules"},"Serialization Rules")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-serialization"},"Custom Serialization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD"},"How Unity uses serialization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serialization-errors"},"Serialization errors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serialization-best-practise"},"Serialization best practise"))),(0,r.kt)("h2",{id:"serialization-rules"},"Serialization rules"),(0,r.kt)("p",null,"Serializers in Unity are specifically designed to operate efficiently at runtime. Because of this, serialization in Unity behaves differently to serialization in other programming environments. Serializers in Unity work directly on the  ",(0,r.kt)("strong",{parentName:"p"},"fields"),"  of your C# classes rather than their properties, so there are rules that your fields must conform to to be serialized. The following section outlines how to use field serialization in Unity."),(0,r.kt)("p",null,"To use field serialization you must ensure that the field:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Is public, or has a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/SerializeField.html"},"SerializeField")," attribute")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"isn\u2019t static")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"isn\u2019t const")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"isn\u2019t readonly")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Has a field type that can be serialized:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Primitive data types (int, float, double, bool, string, etc.)"),(0,r.kt)("li",{parentName:"ul"},"Enum types (32 bites or smaller)"),(0,r.kt)("li",{parentName:"ul"},"Fixed-size buffers"),(0,r.kt)("li",{parentName:"ul"},"Unity built-in types, for example, Vector2, Vector3, Rect, Matrix4x4, Color, AnimationCurve"),(0,r.kt)("li",{parentName:"ul"},"Custom structs with the Serializable attribute"),(0,r.kt)("li",{parentName:"ul"},"References to objects that derive from ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Object.html"},"UnityEngine.Object")),(0,r.kt)("li",{parentName:"ul"},"Custom classes with the Serializable attribute. (See ",(0,r.kt)("a",{parentName:"li",href:"#serialization-of-custom-classes"},"Serialization of custom classes"),")."),(0,r.kt)("li",{parentName:"ul"},"An array of a field type mentioned above"),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"List&lt;T&gt;")," of a field type mentioned above")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Note")," : Unity doesn\u2019t support serialization of multilevel types (multidimensional arrays, jagged arrays, dictionaries, and nested container types). If you want to serialize these, you have two options:")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wrap the nested type in a class or struct")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use serialization callbacks, by implementing ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/ISerializationCallbackReceiver.html"},"ISerializationCallbackReceiver"),", to perform ",(0,r.kt)("a",{parentName:"p",href:"#custom-serialization"},"custom serialization"),"."))),(0,r.kt)("h3",{id:"serialization-of-custom-classes"},"Serialization of custom classes"),(0,r.kt)("p",null,"For Unity to serialize a custom class, you must ensure the class:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Has the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Serializable.html"},"Serializable")," attribute"),(0,r.kt)("li",{parentName:"ul"},"isn\u2019t static.")),(0,r.kt)("p",null,"When you assign an instance of a ",(0,r.kt)("inlineCode",{parentName:"p"},"UnityEngine.Object"),"-","derived class to a field and Unity saves that field, Unity serializes the field as a reference to that instance. Unity serializes the instance itself independently, so it isn\u2019t duplicated when multiple fields are assigned to the instance. But for custom classes which don\u2019t derive from ",(0,r.kt)("inlineCode",{parentName:"p"},"UnityEngine.Object"),", Unity includes the state of the instance directly in the serialized data of the MonoBehaviour or ScriptableObject that references them. There are two ways that this can happen:  ",(0,r.kt)("strong",{parentName:"p"},"inline"),"  and by  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"[SerializeReference]"))," ."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inline serialization")," : By default, Unity serializes custom classes inline by value when you don\u2019t specify ",(0,r.kt)("inlineCode",{parentName:"li"},"[SerializeReference]")," on the field that references the class. This means that if you store a reference to an instance of a custom class in several different fields, they become separate objects when serialized. Then, when Unity deserializes the fields, they contain different distinct objects with identical data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"[SerializeReference]")," serialization")," : If you do specify ",(0,r.kt)("inlineCode",{parentName:"li"},"[SerializeReference]"),", Unity establishes the object as a managed reference. The host object still stores the objects directly in its serialized data, but in a dedicated registry section.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[SerializeReference]")," adds some overhead but supports the following cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fields can be null. Inline serialization can\u2019t represent null, instead, it replaces null with an inline object that has unassigned fields.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Multiple references to the same object. If you store a reference to an instance of a custom class in several different fields without using ",(0,r.kt)("inlineCode",{parentName:"p"},"[SerializeReference]"),", then they become separate objects when serialized.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Graphs and cyclical data (for example, an object that has a reference back to itself). Inline class serialization doesn\u2019t support null or shared references, so any cycle in data can lead to unexpected results, such as strange Inspector behavior, console errors or infinite loops.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Polymorphism. If you create a class that derives from a parent class and assign it to a field that uses the parent class as its type, without ",(0,r.kt)("inlineCode",{parentName:"p"},"[SerializeReference]")," Unity only serializes the fields that belong to the parent class. When Unity deserializes the class instance, it instantiates the parent class instead of the derived class.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When a data structure requires a stable identifier to point to a specific object without hardcoding the object\u2019s array position or searching the entire array. See ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/SerializationUtility.SetManagedReferenceIdForObject.html"},"SerializationUtility.SetManagedReferenceIdForObject"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Note")," : Inline serialization is more efficient, and you should use it unless you specifically need one of the features that ",(0,r.kt)("inlineCode",{parentName:"p"},"[SerializeReference]")," supports. For full details on how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"[SerializeReference]"),", see the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/SerializeReference.html"},"SerializeReference")," documentation."))),(0,r.kt)("h3",{id:"serialization-of-properties"},"Serialization of properties"),(0,r.kt)("p",null,"Unity doesn\u2019t normally serialize properties except in the following situations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a property has an explicit backing field, Unity serializes it according to regular serialization rules. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public int MyInt\n{\nget =&gt; m_backing;\nprivate set =&gt; m_backing = value;\n}\n[SerializeField] private int m_backing;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unity serializes properties with autogenerated fields during hot reloading only. ",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"li"},"public int MyInt { get; set; }")," ",(0,r.kt)("br",null),(0,r.kt)("br",null),"If you don\u2019t want Unity to serialize a property with autogenerated fields, use the ","[","field: NonSerialized","]"," attribute.")),(0,r.kt)("h2",{id:"custom-serialization"},"Custom serialization"),(0,r.kt)("p",null,"Sometimes you might want to serialize something that Unity\u2019s serializer doesn\u2019t support (for example, a C# Dictionary). The best approach is to implement the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/ISerializationCallbackReceiver.html"},"ISerializationCallbackReceiver")," interface in your class. This allows you to implement callbacks that are invoked at key points during serialization and deserialization:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When an object is about to be serialized, Unity invokes the ",(0,r.kt)("inlineCode",{parentName:"li"},"OnBeforeSerialize()")," callback. Inside this callback is where you can transform your data into something Unity understands. For example, to serialize a C# Dictionary, copy the data from the Dictionary into an array of keys and an array of values."),(0,r.kt)("li",{parentName:"ol"},"After the ",(0,r.kt)("inlineCode",{parentName:"li"},"OnBeforeSerialize()")," callback is complete, Unity serializes the arrays."),(0,r.kt)("li",{parentName:"ol"},"Later, when the object is deserialized, Unity invokes the ",(0,r.kt)("inlineCode",{parentName:"li"},"OnAfterDeserialize()")," callback. Inside this callback is where you can transform the data back into a form that\u2019s convenient for the object in memory. For example, use the key and value arrays to repopulate the C# Dictionary.")),(0,r.kt)("h2",{id:"how-unity-uses-serialization"},"How Unity uses serialization"),(0,r.kt)("h3",{id:"\u4fdd\u5b58\u548c\u52a0\u8f7d"},"\u4fdd\u5b58\u548c\u52a0\u8f7d"),(0,r.kt)("p",null,"Unity uses serialization to load and save ",(0,r.kt)("a",{parentName:"p",href:"/docs/creating-scenes"},"scenes"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/asset-workflow"},"Assets"),", and ",(0,r.kt)("a",{parentName:"p",href:"/docs/asset-bundles-intro"},"AssetBundles")," to and from your device\u2019s memory. This includes data saved in your own scripting API objects such as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MonoBehaviour.html"},"MonoBehaviour")," components and ",(0,r.kt)("a",{parentName:"p",href:"/docs/scripting-important-classes/class-scriptable-object"},"ScriptableObjects"),"."),(0,r.kt)("p",null,"Many of the features in the Unity Editor are built on top of the core serialization system. Two things to be particularly aware of with serialization are the ",(0,r.kt)("a",{parentName:"p",href:"/docs/using-the-inspector"},"Inspector window"),", and hot reloading."),(0,r.kt)("h4",{id:"the-inspector-window"},"The Inspector window"),(0,r.kt)("p",null,"The Inspector window shows the value of the serialized fields of the inspected objects. When you change a value in the Inspector, the Inspector updates the serialized data and triggers a deserialization that updates the inspected object."),(0,r.kt)("p",null,"The same applies for both built-in Unity objects, and scripting objects such as MonoBehaviour-derived classes."),(0,r.kt)("p",null,"Unity doesn\u2019t call any C# property getters and setters when you view or change values in the Inspector window; instead, Unity accesses the serialized backing field directly."),(0,r.kt)("h4",{id:"\u70ed\u91cd\u8f7d"},"\u70ed\u91cd\u8f7d"),(0,r.kt)("p",null,"Hot reloading is where you create or edit scripts while the Editor is open and apply the script behaviors immediately. You don\u2019t have to restart the Editor for changes to take effect."),(0,r.kt)("p",null,"When you change and save a script, Unity hot reloads all the script data that\u2019s loaded at the time. Unity stores all serializable variables in all loaded scripts, then reloads those scripts and restores the serialized variables. Hot reloading discards all data that isn\u2019t serializable, so you won\u2019t be able to access the data afterward."),(0,r.kt)("p",null,"This affects all Editor windows and all MonoBehaviours in the project. Unlike other cases of serialization, Unity serializes private fields by default when reloading, even if they don\u2019t have the \u2018SerializeField\u2019 attribute."),(0,r.kt)("p",null,"When Unity reloads scripts:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Unity serializes and stores all variables in all loaded scripts."),(0,r.kt)("li",{parentName:"ol"},"Unity restores them to their original, pre-serialization values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Unity restores all variables - including private variables - that fulfill the requirements for serialization, even if a variable has no ",(0,r.kt)("inlineCode",{parentName:"li"},"[SerializeField]")," attribute. Sometimes, you need to prevent Unity from restoring private variables, for example, if you want a reference to be null after reloading from scripts. In this case, use the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/NonSerialized.html"},(0,r.kt)("inlineCode",{parentName:"a"},"[field: NonSerialized]"))," attribute."),(0,r.kt)("li",{parentName:"ul"},"Unity never restores static variables, so don\u2019t use static variables for states that you need to keep after Unity reloads a script because the reloading process will discard them.")))),(0,r.kt)("h3",{id:"\u9884\u5236\u4ef6"},"\u9884\u5236\u4ef6"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"/docs/prefabs"},"Prefab")," is the serialized data of one or more ",(0,r.kt)("a",{parentName:"p",href:"/docs/game-objects"},"GameObjects")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/game-objects/components"},"components"),". A Prefab instance contains a reference to both the Prefab source and a list of modifications to it. The modifications are what Unity needs to do to the Prefab source to create that particular Prefab instance."),(0,r.kt)("p",null,"The Prefab instance only exists while you edit your project in the Unity Editor. The Unity Editor instantiates a GameObject from its two sets of serialization data: the Prefab source and the Prefab instance\u2019s modifications."),(0,r.kt)("h3",{id:"instantiation"},"Instantiation"),(0,r.kt)("p",null,"When you call ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Object.Instantiate.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Instantiate"))," on anything that exists in a scene, such as a Prefab or a GameObject:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Unity serializes it. This happens both at runtime and in the Editor. Unity can serialize everything that derives from ",(0,r.kt)("inlineCode",{parentName:"li"},"UnityEngine.Object"),"."),(0,r.kt)("li",{parentName:"ol"},"Unity creates a new GameObject and deserializes the data onto the new GameObject."),(0,r.kt)("li",{parentName:"ol"},"Unity runs the same serialization code in a different variant to report which other ",(0,r.kt)("inlineCode",{parentName:"li"},"UnityEngine.Objects")," it references. It checks all referenced ",(0,r.kt)("inlineCode",{parentName:"li"},"UnityEngine.Objects")," to see if they\u2019re part of the data Unity instantiates. If the reference points to something external, such as a Texture, Unity keeps that reference as it is. If the reference points to something internal, such as a child GameObject, Unity patches the reference to the corresponding copy.")),(0,r.kt)("h3",{id:"unloading-unused-assets"},"Unloading unused assets"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EditorUtility.UnloadUnusedAssetsImmediate")," is the native Unity garbage collector and has a different purpose to the standard C# garbage collector. It runs after you load a scene and checks for objects (like Textures) that it no longer references and unloads them safely. The native Unity garbage collector runs the serializer in a variation in which objects report all references to external ",(0,r.kt)("inlineCode",{parentName:"p"},"UnityEngine.Objects"),". This is how Textures that one scene uses, the garbage collector unloads in the next."),(0,r.kt)("h3",{id:"differences-between-editor-and-runtime-serialization"},"Differences between Editor and runtime serialization"),(0,r.kt)("p",null,"Most serialization happens in the Editor, whereas deserialization is the focus at runtime. Unity serializes some features only in the Editor, while it can serialize other features in both the Editor and at runtime:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"\u529f\u80fd")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Editor")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Runtime")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Assets in Binary Format")),(0,r.kt)("td",{parentName:"tr",align:null},"Read/write supported"),(0,r.kt)("td",{parentName:"tr",align:null},"Read supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Assets in YAML format")),(0,r.kt)("td",{parentName:"tr",align:null},"Read/write supported"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e0d\u652f\u6301")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Saving scenes, prefabs and other assets")),(0,r.kt)("td",{parentName:"tr",align:null},"Supported, unless in Play mode"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e0d\u652f\u6301")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Serialization of individual objects with ",(0,r.kt)("a",{parentName:"strong",href:"/docs/script-serialization/jsonserialization"},"JsonUtility"))),(0,r.kt)("td",{parentName:"tr",align:null},"Read/write support with JsonUtility.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Support for additional types of objects with EditorJsonUtility"),(0,r.kt)("td",{parentName:"tr",align:null},"Read/write support with JsonUtility")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/SerializeReference.html"},"SerializeReference"))),(0,r.kt)("td",{parentName:"tr",align:null},"\u53d7\u652f\u6301"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53d7\u652f\u6301")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/ISerializationCallbackReceiver.html"},"ISerializationCallbackReceiver"))),(0,r.kt)("td",{parentName:"tr",align:null},"\u53d7\u652f\u6301"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53d7\u652f\u6301")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Serialization.FormerlySerializedAsAttribute.html"},"FormerlySerializedAs"))),(0,r.kt)("td",{parentName:"tr",align:null},"\u53d7\u652f\u6301"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e0d\u652f\u6301")))),(0,r.kt)("p",null,"Objects can have additional fields that only the Editor serializes, such as when you declare fields within the UNITY","_","EDITOR ",(0,r.kt)("a",{parentName:"p",href:"/docs/platform-dependent-compilation"},"scripting symbol"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public class SerializeRules : MonoBehaviour\n{\n#if UNITY_EDITOR\npublic int m_intEditorOnly;\n#endif\n}\n")),(0,r.kt)("p",null,"In the above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"m_intEditorOnly")," field is only serialized in the editor and isn\u2019t included in the build. This allows you to save memory by omitting data that\u2019s only required in the Editor from your build. Any code that uses that field would also need to be conditionally compiled, for example within #if UNITY","_","EDITOR blocks, so that the class can compile at build time."),(0,r.kt)("p",null,"The Editor doesn\u2019t support objects with fields that Unity only serializes at runtime, (for example, when you declare fields within the UNITY","_","STANDALONE directive)."),(0,r.kt)("h2",{id:"script-serialization-errors"},"Script serialization errors"),(0,r.kt)("p",null,"Script serialization can cause errors. Fixes to some of these are listed below."),(0,r.kt)("h3",{id:"find-isnt-allowed-to-be-called-from-a-monobehaviour-constructor-or-instance-field-initializer-call-in-awake-or-start-instead"},"\u201cFind isn\u2019t allowed to be called from a MonoBehaviour constructor (or instance field initializer), call in Awake or Start instead.\u201d"),(0,r.kt)("p",null,"Calling Scripting API such as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/GameObject.Find.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GameObject.Find"))," inside a MonoBehaviour constructor or field initializer triggers this error."),(0,r.kt)("p",null,"To fix this, make the call to the Scripting API in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MonoBehaviour.Start.html"},(0,r.kt)("inlineCode",{parentName:"a"},"MonoBehaviour.Start"))," instead of in the constructor."),(0,r.kt)("h3",{id:"find-isnt-allowed-to-be-called-during-serialization-call-it-from-awake-or-start-instead"},"\u201cFind isn\u2019t allowed to be called during serialization, call it from Awake or Start instead.\u201d"),(0,r.kt)("p",null,"Calling Scripting API such as GameObject.Find from within the constructor of a class marked with ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Serializable")," triggers this error."),(0,r.kt)("p",null,"\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u7f16\u8f91\u4ee3\u7801\uff0c\u786e\u4fdd\u4e0d\u4f1a\u5728\u4efb\u4f55\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u4efb\u4f55\u811a\u672c API\u3002"),(0,r.kt)("h3",{id:"thread-safe-unity-scripting-api"},"Thread-safe Unity Scripting API"),(0,r.kt)("p",null,"The restrictions above affect the majority of the Scripting API. Only some parts of the Unity scripting API are exempt and you can call them from anywhere:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Debug.Log.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Debug.Log"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Mathf.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Mathf"))," functions"),(0,r.kt)("li",{parentName:"ul"},"Simple self-contained structs; for example math structs like ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Vector3.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Vector3"))," and ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Quaternion.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Quaternion")))),(0,r.kt)("p",null,"To reduce the risk of errors during serialization, only call API methods that are self-contained and don\u2019t need to get or set data in Unity itself, unless there is no alternative."),(0,r.kt)("h2",{id:"serialization-best-practice"},"Serialization best practice"),(0,r.kt)("p",null,"You can organize your data to ensure you get optimal use of Unity\u2019s serialization."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Aim to have Unity serialize the smallest possible set of data. The purpose of this isn\u2019t to save space on your computer\u2019s hard drive, but to make sure that you can maintain backwards compatibility with previous versions of the project. Backwards compatibility can become more difficult later on in development if you work with large sets of serialized data."),(0,r.kt)("li",{parentName:"ul"},"Never have Unity serialize duplicate data or cached data. This causes significant problems for backwards compatibility: it carries a high risk of error because data can get out of sync."),(0,r.kt)("li",{parentName:"ul"},"Avoid nested, recursive structures where you reference other classes. The layout of a serialized structure always needs to be the same; independent of the data and only dependent on what\u2019s exposed in the script. The only way to reference other classes is through classes derived from ",(0,r.kt)("inlineCode",{parentName:"li"},"UnityEngine.Object"),". These classes are separate; they only reference each other and they don\u2019t embed the contents.")))}h.isMDXComponent=!0}}]);