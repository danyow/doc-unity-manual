"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64265],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||i;return a?r.createElement(u,l(l({ref:t},p),{},{components:a})):r.createElement(u,l({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},64942:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return h}});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),l=["components"],o={id:"SRPBatcher",title:"Scriptable Render Pipeline Batcher",slug:"/optimizing-draw-calls/srpbatcher"},s="Scriptable Render Pipeline Batcher",c={unversionedId:"graphics/graphics-performance-profiling/optimizing-draw-calls/SRPBatcher",id:"graphics/graphics-performance-profiling/optimizing-draw-calls/SRPBatcher",title:"Scriptable Render Pipeline Batcher",description:"The Scriptable Render Pipeline (SRP) Batcher is a draw call optimization that significantly improves performance for applications that use an SRP. The SRP Batcher reduces the CPU time Unity requires to prepare and dispatch draw calls for materials that use the same shader variant.",source:"@site/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/srpbatcher.md",sourceDirName:"graphics/graphics-performance-profiling/optimizing-draw-calls",slug:"/optimizing-draw-calls/srpbatcher",permalink:"/docs/optimizing-draw-calls/srpbatcher",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/srpbatcher.md",tags:[],version:"current",frontMatter:{id:"SRPBatcher",title:"Scriptable Render Pipeline Batcher",slug:"/optimizing-draw-calls/srpbatcher"},sidebar:"tutorialSidebar",previous:{title:"Creating shaders that support GPU instancing",permalink:"/docs/gpuinstancing/gpu-instancing-shader"},next:{title:"Graphics performance fundamentals",permalink:"/docs/graphics-performance-profiling/optimizing-graphics-performance"}},p={},h=[{value:"Requirements and compatibility",id:"requirements-and-compatibility",level:2},{value:"Render pipeline compatibility",id:"render-pipeline-compatibility",level:3},{value:"GameObject compatibility",id:"gameobject-compatibility",level:3},{value:"Shader compatibility",id:"shader-compatibility",level:3},{value:"\u4f7f\u7528 SRP Batcher",id:"\u4f7f\u7528-srp-batcher",level:2},{value:"Using the SRP Batcher in URP",id:"using-the-srp-batcher-in-urp",level:3},{value:"Using the SRP Batcher in HDRP",id:"using-the-srp-batcher-in-hdrp",level:3},{value:"SRP Batcher \u7684\u5de5\u4f5c\u539f\u7406",id:"srp-batcher-\u7684\u5de5\u4f5c\u539f\u7406",level:2},{value:"Intentionally removing SRP Batcher compatibility for GameObjects",id:"intentionally-removing-srp-batcher-compatibility-for-gameobjects",level:3},{value:"Removing shader compatibility",id:"removing-shader-compatibility",level:4},{value:"Removing renderer compatibility",id:"removing-renderer-compatibility",level:4},{value:"Profiling the SRP Batcher in the Unity Frame Debugger",id:"profiling-the-srp-batcher-in-the-unity-frame-debugger",level:2}],d={toc:h};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"scriptable-render-pipeline-batcher"},"Scriptable Render Pipeline Batcher"),(0,i.kt)("p",null,"The Scriptable Render Pipeline (SRP) Batcher is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/optimizing-draw-calls"},"draw call optimization")," that significantly improves performance for applications that use an SRP. The SRP Batcher reduces the CPU time Unity requires to prepare and dispatch draw calls for materials that use the same shader variant."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SRPBatcher.png",alt:"The Scriptable Render Pipeline (SRP) Batcher reduces the CPU time Unity requires to render scenes with many materials that use the same shader variant."})),(0,i.kt)("p",null,"The Scriptable Render Pipeline (SRP) Batcher reduces the CPU time Unity requires to render scenes with many materials that use the same shader variant."),(0,i.kt)("h2",{id:"requirements-and-compatibility"},"Requirements and compatibility"),(0,i.kt)("p",null,"This section includes information about the render pipeline compatibility of the SRP Batcher."),(0,i.kt)("h3",{id:"render-pipeline-compatibility"},"Render pipeline compatibility"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u529f\u80fd")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u5185\u7f6e\u6e32\u67d3\u7ba1\u7ebf")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u901a\u7528\u6e32\u67d3\u7ba1\u7ebf (URP)")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"\u9ad8\u6e05\u6e32\u67d3\u7ba1\u7ebf (HDRP)")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Custom Scriptable Render Pipeline (SRP)")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"SRP Batcher")),(0,i.kt)("td",{parentName:"tr",align:null},"\u5426"),(0,i.kt)("td",{parentName:"tr",align:null},"\u662f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u662f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u662f")))),(0,i.kt)("h3",{id:"gameobject-compatibility"},"GameObject compatibility"),(0,i.kt)("p",null,"In any given scene, some GameObjects are compatible with the SRP Batcher, and some aren\u2019t. Compatible GameObjects use the SRP Batcher code path, and non-compatible GameObjects use the standard SRP code path. For more information, see ",(0,i.kt)("a",{parentName:"p",href:"#srp-batcher-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86"},"How the SRP Batcher works"),"."),(0,i.kt)("p",null,"A GameObject must meet the following requirements to be compatible with the SRP Batcher code path:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The GameObject must contain either a mesh or a skinned mesh. It can\u2019t be a particle."),(0,i.kt)("li",{parentName:"ul"},"The GameObject mustn\u2019t use ",(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MaterialPropertyBlock.html"},"MaterialPropertyBlocks"),"."),(0,i.kt)("li",{parentName:"ul"},"The shader that the GameObject uses must be compatible with the SRP Batcher. For more information, see ",(0,i.kt)("a",{parentName:"li",href:"#shader-compatibility"},"Shader compatibility"),".")),(0,i.kt)("h3",{id:"shader-compatibility"},"Shader compatibility"),(0,i.kt)("p",null,"All lit and unlit shaders in the High Definition Render Pipeline (HDRP) and the Universal Render Pipeline (URP) fit this requirement (except for the particle versions of these shaders)."),(0,i.kt)("p",null,"For a custom shader to be compatible with the SRP Batcher it must meet the following requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The shader must declare all built-in engine properties in a single constant buffer named ",(0,i.kt)("inlineCode",{parentName:"li"},"UnityPerDraw"),". For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"unity_ObjectToWorld"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"unity_SHAr"),"."),(0,i.kt)("li",{parentName:"ul"},"The shader must declare all material properties in a single constant buffer named ",(0,i.kt)("inlineCode",{parentName:"li"},"UnityPerMaterial"),".")),(0,i.kt)("p",null,"You can check the compatibility status of a shader in the Inspector panel."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SRP_batcher_shader_compatibility.png",alt:"You can check the compatibility of your shaders in the Inspector panel for the specific shader."})),(0,i.kt)("p",null,"You can check the compatibility of your shaders in the Inspector panel for the specific shader."),(0,i.kt)("h2",{id:"\u4f7f\u7528-srp-batcher"},"\u4f7f\u7528 SRP Batcher"),(0,i.kt)("p",null,"This section contains information on how to use the SRP Batcher in Unity\u2019s pre-built Scriptable Render Pipelines."),(0,i.kt)("h3",{id:"using-the-srp-batcher-in-urp"},"Using the SRP Batcher in URP"),(0,i.kt)("p",null,"\u8981\u5728 URP \u4e2d\u6fc0\u6d3b SRP Batcher\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a"),(0,i.kt)("p",null,"1.\u5728 Project \u7a97\u53e3\u4e2d\u9009\u62e9 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@latest/index.html?subfolder=/manual/universalrp-asset.html"},"URP \u8d44\u6e90"),"\u3002 2. In the Inspector for the URP asset, go to  ",(0,i.kt)("strong",{parentName:"p"},"Advanced")," , and enable  ",(0,i.kt)("strong",{parentName:"p"},"SRP Batcher")," ."),(0,i.kt)("h3",{id:"using-the-srp-batcher-in-hdrp"},"Using the SRP Batcher in HDRP"),(0,i.kt)("p",null,"When you use HDRP, Unity enables the SRP Batcher by default. Disabling the SRP Batcher is not recommended. However, you can temporarily disable the SRP Batcher for debugging purposes."),(0,i.kt)("p",null,"To enable and disable the SRP Batcher at build time using the Editor:"),(0,i.kt)("p",null,"1.\u5728 Project \u7a97\u53e3\u4e2d\u9009\u62e9 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@latest/index.html?subfolder=/manual/HDRP-Asset.html"},"HDRP \u8d44\u6e90"),"\u3002 2. In the Inspector for the asset, enter ",(0,i.kt)("a",{parentName:"p",href:"/docs/using-the-inspector/inspector-options"},"Debug mode"),". In Debug mode, you can see the properties of the HDRP Asset, including the SRP Batcher property. 3. Select  ",(0,i.kt)("strong",{parentName:"p"},"Enable"),"   ",(0,i.kt)("strong",{parentName:"p"},"SRP Batcher"),"  to enable or disable the SRP Batcher."),(0,i.kt)("p",null,"To enable or disable the SRP Batcher at runtime, toggle the following global variable in your C# code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"GraphicsSettings.useScriptableRenderPipelineBatching = true;\n")),(0,i.kt)("h2",{id:"srp-batcher-\u7684\u5de5\u4f5c\u539f\u7406"},"SRP Batcher \u7684\u5de5\u4f5c\u539f\u7406"),(0,i.kt)("p",null,"The traditional way to optimize draw calls is to reduce the number of them. Instead, the SRP Batcher reduces render-state changes between draw calls. To do this, the SRP Batcher combines a sequence of ",(0,i.kt)("inlineCode",{parentName:"p"},"bind")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"draw")," GPU commands. Each sequence of commands is called an SRP batch."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SROShaderPass.png",alt:"The batching of bind and draw commands reduces the GPU setup between draw calls."})),(0,i.kt)("p",null,"The batching of bind and draw commands reduces the GPU setup between draw calls."),(0,i.kt)("p",null,"To achieve optimal performance for your rendering, each SRP batch should contain as many ",(0,i.kt)("inlineCode",{parentName:"p"},"bind")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"draw")," commands as possible. To achieve this, use as few shader variants as possible. You can still use as many different materials with the same shader as you want."),(0,i.kt)("p",null,"When Unity detects a new material during the render loop, the CPU collects all properties and binds them to the GPU in constant buffers. The number of GPU buffers depends on how the shader declares its constant buffers."),(0,i.kt)("p",null,"The SRP Batcher is a low-level render loop that makes material data persist in GPU memory. If the material content doesn\u2019t change, theSRP Batcher doesn\u2019t make any render-state changes. Instead, the SRP Batcher uses a dedicated code path to update the Unity Engine properties in a large GPU buffer, like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SRP_Batcher_loop.png",alt:"The SRP Batcher rendering workflow. The SRP Batcher uses a dedicated code path to update the Unity Engine properties in a large GPU buffer."})),(0,i.kt)("p",null,"The SRP Batcher rendering workflow. The SRP Batcher uses a dedicated code path to update the Unity Engine properties in a large GPU buffer."),(0,i.kt)("p",null,"Here, the CPU only handles the Unity Engine properties, labeled  ",(0,i.kt)("strong",{parentName:"p"},"Per Object large buffer"),"  in the above diagram. All materials have persistent constant buffers located in GPU memory, which are ready to use. This speeds up rendering because:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All material content now persists in GPU memory."),(0,i.kt)("li",{parentName:"ul"},"Dedicated code manages a large per-object GPU constant buffer for all per-object properties.")),(0,i.kt)("h3",{id:"intentionally-removing-srp-batcher-compatibility-for-gameobjects"},"Intentionally removing SRP Batcher compatibility for GameObjects"),(0,i.kt)("p",null,"In some rare cases, you might want to intentionally make particular GameObjects incompatible with the SRP Batcher. For example, if you want to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/gpuinstancing"},"GPU instancing"),", which isn\u2019t compatible with the SRP Batcher. If you want to render many identical meshes with the exact same material, GPU instancing can be more efficient than the SRP Batcher. To use GPU instancing, you must either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Graphics.DrawMeshInstanced.html"},"Graphics.DrawMeshInstanced"),"."),(0,i.kt)("li",{parentName:"ul"},"Manually remove SRP Batcher compatibility and enable GPU instancing for the material.")),(0,i.kt)("p",null,"There are two ways to remove compatibility with the SRP Batcher from a GameObject:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make the shader incompatible.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make the renderer incompatible."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Tip")," : If you use GPU instancing instead of the SRP Batcher, use the ",(0,i.kt)("a",{parentName:"p",href:"#profiler"},"Profiler")," to make sure that GPU instancing is more efficient for your application than the SRP Batcher."))),(0,i.kt)("h4",{id:"removing-shader-compatibility"},"Removing shader compatibility"),(0,i.kt)("p",null,"You can make both hand-written and Shader Graph shaders incompatible with the SRP Batcher. However, for Shader Graph shaders, if you change and recompile the Shader Graph often, it\u2019s simpler to make the ",(0,i.kt)("a",{parentName:"p",href:"#removing-renderer-compatibility"},"renderer incompatible")," instead."),(0,i.kt)("p",null,"To make a Unity shader incompatible with the SRP Batcher, you need to make changes to the shader source file:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"For hand-written shaders, open the shader source file. For Shader Graph shaders, copy the Shader Graph\u2019s compiled shader source code into a new shader source file. Use the new shader source file in your application instead of the Shader Graph."),(0,i.kt)("li",{parentName:"ol"},"Add a new ",(0,i.kt)("a",{parentName:"li",href:"/docs/sl-shader/sl-properties"},"material property")," declaration into the shader\u2019s ",(0,i.kt)("inlineCode",{parentName:"li"},"Properties")," block. Don\u2019t declare the new material property in the ",(0,i.kt)("inlineCode",{parentName:"li"},"UnityPerMaterial")," constant buffer.")),(0,i.kt)("p",null,"The material property doesn\u2019t need to do anything; just having a material property that doesn\u2019t exist in the ",(0,i.kt)("inlineCode",{parentName:"p"},"UnityPerMaterial")," constant buffer makes the shader incompatible with the SRP Batcher."),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Warning")," : If you use a Shader Graph, be aware that every time you edit and recompile the Shader Graph, you must repeat this process."),(0,i.kt)("h4",{id:"removing-renderer-compatibility"},"Removing renderer compatibility"),(0,i.kt)("p",null,"You can make individual renderers incompatible with the SRP Batcher. To do this, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"MaterialPropertyBlock")," to the renderer."),(0,i.kt)("h2",{id:"profiling-the-srp-batcher-in-the-unity-frame-debugger"},"Profiling the SRP Batcher in the Unity Frame Debugger"),(0,i.kt)("p",null,"You can check the status of SRP batches in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/graphics-performance-profiling/frame-debugger"},"Frame Debugger")," window. Each SRP Batch displays how many draw calls Unity used, which keywords Unity attached to the shader, and the reason why Unity didn\u2019t batch that draw call with the previous one."),(0,i.kt)("p",null,"\u8981\u68c0\u67e5 SRP Batcher \u6279\u6b21\u7684\u72b6\u6001\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"In the Editor, open the Frame Debugger (menu:  ",(0,i.kt)("strong",{parentName:"li"},"Window"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Analysis"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Frame Debugger")," )."),(0,i.kt)("li",{parentName:"ol"},"In the Frame Debugger, go to  ",(0,i.kt)("strong",{parentName:"li"},"Render Camera"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Render Opaques")," ."),(0,i.kt)("li",{parentName:"ol"},"Expand the  ",(0,i.kt)("strong",{parentName:"li"},"RenderLoopNewBatcher.Draw"),"  list."),(0,i.kt)("li",{parentName:"ol"},"Select on the  ",(0,i.kt)("strong",{parentName:"li"},"SRP Batch"),"  you want to inspect.")),(0,i.kt)("p",null,"In the example below, the reason is:  ",(0,i.kt)("strong",{parentName:"p"},"Nodes have different shaders")," . This means that the shader for that SRP batch os different to the one in the previous SRP batch. Because the SRP Batcher used a different shader, the SRP Batcher created a new batch. If several SRP batches have a low number of draw calls, it often means the project uses too many shader variants."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SRP_Batcher_batch_information.png",alt:"In the Frame Debugger window, you can find details about individual SRP batches, including why the SRP Batcher created a new SRP batch instead of continuing the existing one."})),(0,i.kt)("p",null,"In the Frame Debugger window, you can find details about individual SRP batches, including why the SRP Batcher created a new SRP batch instead of continuing the existing one."),(0,i.kt)("p",null,"If you write your own Scriptable Render Pipeline, instead of using either the Universal Render Pipeline or the High Definition Render Pipeline, try to write a generic multi-purpose shader with a minimal number of keywords. This is optimal because you can use as many material properties as you want."))}m.isMDXComponent=!0}}]);