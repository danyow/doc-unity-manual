"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37641],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return g}});var i=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=i.createContext({}),l=function(t){var e=i.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},d=function(t){var e=l(t.components);return i.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,d=u(t,["components","mdxType","originalType","parentName"]),m=l(n),g=r,p=m["".concat(s,".").concat(g)]||m[g]||c[g]||o;return n?i.createElement(p,a(a({ref:e},d),{},{components:n})):i.createElement(p,a({ref:e},d))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=m;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=t,u.mdxType="string"==typeof t?t:r,a[1]=u;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},29760:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return c}});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],u={id:"UIB-getting-started-editor-ext",title:"Runtime UI vs Editor Extension Authoring",slug:"/uib-getting-started/uib-getting-started-editor-ext"},s="Runtime UI vs Editor Extension Authoring",l={unversionedId:"uitoolkits/uielements/uibuilder/uib-getting-started/UIB-getting-started-editor-ext",id:"uitoolkits/uielements/uibuilder/uib-getting-started/UIB-getting-started-editor-ext",title:"Runtime UI vs Editor Extension Authoring",description:"By default, UI Builder assumes UI is being created for use at runtime in a Player build. As such, all new UI Documents (UXML) created in the UI Builder have a setting saved within the UXML that marks them as runtime-only UI. The main effect this has in the UI Builder is that the  Library  pane\u2019s  Standard  tab will be filtered to only contain elements that work best at runtime.",source:"@site/docs/uitoolkits/uielements/uibuilder/uib-getting-started/uib-getting-started-editor-ext.md",sourceDirName:"uitoolkits/uielements/uibuilder/uib-getting-started",slug:"/uib-getting-started/uib-getting-started-editor-ext",permalink:"/doc-unity-manual/docs/uib-getting-started/uib-getting-started-editor-ext",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uitoolkits/uielements/uibuilder/uib-getting-started/uib-getting-started-editor-ext.md",tags:[],version:"current",frontMatter:{id:"UIB-getting-started-editor-ext",title:"Runtime UI vs Editor Extension Authoring",slug:"/uib-getting-started/uib-getting-started-editor-ext"},sidebar:"tutorialSidebar",previous:{title:"Create and manage UI Documents (UXML)",permalink:"/doc-unity-manual/docs/uib-getting-started/uib-getting-started-documents"},next:{title:"Inline styles vs style sheets",permalink:"/doc-unity-manual/docs/uib-getting-started/uib-getting-started-inline"}},d={},c=[{value:"Enable Editor Extension Authoring for UI Documents (UXML)",id:"enable-editor-extension-authoring-for-ui-documents-uxml",level:2},{value:"Set default Editor Extension Authoring mode for new UI Documents (UXML)",id:"set-default-editor-extension-authoring-mode-for-new-ui-documents-uxml",level:2},{value:"The Editor Extension Authoring attribute",id:"the-editor-extension-authoring-attribute",level:2}],m={toc:c};function g(t){var e=t.components,n=(0,r.Z)(t,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"runtime-ui-vs-editor-extension-authoring"},"Runtime UI vs Editor Extension Authoring"),(0,o.kt)("p",null,"By default, UI Builder assumes UI is being created for use at runtime in a Player build. As such, all new UI Documents (UXML) created in the UI Builder have a setting saved within the UXML that marks them as runtime-only UI. The main effect this has in the UI Builder is that the  ",(0,o.kt)("strong",{parentName:"p"},"Library"),"  pane\u2019s  ",(0,o.kt)("strong",{parentName:"p"},"Standard"),"  tab will be filtered to only contain elements that work best at runtime."),(0,o.kt)("h2",{id:"enable-editor-extension-authoring-for-ui-documents-uxml"},"Enable Editor Extension Authoring for UI Documents (UXML)"),(0,o.kt)("p",null,"To create UI for the Unity Editor, like custom Editor Windows or custom Inspectors, you must enable  ",(0,o.kt)("strong",{parentName:"p"},"Editor Extension Authoring"),"  on your UI Document (UXML). You can enable extension authoring in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Select the  ",(0,o.kt)("strong",{parentName:"li"},"Canvas"),"  header, and in the  ",(0,o.kt)("strong",{parentName:"li"},"Inspector"),"  enabling the  ",(0,o.kt)("strong",{parentName:"li"},"Document Settings ",">"," Editor Extension Authoring"),"  option:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/EditorExtensionAuthoringPanelSettings.png",alt:"EditorExtensionAuthoringPanelSettings"})),(0,o.kt)("p",null,"Unlike the other  ",(0,o.kt)("strong",{parentName:"p"},"Canvas"),"  settings, this setting will be saved as part of the UI Document (UXML) using a ",(0,o.kt)("inlineCode",{parentName:"p"},"&lt;UXML&gt;")," root tag attribute called ",(0,o.kt)("inlineCode",{parentName:"p"},"editor-extension-mode"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"In the  ",(0,o.kt)("strong",{parentName:"li"},"\u22ee"),"  menu on the  ",(0,o.kt)("strong",{parentName:"li"},"Library"),"  pane, select  ",(0,o.kt)("strong",{parentName:"li"},"Editor Extension Authoring")," .")),(0,o.kt)("p",null,"With  ",(0,o.kt)("strong",{parentName:"p"},"Editor Extension Authoring"),"  enabled, you should have additional elements in the  ",(0,o.kt)("strong",{parentName:"p"},"Library"),"  pane  ",(0,o.kt)("strong",{parentName:"p"},"Standard"),"  tab. Editor-only elements are marked with an ",(0,o.kt)("inlineCode",{parentName:"p"},"Editor Only")," pill."),(0,o.kt)("h2",{id:"set-default-editor-extension-authoring-mode-for-new-ui-documents-uxml"},"Set default Editor Extension Authoring mode for new UI Documents (UXML)"),(0,o.kt)("p",null,"To set the default setting for  ",(0,o.kt)("strong",{parentName:"p"},"Editor Extension Authoring"),"  on new UI Documents (UXML):"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to  ",(0,o.kt)("strong",{parentName:"li"},"Project Settings"),"  ",">","  ",(0,o.kt)("strong",{parentName:"li"},"UI Builder")," "),(0,o.kt)("li",{parentName:"ol"},"Select  ",(0,o.kt)("strong",{parentName:"li"},"Enable Editor Extension Authoring by Default")," .")),(0,o.kt)("h2",{id:"the-editor-extension-authoring-attribute"},"The Editor Extension Authoring attribute"),(0,o.kt)("p",null,"Every UI Document (UXML) opened in UI Builder has an Editor Extension Authoring attribute. The UI Builder adds the attribute to the UI Document root tag, like the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'&lt;ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="False"&gt;\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"\u6ce8\u610f"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Because the Editor extension authoring attribute is saved in the UI Document (UXML) file, it\u2019s version controlled. When you create a new UI Document (UXML), the UI Builder sets its Editor Extension Authoring attribute according to the default specified in the UI Builder project settings.")))),(0,o.kt)("p",null,"UI Documents (UXML) that you create outside of the UI Builder (for example, in a text editor or IDE) don\u2019t have an Editor Extension Authoring attribute until you open them in the UI Builder. When you open an externally created UI Document (UXML) in the UI Builder for the first time, the Editor Extension Authoring attribute is set according to the default specified in the UI Builder project settings."))}g.isMDXComponent=!0}}]);