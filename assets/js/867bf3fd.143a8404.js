"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17949],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52423:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],l={id:"handling-IL2CPP-additional-args",title:"Handling platform specific settings for IL2CPP additional arguments",slug:"/il2cpp/handling-il2cpp-additional-args"},s="Handling platform specific settings for IL2CPP additional arguments",c={unversionedId:"scripting-section/unity-architecture/scripting-backends/il2cpp/handling-IL2CPP-additional-args",id:"scripting-section/unity-architecture/scripting-backends/il2cpp/handling-IL2CPP-additional-args",title:"Handling platform specific settings for IL2CPP additional arguments",description:"If your project has the additional IL2CPP arguments set, then compiling for more than one platform might not work as expected, especially when cross compiling for Linux.",source:"@site/docs/scripting-section/unity-architecture/scripting-backends/il2cpp/handling-il2cpp-additional-args.md",sourceDirName:"scripting-section/unity-architecture/scripting-backends/il2cpp",slug:"/il2cpp/handling-il2cpp-additional-args",permalink:"/docs/il2cpp/handling-il2cpp-additional-args",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting-section/unity-architecture/scripting-backends/il2cpp/handling-il2cpp-additional-args.md",tags:[],version:"current",frontMatter:{id:"handling-IL2CPP-additional-args",title:"Handling platform specific settings for IL2CPP additional arguments",slug:"/il2cpp/handling-il2cpp-additional-args"},sidebar:"tutorialSidebar",previous:{title:"IL2CPP Overview",permalink:"/docs/il2cpp"},next:{title:"\u6258\u7ba1\u5806\u6808\u8ddf\u8e2a\u4e0e IL2CPP",permalink:"/docs/il2cpp/il2cpp-managed-stack-traces"}},p={},d=[{value:"IPreprocessBuildWithReport hook",id:"ipreprocessbuildwithreport-hook",level:2}],u={toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handling-platform-specific-settings-for-il2cpp-additional-arguments"},"Handling platform specific settings for IL2CPP additional arguments"),(0,a.kt)("p",null,"If your project has the additional IL2CPP arguments set, then compiling for more than one platform might not work as expected, especially when cross compiling for Linux."),(0,a.kt)("p",null,"To find out if any additional IL2CPP arguments are already set, do one of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check if the environment variable ",(0,a.kt)("inlineCode",{parentName:"li"},"IL2CPP_ADDITIONAL_ARGS")," is set."),(0,a.kt)("li",{parentName:"ul"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"ProjectSettings/ProjectSettings.asset"),", check if the editor script has a value called ",(0,a.kt)("inlineCode",{parentName:"li"},"additionalIl2CppArgs"),".")),(0,a.kt)("p",null,"Note that the methods for setting additional IL2CPP arguments are globally applied to all platforms, which can cause compilation issues if set for a platform other than the desired platform. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"IPreprocessBuildWithReport")," hook (as shown below) to ensure IL2CPP arguments are set only for the platform that requires them."),(0,a.kt)("h2",{id:"ipreprocessbuildwithreport-hook"},"IPreprocessBuildWithReport hook"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"IPreprocessBuildWithReport")," hook to build scripts or the Build dialog to set the additional arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'class MyCustomPreprocessBuild: IPreprocessBuildWithReport\n{\n    public int callbackOrder { get { return 0; } }\n    public void OnPreprocessBuild(BuildReport report)\n    {\n        string addlArgs = "";\n        if (report.summary.platform == BuildTarget.StandaloneWindows || report.summary.platform == BuildTarget.StandaloneWindows64)\n            addlArgs = "--compiler-flags=\\"d2ssa-cfg-jt\\"";\n        UnityEngine.Debug.Log($"Setting Additional IL2CPP Args = \\"{addlArgs}\\" for platform {report.summary.platform}");\n        PlayerSettings.SetAdditionalIl2CppArgs(addlArgs);\n    }\n}\n')))}g.isMDXComponent=!0}}]);